import { jsonDecryptData, scryptEncode, naclEncrypt, scryptToU8a, jsonEncryptFormat, keyExtractPath, keyFromPath, secp256k1Compress, signatureVerify, sr25519VrfSign, sr25519VrfVerify, secp256k1Sign, ed25519Sign, sr25519Sign, blake2AsU8a, keccakAsU8a, secp256k1Expand, ethereumEncode, secp256k1PairFromSeed, ed25519PairFromSeed, sr25519PairFromSeed, decodeAddress, encodeAddress, base64Decode, keyExtractSuri, mnemonicToLegacySeed, mnemonicToMiniSecret, hdEthereum, isEthereumAddress, xxhashAsU8a, blake2AsHex, cryptoWaitReady } from '@polkadot/util-crypto';

/** @internal Last-resort "this", if it gets here it probably would fail anyway */
function evaluateThis(fn) {
    return fn('return this');
}
/**
 * A cross-evnironment implementation for globalThis
 */
const xglobal =  (typeof globalThis !== 'undefined'
    ? globalThis
    : typeof global !== 'undefined'
        ? global
        : typeof self !== 'undefined'
            ? self
            : typeof window !== 'undefined'
                ? window
                : evaluateThis(Function));
/**
 * Extracts a known global from the environment, applying a fallback if not found
 */
function extractGlobal(name, fallback) {
    // Not quite sure why this is here - snuck in with TS 4.7.2 with no real idea
    // (as of now) as to why this looks like an "any" when we do cast it to a T
    //
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return typeof xglobal[name] === 'undefined'
        ? fallback
        : xglobal[name];
}

let TextDecoder$1 = class TextDecoder {
    // eslint-disable-next-line no-useless-constructor
    constructor(_) {
        // nothing
    }
    decode(value) {
        let result = '';
        for (let i = 0; i < value.length; i++) {
            result += String.fromCharCode(value[i]);
        }
        return result;
    }
};

const TextDecoder = /*#__PURE__*/ extractGlobal('TextDecoder', TextDecoder$1);

let TextEncoder$1 = class TextEncoder {
    encode(value) {
        const u8a = new Uint8Array(value.length);
        for (let i = 0; i < value.length; i++) {
            u8a[i] = value.charCodeAt(i);
        }
        return u8a;
    }
};

const TextEncoder = /*#__PURE__*/ extractGlobal('TextEncoder', TextEncoder$1);

/**
 * @name isFunction
 * @summary Tests for a `function`.
 * @description
 * Checks to see if the input value is a JavaScript function.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isFunction } from '@polkadot/util';
 *
 * isFunction(() => false); // => true
 * ```
 */
function isFunction$1(value) {
    return typeof value === 'function';
}

/**
 * @name arrayChunk
 * @summary Split T[] into T[][] based on the defind size
 * @description
 * Returns a set ao arrays based on the chunksize
 * @example
 * <BR>
 *
 * ```javascript
 * import { arrayChunk } from '@polkadot/util';
 *
 * arrayChunk([1, 2, 3, 4, 5]); // [[1, 2], [3, 4], [5]]
 * ```
 */
function arrayChunk(array, chunkSize) {
    const outputSize = Math.ceil(array.length / chunkSize);
    // noop for the single-split case
    if (outputSize === 1) {
        return [array];
    }
    const output = Array(outputSize);
    for (let i = 0; i < outputSize; i++) {
        const offset = i * chunkSize;
        output[i] = array.slice(offset, offset + chunkSize);
    }
    return output;
}

/**
 * @name arrayFlatten
 * @summary Merge T[][] into T[]
 * @description
 * Returns a new array with all arrays merged into one
 * @example
 * <BR>
 *
 * ```javascript
 * import { arrayFlatten } from '@polkadot/util';
 *
 * arrayFlatten([[1, 2], [3, 4], [5]]); // [1, 2, 3, 4, 5]
 * ```
 */
function arrayFlatten(arrays) {
    // noop for the empty & single-entry case
    if (arrays.length === 0) {
        return [];
    }
    else if (arrays.length === 1) {
        return arrays[0];
    }
    // pre-allocate based on the combined size
    let size = 0;
    for (let i = 0; i < arrays.length; i++) {
        size += arrays[i].length;
    }
    const output = new Array(size);
    let i = -1;
    for (let j = 0; j < arrays.length; j++) {
        const a = arrays[j];
        // instead of pushing, we just set the entries
        for (let e = 0; e < a.length; e++) {
            output[++i] = a[e];
        }
    }
    return output;
}

/**
 * @name assert
 * @summary Checks for a valid test, if not Error is thrown.
 * @description
 * Checks that `test` is a truthy value. If value is falsy (`null`, `undefined`, `false`, ...), it throws an Error with the supplied `message`. When `test` passes, `true` is returned.
 * @example
 * <BR>
 *
 * ```javascript
 * const { assert } from '@polkadot/util';
 *
 * assert(true, 'True should be true'); // passes
 * assert(false, 'False should not be true'); // Error thrown
 * assert(false, () => 'message'); // Error with 'message'
 * ```
 */
function assert(condition, message) {
    if (!condition) {
        throw new Error(isFunction$1(message)
            ? message()
            : message);
    }
}
/**
 * @name assertReturn
 * @description Returns when the value is not undefined/null, otherwise throws assertion error
 */
function assertReturn(value, message) {
    assert(value !== undefined && value !== null, message);
    return value;
}
/**
 * @name assertUnreachable
 * @description An assertion helper that ensures all codepaths are followed
 */
function assertUnreachable(x) {
    throw new Error(`This codepath should be unreachable. Unhandled input: ${x}`);
}

const BigInt$1 = typeof xglobal.BigInt === 'function' && typeof xglobal.BigInt.asIntN === 'function'
    ? xglobal.BigInt
    : (() => Number.NaN);

const CHR = '0123456789abcdef';
const U8$1 = new Uint8Array(256);
const U16$1 = new Uint8Array(256 * 256);
for (let i = 0; i < CHR.length; i++) {
    U8$1[CHR[i].charCodeAt(0) | 0] = i | 0;
    if (i > 9) {
        U8$1[CHR[i].toUpperCase().charCodeAt(0) | 0] = i | 0;
    }
}
for (let i = 0; i < 256; i++) {
    const s = i << 8;
    for (let j = 0; j < 256; j++) {
        U16$1[s | j] = (U8$1[i] << 4) | U8$1[j];
    }
}
/**
 * @name hexToU8a
 * @summary Creates a Uint8Array object from a hex string.
 * @description
 * `null` inputs returns an empty `Uint8Array` result. Hex input values return the actual bytes value converted to a Uint8Array. Anything that is not a hex string (including the `0x` prefix) throws an error.
 * @example
 * <BR>
 *
 * ```javascript
 * import { hexToU8a } from '@polkadot/util';
 *
 * hexToU8a('0x80001f'); // Uint8Array([0x80, 0x00, 0x1f])
 * hexToU8a('0x80001f', 32); // Uint8Array([0x00, 0x80, 0x00, 0x1f])
 * ```
 */
function hexToU8a(value, bitLength = -1) {
    if (!value) {
        return new Uint8Array();
    }
    let s = value.startsWith('0x')
        ? 2
        : 0;
    const decLength = Math.ceil((value.length - s) / 2);
    const endLength = Math.ceil(bitLength === -1
        ? decLength
        : bitLength / 8);
    const result = new Uint8Array(endLength);
    const offset = endLength > decLength
        ? endLength - decLength
        : 0;
    for (let i = offset; i < endLength; i++, s += 2) {
        // The big factor here is actually the string lookups. If we do
        // HEX_TO_U16[value.substring()] we get an 10x slowdown. In the
        // same vein using charCodeAt (as opposed to value[s] or value.charAt(s)) is
        // also the faster operation by at least 2x with the character map above
        result[i] = U16$1[(value.charCodeAt(s) << 8) | value.charCodeAt(s + 1)];
    }
    return result;
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

var bn = {exports: {}};

(function (module) {
(function (module, exports) {

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = require('buffer').Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [number & 0x3ffffff];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [0];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this._strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // '0' - '9'
    if (c >= 48 && c <= 57) {
      return c - 48;
    // 'A' - 'F'
    } else if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    } else {
      assert(false, 'Invalid character in ' + string);
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this._strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var b = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        b = c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        b = c - 17 + 0xa;

      // '0' - '9'
      } else {
        b = c;
      }
      assert(c >= 0 && b < mul, 'Invalid character');
      r += b;
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [0];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this._strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  function move (dest, src) {
    dest.words = src.words;
    dest.length = src.length;
    dest.negative = src.negative;
    dest.red = src.red;
  }

  BN.prototype._move = function _move (dest) {
    move(dest, this);
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype._strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  // Check Symbol.for because not everywhere where Symbol defined
  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
    try {
      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e) {
      BN.prototype.inspect = inspect;
    }
  } else {
    BN.prototype.inspect = inspect;
  }

  function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  }

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modrn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16, 2);
  };

  if (Buffer) {
    BN.prototype.toBuffer = function toBuffer (endian, length) {
      return this.toArrayLike(Buffer, endian, length);
    };
  }

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  var allocate = function allocate (ArrayType, size) {
    if (ArrayType.allocUnsafe) {
      return ArrayType.allocUnsafe(size);
    }
    return new ArrayType(size);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    this._strip();

    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    var res = allocate(ArrayType, reqLength);
    var postfix = endian === 'le' ? 'LE' : 'BE';
    this['_toArrayLike' + postfix](res, byteLength);
    return res;
  };

  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
    var position = 0;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position++] = word & 0xff;
      if (position < res.length) {
        res[position++] = (word >> 8) & 0xff;
      }
      if (position < res.length) {
        res[position++] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position < res.length) {
          res[position++] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position < res.length) {
      res[position++] = carry;

      while (position < res.length) {
        res[position++] = 0;
      }
    }
  };

  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
    var position = res.length - 1;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position--] = word & 0xff;
      if (position >= 0) {
        res[position--] = (word >> 8) & 0xff;
      }
      if (position >= 0) {
        res[position--] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position >= 0) {
          res[position--] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position >= 0) {
      res[position--] = carry;

      while (position >= 0) {
        res[position--] = 0;
      }
    }
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] >>> wbit) & 0x01;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this._strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this._strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this._strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this._strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this._strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this._strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out._strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out._strip();
  }

  function jumboMulTo (self, num, out) {
    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
    // var fftm = new FFTM();
    // return fftm.mulp(self, num, out);
    return bigMulTo(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this._strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) ; else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this._strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this._strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) <= num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this._strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this._strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this._strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q._strip();
    }
    a._strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modrn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modrn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modrn = function modrn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return isNegNum ? -acc : acc;
  };

  // WARNING: DEPRECATED
  BN.prototype.modn = function modn (num) {
    return this.modrn(num);
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    this._strip();
    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this._strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is a BN v4 instance
        r.strip();
      } else {
        // r is a BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

    move(a, a.umod(this.m)._forceRed(this));
    return a;
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(module, commonjsGlobal);
}(bn));

var BN = bn.exports;

/**
 * @name isBn
 * @summary Tests for a `BN` object instance.
 * @description
 * Checks to see if the input object is an instance of `BN` (bn.js).
 * @example
 * <BR>
 *
 * ```javascript
 * import BN from 'bn.js';
 * import { isBn } from '@polkadot/util';
 *
 * console.log('isBn', isBn(new BN(1))); // => true
 * ```
 */
function isBn(value) {
    return BN.isBN(value);
}

const REGEX_HEX_PREFIXED = /^0x[\da-fA-F]+$/;
const REGEX_HEX_NOPREFIX = /^[\da-fA-F]+$/;
/**
 * @name isHex
 * @summary Tests for a hex string.
 * @description
 * Checks to see if the input value is a `0x` prefixed hex string. Optionally (`bitLength` !== -1) checks to see if the bitLength is correct.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isHex } from '@polkadot/util';
 *
 * isHex('0x1234'); // => true
 * isHex('0x1234', 8); // => false
 * ```
 */
function isHex(value, bitLength = -1, ignoreLength) {
    return (typeof value === 'string' && (value === '0x' ||
        REGEX_HEX_PREFIXED.test(value))) && (bitLength === -1
        ? (ignoreLength || (value.length % 2 === 0))
        : (value.length === (2 + Math.ceil(bitLength / 4))));
}

/**
 * @name isObject
 * @summary Tests for an `object`.
 * @description
 * Checks to see if the input value is a JavaScript object.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isObject } from '@polkadot/util';
 *
 * isObject({}); // => true
 * isObject('something'); // => false
 * ```
 */
function isObject(value) {
    return !!value && typeof value === 'object';
}

function isOn(...fns) {
    return (value) => (isObject(value) || isFunction$1(value)) &&
        fns.every((f) => isFunction$1(value[f]));
}
function isOnFunction(...fns) {
    return (value) => isFunction$1(value) &&
        fns.every((f) => isFunction$1(value[f]));
}
function isOnObject(...fns) {
    return (value) => isObject(value) &&
        fns.every((f) => isFunction$1(value[f]));
}

const isToBigInt = /*#__PURE__*/ isOn('toBigInt');

const isToBn$1 = /*#__PURE__*/ isOn('toBn');

/** @internal */
function createCmp(cmp) {
    return (...items) => {
        if (items.length === 0) {
            throw new Error('Must provide one or more arguments');
        }
        let result = items[0];
        for (let i = 1; i < items.length; i++) {
            if (cmp(items[i], result)) {
                result = items[i];
            }
        }
        return result;
    };
}

/** true if the environment has proper BigInt support */
typeof BigInt$1 === 'function' && typeof BigInt$1.asIntN === 'function';
/** true if the environment has support for Buffer (typically Node.js) */
const hasBuffer = typeof xglobal.Buffer === 'function' && typeof xglobal.Buffer.isBuffer === 'function';
/** true if the environment has process available (typically Node.js) */
const hasProcess = typeof xglobal.process === 'object';

/**
 * @name isBuffer
 * @summary Tests for a `Buffer` object instance.
 * @description
 * Checks to see if the input object is an instance of `Buffer`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isBuffer } from '@polkadot/util';
 *
 * console.log('isBuffer', isBuffer(Buffer.from([]))); // => true
 * ```
 */
function isBuffer(value) {
    // we do check a function first, since it is slightly faster than isBuffer itself
    return hasBuffer && isFunction$1(value && value.readDoubleLE) && xglobal.Buffer.isBuffer(value);
}

/**
 * @name isU8a
 * @summary Tests for a `Uint8Array` object instance.
 * @description
 * Checks to see if the input object is an instance of `Uint8Array`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isUint8Array } from '@polkadot/util';
 *
 * console.log('isU8a', isU8a([])); // => false
 * ```
 */
function isU8a(value) {
    // here we defer the instanceof check which is actually slightly
    // slower than just checking the constrctor (direct instances)
    return (((value && value.constructor) === Uint8Array) ||
        value instanceof Uint8Array);
}

const encoder = new TextEncoder();
/**
 * @name stringToU8a
 * @summary Creates a Uint8Array object from a utf-8 string.
 * @description
 * String input values return the actual encoded `UInt8Array`. `null` or `undefined` values returns an empty encoded array.
 * @example
 * <BR>
 *
 * ```javascript
 * import { stringToU8a } from '@polkadot/util';
 *
 * stringToU8a('hello'); // [0x68, 0x65, 0x6c, 0x6c, 0x6f]
 * ```
 */
function stringToU8a(value) {
    return value
        ? encoder.encode(value.toString())
        : new Uint8Array();
}

/**
 * @name u8aToU8a
 * @summary Creates a Uint8Array value from a Uint8Array, Buffer, string or hex input.
 * @description
 * `null` or `undefined` inputs returns a `[]` result, Uint8Array values returns the value, hex strings returns a Uint8Array representation.
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aToU8a } from '@polkadot/util';
 *
 * u8aToU8a(new Uint8Array([0x12, 0x34]); // => Uint8Array([0x12, 0x34])
 * u8aToU8a(0x1234); // => Uint8Array([0x12, 0x34])
 * ```
 */
function u8aToU8a(value) {
    return isU8a(value)
        // NOTE isBuffer needs to go here since it actually extends
        // Uint8Array on Node.js environments, so all Buffer are Uint8Array,
        // but Uint8Array is not Buffer
        ? isBuffer(value)
            ? new Uint8Array(value)
            : value
        : isHex(value)
            ? hexToU8a(value)
            : Array.isArray(value)
                ? new Uint8Array(value)
                : stringToU8a(value);
}

/**
 * @name u8aConcat
 * @summary Creates a concatenated Uint8Array from the inputs.
 * @description
 * Concatenates the input arrays into a single `UInt8Array`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { { u8aConcat } from '@polkadot/util';
 *
 * u8aConcat(
 *   new Uint8Array([1, 2, 3]),
 *   new Uint8Array([4, 5, 6])
 * ); // [1, 2, 3, 4, 5, 6]
 * ```
 */
function u8aConcat(...list) {
    const u8as = new Array(list.length);
    let length = 0;
    for (let i = 0; i < list.length; i++) {
        u8as[i] = u8aToU8a(list[i]);
        length += u8as[i].length;
    }
    return u8aConcatStrict(u8as, length);
}
/**
 * @name u8aConcatStrict
 * @description A strict version of [[u8aConcat]], accepting only Uint8Array inputs
 */
function u8aConcatStrict(u8as, length = 0) {
    let offset = 0;
    if (!length) {
        for (let i = 0; i < u8as.length; i++) {
            length += u8as[i].length;
        }
    }
    const result = new Uint8Array(length);
    for (let i = 0; i < u8as.length; i++) {
        result.set(u8as[i], offset);
        offset += u8as[i].length;
    }
    return result;
}

/**
 * @name u8aEmpty
 * @summary Tests for a `Uint8Array` for emptyness
 * @description
 * Checks to see if the input `Uint8Array` has zero length or contains all 0 values.
 */
function u8aEmpty(value) {
    const len = value.length | 0;
    // on smaller sizes, the byte-by-byte compare is faster than allocating
    // another object for DataView (on very large arrays the DataView is faster)
    for (let i = 0; i < len; i++) {
        if (value[i] | 0) {
            return false;
        }
    }
    return true;
}

/**
 * @name u8aEq
 * @summary Compares two Uint8Arrays for equality.
 * @description
 * For `UInt8Array` (or hex string) input values true if there is a match.
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aEq } from '@polkadot/util';
 *
 * u8aEq(new Uint8Array([0x68, 0x65]), new Uint8Array([0x68, 0x65])); // true
 * ```
 */
function u8aEq(a, b) {
    const u8aa = u8aToU8a(a);
    const u8ab = u8aToU8a(b);
    if (u8aa.length === u8ab.length) {
        const dvA = new DataView(u8aa.buffer, u8aa.byteOffset);
        const dvB = new DataView(u8ab.buffer, u8ab.byteOffset);
        const mod = (u8aa.length % 4) | 0;
        const length = (u8aa.length - mod) | 0;
        for (let i = 0; i < length; i += 4) {
            if (dvA.getUint32(i) !== dvB.getUint32(i)) {
                return false;
            }
        }
        for (let i = length; i < u8aa.length; i++) {
            if (u8aa[i] !== u8ab[i]) {
                return false;
            }
        }
        return true;
    }
    return false;
}

/**
 * @name u8aToFloat
 * @description Converts a Uint8Array value into the float (either 32 or 64-bit)
 * representation.
 */
function u8aToFloat(value, { bitLength = 32, isLe = true } = {}) {
    if (bitLength !== 32 && bitLength !== 64) {
        throw new Error('Invalid bitLength provided, expected 32 or 64');
    }
    else if (value.length < (bitLength / 8)) {
        throw new Error(`Invalid input buffer provided, expected at least ${bitLength / 8} bytes, found ${value.length}`);
    }
    const dv = new DataView(value.buffer, value.byteOffset);
    return bitLength === 32
        ? dv.getFloat32(0, isLe)
        : dv.getFloat64(0, isLe);
}

/**
 * @name u8aToBn
 * @summary Creates a BN from a Uint8Array object.
 * @description
 * `UInt8Array` input values return the actual BN. `null` or `undefined` values returns an `0x0` value.
 * @param value The value to convert
 * @param options Options to pass while converting
 * @param options.isLe Convert using Little Endian (default)
 * @param options.isNegative Convert using two's complement
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aToBn } from '@polkadot/util';
 *
 * u8aToHex(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0xf])); // 0x68656c0f
 * ```
 */
function u8aToBn(value, { isLe = true, isNegative = false } = {}) {
    const count = value.length;
    // shortcut for <= u48 values - in this case the manual conversion
    // here seems to be more efficient than passing the full array
    if (count <= 6) {
        if (isNegative) {
            let result = 0;
            if (isLe) {
                // Most common case i{8, 16, 32} default LE SCALE-encoded
                // For <= 32, we also optimize the xor to a single op
                // (see the comments around unrolling in the next section)
                switch (count) {
                    case 0:
                        return new BN(0);
                    case 1:
                        result = value[0] ^ 255;
                        break;
                    case 2:
                        result = (value[0] + (value[1] << 8)) ^ 65535;
                        break;
                    case 3:
                        result = (value[0] + (value[1] << 8) + (value[2] << 16)) ^ 16777215;
                        break;
                    case 4:
                        // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
                        // 32-bit, in the case where the top-most bit is set this yields a negative value
                        result = (value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216)) ^ 4294967295;
                        break;
                    case 5:
                        result = ((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216)) ^ 4294967295) + ((value[4] ^ 0xff) * 4294967296);
                        break;
                    default: // 6
                        result = ((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216)) ^ 4294967295) + (((value[4] + (value[5] << 8)) ^ 65535) * 4294967296);
                        break;
                }
            }
            else {
                for (let i = 0; i < count; i++) {
                    result = (result * 256) + (value[i] ^ 0xff);
                }
            }
            return count
                ? new BN((result * -1) - 1)
                : new BN(0);
        }
        else if (isLe) {
            // Most common case - u{8, 16, 32} default LE SCALE-encoded
            //
            // There are some slight benefits in unrolling this specific loop,
            // however it comes with diminishing returns since here the actual
            // `new BN` does seem to take up the bulk of the time
            switch (count) {
                case 0:
                    return new BN(0);
                case 1:
                    return new BN(value[0]);
                case 2:
                    return new BN(value[0] + (value[1] << 8));
                case 3:
                    return new BN(value[0] + (value[1] << 8) + (value[2] << 16));
                case 4:
                    // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
                    // 32-bit, in the case where the top-most bit is set this yields a negative value
                    return new BN(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216));
                case 5:
                    return new BN(value[0] + (value[1] << 8) + (value[2] << 16) + ((value[3] + (value[4] << 8)) * 16777216));
                default: // 6
                    return new BN(value[0] + (value[1] << 8) + (value[2] << 16) + ((value[3] + (value[4] << 8) + (value[5] << 16)) * 16777216));
            }
        }
        else {
            let result = 0;
            for (let i = 0; i < count; i++) {
                result = (result * 256) + value[i];
            }
            return new BN(result);
        }
    }
    return isNegative
        ? new BN(value, isLe ? 'le' : 'be').fromTwos(value.length * 8)
        : new BN(value, isLe ? 'le' : 'be');
}

const U8 = new Array(256);
const U16 = new Array(256 * 256);
for (let n = 0; n < 256; n++) {
    U8[n] = n.toString(16).padStart(2, '0');
}
for (let i = 0; i < 256; i++) {
    const s = i << 8;
    for (let j = 0; j < 256; j++) {
        U16[s | j] = U8[i] + U8[j];
    }
}
/** @internal */
function hex(value, result) {
    const mod = (value.length % 2) | 0;
    const length = (value.length - mod) | 0;
    for (let i = 0; i < length; i += 2) {
        result += U16[(value[i] << 8) | value[i + 1]];
    }
    if (mod) {
        result += U8[value[length] | 0];
    }
    return result;
}
/**
 * @name u8aToHex
 * @summary Creates a hex string from a Uint8Array object.
 * @description
 * `UInt8Array` input values return the actual hex string. `null` or `undefined` values returns an `0x` string.
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aToHex } from '@polkadot/util';
 *
 * u8aToHex(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0xf])); // 0x68656c0f
 * ```
 */
function u8aToHex(value, bitLength = -1, isPrefixed = true) {
    // this is not 100% correct sinmce we support isPrefixed = false....
    const empty = isPrefixed
        ? '0x'
        : '';
    if (!value || !value.length) {
        return empty;
    }
    else if (bitLength > 0) {
        const length = Math.ceil(bitLength / 8);
        if (value.length > length) {
            return `${hex(value.subarray(0, length / 2), empty)}…${hex(value.subarray(value.length - length / 2), '')}`;
        }
    }
    return hex(value, empty);
}

/**
 * @name u8aToNumber
 * @summary Creates a number from a Uint8Array object.
 */
function u8aToNumber(value, { isNegative = false } = {}) {
    const count = value.length;
    if (isNegative) {
        let result = 0;
        switch (count) {
            case 0:
                return 0;
            case 1:
                result = value[0] ^ 255;
                break;
            case 2:
                result = (value[0] + (value[1] << 8)) ^ 65535;
                break;
            case 3:
                result = (value[0] + (value[1] << 8) + (value[2] << 16)) ^ 16777215;
                break;
            case 4:
                // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
                // 32-bit, in the case where the top-most bit is set this yields a negative value
                result = (value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216)) ^ 4294967295;
                break;
            case 5:
                result = ((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216)) ^ 4294967295) + ((value[4] ^ 0xff) * 4294967296);
                break;
            case 6:
                result = ((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216)) ^ 4294967295) + (((value[4] + (value[5] << 8)) ^ 65535) * 4294967296);
                break;
            default:
                throw new Error('Value more than 48-bits cannot be reliably converted');
        }
        return (result * -1) - 1;
    }
    switch (count) {
        case 0:
            return 0;
        case 1:
            return value[0];
        case 2:
            return value[0] + (value[1] << 8);
        case 3:
            return value[0] + (value[1] << 8) + (value[2] << 16);
        case 4:
            // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
            // 32-bit, in the case where the top-most bit is set this yields a negative value
            return value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216);
        case 5:
            return value[0] + (value[1] << 8) + (value[2] << 16) + ((value[3] + (value[4] << 8)) * 16777216);
        case 6:
            return value[0] + (value[1] << 8) + (value[2] << 16) + ((value[3] + (value[4] << 8) + (value[5] << 16)) * 16777216);
        default:
            throw new Error('Value more than 48-bits cannot be reliably converted');
    }
}

const decoder = new TextDecoder('utf-8');
/**
 * @name u8aToString
 * @summary Creates a utf-8 string from a Uint8Array object.
 * @description
 * `UInt8Array` input values return the actual decoded utf-8 string. `null` or `undefined` values returns an empty string.
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aToString } from '@polkadot/util';
 *
 * u8aToString(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0x6f])); // hello
 * ```
 */
function u8aToString(value) {
    return value
        ? decoder.decode(value)
        : '';
}

/**
 * @name BN_ZERO
 * @summary BN constant for 0.
 */
const BN_ZERO = /*#__PURE__*/ new BN(0);
/**
 * @name BN_ONE
 * @summary BN constant for 1.
 */
const BN_ONE = /*#__PURE__*/ new BN(1);
/**
 * @name BN_TWO
 * @summary BN constant for 2.
 */
const BN_TWO = /*#__PURE__*/ new BN(2);
/**
 * @name BN_HUNDRED
 * @summary BN constant for 100.
 */
const BN_HUNDRED = /*#__PURE__*/ new BN(100);
/**
 * @name BN_MILLION
 * @summary BN constant for 1,000,000.
 */
const BN_MILLION = /*#__PURE__*/ new BN(1000000);
/**
 * @name BN_BILLION
 * @summary BN constant for 1,000,000,000.
 */
const BN_BILLION = /*#__PURE__*/ new BN(1000000000);
/**
 * @name BN_QUINTILL
 * @summary BN constant for 1,000,000,000,000,000,000.
 */
const BN_QUINTILL = BN_BILLION.mul(BN_BILLION);
/**
 * @name BN_MAX_INTEGER
 * @summary BN constant for MAX_SAFE_INTEGER
 */
const BN_MAX_INTEGER = /*#__PURE__*/ new BN(Number.MAX_SAFE_INTEGER);
/**
 * @name BN_SQRT_MAX_INTEGER
 * @summary BN constant for Math.sqrt(MAX_SAFE_INTEGER)
 */
const BN_SQRT_MAX_INTEGER = /*#__PURE__*/ new BN(94906265);

/**
 * @name hexStripPrefix
 * @summary Strips any leading `0x` prefix.
 * @description
 * Tests for the existence of a `0x` prefix, and returns the value without the prefix. Un-prefixed values are returned as-is.
 * @example
 * <BR>
 *
 * ```javascript
 * import { hexStripPrefix } from '@polkadot/util';
 *
 * console.log('stripped', hexStripPrefix('0x1234')); // => 1234
 * ```
 */
function hexStripPrefix(value) {
    if (!value || value === '0x') {
        return '';
    }
    else if (REGEX_HEX_PREFIXED.test(value)) {
        return value.substring(2);
    }
    else if (REGEX_HEX_NOPREFIX.test(value)) {
        return value;
    }
    throw new Error(`Expected hex value to convert, found '${value}'`);
}

/**
 * @name hexToBn
 * @summary Creates a BN.js object from a hex string.
 * @description
 * `null` inputs returns a `BN(0)` result. Hex input values return the actual value converted to a BN. Anything that is not a hex string (including the `0x` prefix) throws an error.
 * @param _value The value to convert
 * @param _options Options to pass while converting
 * @param _options.isLe Convert using Little Endian
 * @param _options.isNegative Convert using two's complement
 * @example
 * <BR>
 *
 * ```javascript
 * import { hexToBn } from '@polkadot/util';
 *
 * hexToBn('0x123480001f'); // => BN(0x123480001f)
 * ```
 */
function hexToBn(value, { isLe = false, isNegative = false } = {}) {
    if (!value || value === '0x') {
        return new BN(0);
    }
    const stripped = hexStripPrefix(value);
    const bn = new BN(stripped, 16, isLe ? 'le' : 'be');
    // fromTwos takes as parameter the number of bits, which is the hex length
    // multiplied by 4 (2 bytes being 8 bits)
    return isNegative
        ? bn.fromTwos(stripped.length * 4)
        : bn;
}

/**
 * @name bnMax
 * @summary Finds and returns the highest value in an array of BNs.
 * @example
 * <BR>
 *
 * ```javascript
 * import BN from 'bn.js';
 * import { bnMax } from '@polkadot/util';
 *
 * bnMax([new BN(1), new BN(3), new BN(2)]).toString(); // => '3'
 * ```
 */
const bnMax = /*#__PURE__*/ createCmp((a, b) => a.gt(b));
/**
 * @name bnMin
 * @summary Finds and returns the smallest value in an array of BNs.
 * @example
 * <BR>
 *
 * ```javascript
 * import BN from 'bn.js';
 * import { bnMin } from '@polkadot/util';
 *
 * bnMin([new BN(1), new BN(3), new BN(2)]).toString(); // => '1'
 * ```
 */
const bnMin = /*#__PURE__*/ createCmp((a, b) => a.lt(b));

/**
 * @name isBigInt
 * @summary Tests for a `BigInt` object instance.
 * @description
 * Checks to see if the input object is an instance of `BigInt`
 * @example
 * <BR>
 *
 * ```javascript
 * import { isBigInt } from '@polkadot/util';
 *
 * console.log('isBigInt', isBigInt(123_456n)); // => true
 * ```
 */
function isBigInt(value) {
    return typeof value === 'bigint';
}

/**
 * @name bnToBn
 * @summary Creates a BN value from a BN, bigint, string (base 10 or hex) or number input.
 * @description
 * `null` inputs returns a `0x0` result, BN values returns the value, numbers returns a BN representation.
 * @example
 * <BR>
 *
 * ```javascript
 * import BN from 'bn.js';
 * import { bnToBn } from '@polkadot/util';
 *
 * bnToBn(0x1234); // => BN(0x1234)
 * bnToBn(new BN(0x1234)); // => BN(0x1234)
 * ```
 */
function bnToBn(value) {
    return value
        ? BN.isBN(value)
            ? value
            : isHex(value)
                ? hexToBn(value.toString())
                : isBigInt(value)
                    ? new BN(value.toString())
                    : isToBn$1(value)
                        ? value.toBn()
                        : isToBigInt(value)
                            ? new BN(value.toBigInt().toString())
                            : new BN(value)
        : new BN(0);
}

/**
 * @name bnSqrt
 * @summary Calculates the integer square root of a BN
 * @example
 * <BR>
 *
 * ```javascript
 * import BN from 'bn.js';
 * import { bnSqrt } from '@polkadot/util';
 *
 * bnSqrt(new BN(16)).toString(); // => '4'
 * ```
 */
function bnSqrt(value) {
    const n = bnToBn(value);
    if (n.isNeg()) {
        throw new Error('square root of negative numbers is not supported');
    }
    // https://stackoverflow.com/questions/53683995/javascript-big-integer-square-root/
    // shortcut <= 2^53 - 1 to use the JS utils
    if (n.lte(BN_MAX_INTEGER)) {
        // ~~ More performant version of Math.floor
        return new BN(~~Math.sqrt(n.toNumber()));
    }
    // Use sqrt(MAX_SAFE_INTEGER) as starting point. since we already know the
    // output will be larger than this, we expect this to be a safe start
    let x0 = BN_SQRT_MAX_INTEGER.clone();
    while (true) {
        const x1 = n.div(x0).iadd(x0).ishrn(1);
        if (x0.eq(x1) || x0.eq(x1.sub(BN_ONE))) {
            return x0;
        }
        x0 = x1;
    }
}

const DEFAULT_OPTS = { bitLength: -1, isLe: true, isNegative: false };
/**
 * @name bnToU8a
 * @summary Creates a Uint8Array object from a BN.
 * @description
 * `null`/`undefined`/`NaN` inputs returns an empty `Uint8Array` result. `BN` input values return the actual bytes value converted to a `Uint8Array`. Optionally convert using little-endian format if `isLE` is set.
 * @example
 * <BR>
 *
 * ```javascript
 * import { bnToU8a } from '@polkadot/util';
 *
 * bnToU8a(new BN(0x1234)); // => [0x12, 0x34]
 * ```
 */
function bnToU8a(value, { bitLength = -1, isLe = true, isNegative = false } = DEFAULT_OPTS) {
    const valueBn = bnToBn(value);
    const byteLength = bitLength === -1
        ? Math.ceil(valueBn.bitLength() / 8)
        : Math.ceil((bitLength || 0) / 8);
    if (!value) {
        return bitLength === -1
            ? new Uint8Array(1)
            : new Uint8Array(byteLength);
    }
    const output = new Uint8Array(byteLength);
    const bn = isNegative
        ? valueBn.toTwos(byteLength * 8)
        : valueBn;
    output.set(bn.toArray(isLe ? 'le' : 'be', byteLength), 0);
    return output;
}

/**
 * @name bnToHex
 * @summary Creates a hex value from a BN.js bignumber object.
 * @description
 * `null` inputs returns a `0x` result, BN values return the actual value as a `0x` prefixed hex value. Anything that is not a BN object throws an error. With `bitLength` set, it fixes the number to the specified length.
 * @example
 * <BR>
 *
 * ```javascript
 * import BN from 'bn.js';
 * import { bnToHex } from '@polkadot/util';
 *
 * bnToHex(new BN(0x123456)); // => '0x123456'
 * ```
 */
function bnToHex(value, { bitLength = -1, isLe = false, isNegative = false } = {}) {
    return u8aToHex(bnToU8a(value, { bitLength, isLe, isNegative }));
}

const MAX_U8 = BN_TWO.pow(new BN(8 - 2)).isub(BN_ONE);
const MAX_U16 = BN_TWO.pow(new BN(16 - 2)).isub(BN_ONE);
const MAX_U32 = BN_TWO.pow(new BN(32 - 2)).isub(BN_ONE);
const BL_16 = { bitLength: 16 };
const BL_32 = { bitLength: 32 };
/**
 * @name compactToU8a
 * @description Encodes a number into a compact representation
 * @example
 * <BR>
 *
 * ```javascript
 * import { compactToU8a } from '@polkadot/util';
 *
 * console.log(compactToU8a(511, 32)); // Uint8Array([0b11111101, 0b00000111])
 * ```
 */
function compactToU8a(value) {
    const bn = bnToBn(value);
    if (bn.lte(MAX_U8)) {
        return new Uint8Array([bn.toNumber() << 2]);
    }
    else if (bn.lte(MAX_U16)) {
        return bnToU8a(bn.shln(2).iadd(BN_ONE), BL_16);
    }
    else if (bn.lte(MAX_U32)) {
        return bnToU8a(bn.shln(2).iadd(BN_TWO), BL_32);
    }
    const u8a = bnToU8a(bn);
    let length = u8a.length;
    // adjust to the minimum number of bytes
    while (u8a[length - 1] === 0) {
        length--;
    }
    if (length < 4) {
        throw new Error('Invalid length, previous checks match anything less than 2^30');
    }
    return u8aConcatStrict([
        // subtract 4 as minimum (also catered for in decoding)
        new Uint8Array([((length - 4) << 2) + 0b11]),
        u8a.subarray(0, length)
    ]);
}

/**
 * @name compactAddLength
 * @description Adds a length prefix to the input value
 * @example
 * <BR>
 *
 * ```javascript
 * import { compactAddLength } from '@polkadot/util';
 *
 * console.log(compactAddLength(new Uint8Array([0xde, 0xad, 0xbe, 0xef]))); // Uint8Array([4 << 2, 0xde, 0xad, 0xbe, 0xef])
 * ```
 */
function compactAddLength(input) {
    return u8aConcatStrict([
        compactToU8a(input.length),
        input
    ]);
}

/**
 * @name compactFromU8a
 * @description Retrives the offset and encoded length from a compact-prefixed value
 * @example
 * <BR>
 *
 * ```javascript
 * import { compactFromU8a } from '@polkadot/util';
 *
 * const [offset, length] = compactFromU8a(new Uint8Array([254, 255, 3, 0]));
 *
 * console.log('value offset=', offset, 'length=', length); // 4, 0xffff
 * ```
 */
function compactFromU8a(input) {
    const u8a = u8aToU8a(input);
    // The u8a is manually converted here for 1, 2 & 4 lengths, it is 2x faster
    // than doing an additional call to u8aToBn (as with variable length)
    switch (u8a[0] & 0b11) {
        case 0b00:
            return [1, new BN(u8a[0] >>> 2)];
        case 0b01:
            return [2, new BN((u8a[0] + (u8a[1] << 8)) >>> 2)];
        case 0b10:
            // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
            // 32-bit, in the case where the top-most bit is set this yields a negative value
            return [4, new BN((u8a[0] + (u8a[1] << 8) + (u8a[2] << 16) + (u8a[3] * 16777216)) >>> 2)];
        // 0b11
        default: {
            // add 5 to shifted (4 for base length, 1 for this byte)
            const offset = (u8a[0] >>> 2) + 5;
            // we unroll the loop
            switch (offset) {
                // there still could be 4 bytes data, similar to 0b10 above (with offsets)
                case 5:
                    // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
                    // 32-bit, in the case where the top-most bit is set this yields a negative value
                    return [5, new BN(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] * 16777216))];
                case 6:
                    return [6, new BN(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + ((u8a[4] + (u8a[5] << 8)) * 16777216))];
                // 6 bytes data is the maximum, 48 bits (56 would overflow)
                case 7:
                    return [7, new BN(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + ((u8a[4] + (u8a[5] << 8) + (u8a[6] << 16)) * 16777216))];
                // for anything else, use the non-unrolled version
                default:
                    return [offset, u8aToBn(u8a.subarray(1, offset))];
            }
        }
    }
}
/**
 * @name compactFromU8aLim
 * @description A limited version of [[compactFromU8a]], accepting only Uint8Array inputs for values <= 48 bits
 */
function compactFromU8aLim(u8a) {
    // The u8a is manually converted here for 1, 2 & 4 lengths, it is 2x faster
    // than doing an additional call to u8aToBn (as with variable length)
    switch (u8a[0] & 0b11) {
        case 0b00:
            return [1, u8a[0] >>> 2];
        case 0b01:
            return [2, (u8a[0] + (u8a[1] << 8)) >>> 2];
        case 0b10:
            // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
            // 32-bit, in the case where the top-most bit is set this yields a negative value
            return [4, (u8a[0] + (u8a[1] << 8) + (u8a[2] << 16) + (u8a[3] * 16777216)) >>> 2];
        // 0b11
        default: {
            // add 5 to shifted (4 for base length, 1 for this byte)
            // we unroll the loop
            switch ((u8a[0] >>> 2) + 5) {
                // there still could be 4 bytes data, similar to 0b10 above (with offsets)
                case 5:
                    return [5, u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] * 16777216)];
                case 6:
                    return [6, u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + ((u8a[4] + (u8a[5] << 8)) * 16777216)];
                // 6 bytes data is the maximum, 48 bits (56 would overflow)
                case 7:
                    return [7, u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + ((u8a[4] + (u8a[5] << 8) + (u8a[6] << 16)) * 16777216)];
                // for anything else, we are above the actual MAX_SAFE_INTEGER - bail out
                default:
                    throw new Error('Compact input is > Number.MAX_SAFE_INTEGER');
            }
        }
    }
}

/**
 * @name compactStripLength
 * @description Removes the length prefix, returning both the total length (including the value + compact encoding) and the decoded value with the correct length
 * @example
 * <BR>
 *
 * ```javascript
 * import { compactStripLength } from '@polkadot/util';
 *
 * console.log(compactStripLength(new Uint8Array([2 << 2, 0xde, 0xad]))); // [2, Uint8Array[0xde, 0xad]]
 * ```
 */
function compactStripLength(input) {
    const [offset, length] = compactFromU8a(input);
    const total = offset + length.toNumber();
    return [
        total,
        input.subarray(offset, total)
    ];
}

/**
 * @name floatToU8a
 * @description Converts a float into a U8a representation (While we don't use BE in SCALE
 * we still allow for either representation, although, as elsewhere, isLe is default)
 */
function floatToU8a(value = 0.0, { bitLength = 32, isLe = true } = {}) {
    if (bitLength !== 32 && bitLength !== 64) {
        throw new Error('Invalid bitLength provided, expected 32 or 64');
    }
    const result = new Uint8Array(bitLength / 8);
    const dv = new DataView(result.buffer, result.byteOffset);
    if (bitLength === 32) {
        dv.setFloat32(0, Number(value), isLe);
    }
    else {
        dv.setFloat64(0, Number(value), isLe);
    }
    return result;
}

/**
 * @name isBoolean
 * @summary Tests for a boolean value.
 * @description
 * Checks to see if the input value is a JavaScript boolean.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isBoolean } from '@polkadot/util';
 *
 * isBoolean(false); // => true
 * ```
 */
function isBoolean(value) {
    return typeof value === 'boolean';
}

const NUMBER_REGEX = new RegExp('(\\d+?)(?=(\\d{3})+(?!\\d)|$)', 'g');
/**
 * @name formatDecimal
 * @description Formats a number into string format with thousand separators
 */
function formatDecimal(value, separator = ',') {
    // We can do this by adjusting the regx, however for the sake of clarity
    // we rather strip and re-add the negative sign in the output
    const isNegative = value[0].startsWith('-');
    const matched = isNegative
        ? value.substring(1).match(NUMBER_REGEX)
        : value.match(NUMBER_REGEX);
    return matched
        ? `${isNegative ? '-' : ''}${matched.join(separator)}`
        : value;
}

/**
 * Get the decimal and thousand separator of a locale
 * @param locale
 * @returns {decimal: string, thousand: string}
 */
function getSeparator(locale) {
    return {
        decimal: (0.1).toLocaleString(locale).substring(1, 2),
        thousand: (1000).toLocaleString(locale).substring(1, 2)
    };
}

/** @internal */
const SI_MID = 8;
/** @internal */
const SI = [
    { power: -24, text: 'yocto', value: 'y' },
    { power: -21, text: 'zepto', value: 'z' },
    { power: -18, text: 'atto', value: 'a' },
    { power: -15, text: 'femto', value: 'f' },
    { power: -12, text: 'pico', value: 'p' },
    { power: -9, text: 'nano', value: 'n' },
    { power: -6, text: 'micro', value: 'µ' },
    { power: -3, text: 'milli', value: 'm' },
    { power: 0, text: 'Unit', value: '-' },
    { power: 3, text: 'Kilo', value: 'k' },
    { power: 6, text: 'Mill', value: 'M' },
    { power: 9, text: 'Bill', value: 'B' },
    { power: 12, text: 'Tril', value: 'T' },
    { power: 15, text: 'Peta', value: 'P' },
    { power: 18, text: 'Exa', value: 'E' },
    { power: 21, text: 'Zeta', value: 'Z' },
    { power: 24, text: 'Yotta', value: 'Y' }
];
/** @internal */
function findSi(type) {
    // use a loop here, better RN support (which doesn't have [].find)
    for (let i = 0; i < SI.length; i++) {
        if (SI[i].value === type) {
            return SI[i];
        }
    }
    return SI[SI_MID];
}
/** @internal */
function calcSi(text, decimals, forceUnit) {
    if (forceUnit) {
        return findSi(forceUnit);
    }
    const siDefIndex = (SI_MID - 1) + Math.ceil((text.length - decimals) / 3);
    return SI[siDefIndex] || SI[siDefIndex < 0 ? 0 : SI.length - 1];
}

const DEFAULT_DECIMALS = 0;
const DEFAULT_UNIT = SI[SI_MID].text;
let defaultDecimals = DEFAULT_DECIMALS;
let defaultUnit = DEFAULT_UNIT;
function _formatBalance(input, { decimals = defaultDecimals, forceUnit, locale = 'en', withAll = false, withSi = true, withSiFull = false, withUnit = true, withZero = true } = {}) {
    // we only work with string inputs here - convert anything
    // into the string-only value
    let text = bnToBn(input).toString();
    if (text.length === 0 || text === '0') {
        return '0';
    }
    // strip the negative sign so we can work with clean groupings, re-add this in the
    // end when we return the result (from here on we work with positive numbers)
    let sign = '';
    if (text[0].startsWith('-')) {
        sign = '-';
        text = text.substring(1);
    }
    // We start at midpoint (8) minus 1 - this means that values display as
    // 123.4567 instead of 0.1234 k (so we always have the most relevant).
    const si = calcSi(text, decimals, forceUnit);
    const mid = text.length - (decimals + si.power);
    const pre = mid <= 0 ? '0' : text.substring(0, mid);
    // get the post from the midpoint onward and then first add max decimals
    // before trimming to the correct (calculated) amount of decimals again
    let post = text
        .padStart(mid < 0 ? decimals : 1, '0')
        .substring(mid < 0 ? 0 : mid)
        .padEnd(withAll ? Math.max(decimals, 4) : 4, '0')
        .substring(0, withAll ? Math.max(4, decimals + si.power) : 4);
    // remove all trailing 0's (if required via flag)
    if (!withZero) {
        let end = post.length - 1;
        // This looks inefficient, however it is better to do the checks and
        // only make one final slice than it is to do it in multiples
        do {
            if (post[end] === '0') {
                end--;
            }
        } while (post[end] === '0');
        post = post.substring(0, end + 1);
    }
    // the display unit
    const unit = isBoolean(withUnit)
        ? SI[SI_MID].text
        : withUnit;
    // format the units for display based on the flags
    const units = withSi || withSiFull
        ? si.value === '-'
            ? withUnit
                ? ` ${unit}`
                : ''
            : ` ${withSiFull ? `${si.text}${withUnit ? ' ' : ''}` : si.value}${withUnit ? unit : ''}`
        : '';
    const { decimal, thousand } = getSeparator(locale);
    return `${sign}${formatDecimal(pre, thousand)}${post && `${decimal}${post}`}${units}`;
}
const formatBalance = _formatBalance;
formatBalance.calcSi = (text, decimals = defaultDecimals) => calcSi(text, decimals);
formatBalance.findSi = findSi;
formatBalance.getDefaults = () => {
    return {
        decimals: defaultDecimals,
        unit: defaultUnit
    };
};
formatBalance.getOptions = (decimals = defaultDecimals) => {
    return SI.filter(({ power }) => power < 0
        ? (decimals + power) >= 0
        : true);
};
formatBalance.setDefaults = ({ decimals, unit }) => {
    defaultDecimals = decimals === undefined
        ? defaultDecimals
        : Array.isArray(decimals)
            ? decimals[0]
            : decimals;
    defaultUnit = unit === undefined
        ? defaultUnit
        : Array.isArray(unit)
            ? unit[0]
            : unit;
    SI[SI_MID].text = defaultUnit;
};

/** @internal */
function zeroPad(value) {
    return value.toString().padStart(2, '0');
}
/**
 * @name formatDate
 * @description Formats a date in CCYY-MM-DD HH:MM:SS format
 */
function formatDate(date) {
    const year = date.getFullYear().toString();
    const month = zeroPad((date.getMonth() + 1));
    const day = zeroPad(date.getDate());
    const hour = zeroPad(date.getHours());
    const minute = zeroPad(date.getMinutes());
    const second = zeroPad(date.getSeconds());
    return `${year}-${month}-${day} ${hour}:${minute}:${second}`;
}

/**
 * @name formatNumber
 * @description Formats a number into string format with thousand separators
 */
function formatNumber(value, { locale = 'en' } = {}) {
    const { thousand } = getSeparator(locale);
    return formatDecimal(bnToBn(value).toString(), thousand);
}

/**
 * @name isString
 * @summary Tests for a string.
 * @description
 * Checks to see if the input value is a JavaScript string.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isString } from '@polkadot/util';
 *
 * console.log('isString', isString('test')); // => true
 * ```
 */
function isString(value) {
    return typeof value === 'string' || value instanceof String;
}

/** @internal */
function isAsciiStr(str) {
    const count = str.length | 0;
    for (let i = 0; i < count; i++) {
        const b = str.charCodeAt(i);
        // check is inlined here, it is faster than making a call
        if (b < 32 || b > 126) {
            return false;
        }
    }
    return true;
}
/** @internal */
function isAsciiBytes(u8a) {
    const count = u8a.length | 0;
    for (let i = 0; i < count; i++) {
        const b = u8a[i] | 0;
        // check is inlined here, it is faster than making a call
        if (b < 32 || b > 126) {
            return false;
        }
    }
    return true;
}
/**
 * @name isAscii
 * @summary Tests if the input is printable ASCII
 * @description
 * Checks to see if the input string or Uint8Array is printable ASCII, 32-127 + formatters
 */
function isAscii(value) {
    return isString(value)
        ? isHex(value)
            ? isAsciiBytes(u8aToU8a(value))
            : isAsciiStr(value)
        : value
            ? isAsciiBytes(value)
            : false;
}

/**
 * @name isClass
 * Tests if the supplied agrument is a Class
 */
const isClass = /*#__PURE__*/ isOnFunction('isPrototypeOf', 'hasOwnProperty');

/**
 * @name isChildClass
 * @summary Tests if the child extends the parent Class
 * @description
 * Checks to see if the child Class extends the parent Class
 * @example
 * <BR>
 *
 * ```javascript
 * import { isChildClass } from '@polkadot/util';
 *
 * console.log('isChildClass', isChildClass(BN, BN); // => true
 * console.log('isChildClass', isChildClass(BN, Uint8Array); // => false
 * ```
 */
function isChildClass(Parent, Child) {
    // https://stackoverflow.com/questions/30993434/check-if-a-constructor-inherits-another-in-es6/30993664
    return isClass(Child) && isClass(Parent)
        // eslint-disable-next-line no-prototype-builtins
        ? Parent === Child || Parent.isPrototypeOf(Child)
        : false;
}

const checkCodec = /*#__PURE__*/ isOnObject('toHex', 'toU8a');
const checkRegistry = /*#__PURE__*/ isOnObject('get');
function isCodec$1(value) {
    return checkCodec(value) && checkRegistry(value.registry);
}

/**
 * @name isCompact
 * @summary Tests for SCALE-Compact-like object instance.
 */
const isCompact = /*#__PURE__*/ isOnObject('toBigInt', 'toBn', 'toNumber', 'unwrap');

/**
 * @name isError
 * @summary Tests for a `Error` object instance.
 * @description
 * Checks to see if the input object is an instance of `Error`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isError } from '@polkadot/util';
 *
 * console.log('isError', isError(new Error('message'))); // => true
 * ```
 */
function isError(value) {
    return (((value && value.constructor) === Error) ||
        value instanceof Error);
}

/** @internal */
function replacer(_, v) {
    return isBigInt(v)
        ? v.toString()
        : v;
}
/**
 * @name stringify
 * @summary Performs a JSON.stringify, with BigInt handling
 * @description A wrapper for JSON.stringify that handles BigInt values transparently, converting them to string. No differences from the native JSON.stringify function otherwise.
 */
function stringify(value, space) {
    return JSON.stringify(value, replacer, space);
}

/**
 * @name isNull
 * @summary Tests for a `null` values.
 * @description
 * Checks to see if the input value is `null`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isNull } from '@polkadot/util';
 *
 * console.log('isNull', isNull(null)); // => true
 * ```
 */
function isNull(value) {
    return value === null;
}

/**
 * @name isNumber
 * @summary Tests for a JavaScript number.
 * @description
 * Checks to see if the input value is a valid number.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isNumber } from '@polkadot/util';
 *
 * console.log('isNumber', isNumber(1234)); // => true
 * ```
 */
function isNumber(value) {
    return typeof value === 'number';
}

/**
 * @name isUndefined
 * @summary Tests for a `undefined` values.
 * @description
 * Checks to see if the input value is `undefined`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isUndefined } from '@polkadot/util';
 *
 * console.log('isUndefined', isUndefined(void(0))); // => true
 * ```
 */
function isUndefined(value) {
    return value === undefined;
}

/**
 * @name isUtf8
 * @summary Tests if the input is valid Utf8
 * @description
 * Checks to see if the input string or Uint8Array is valid Utf8
 */
function isUtf8(value) {
    if (!value) {
        return isString(value);
    }
    const u8a = u8aToU8a(value);
    const len = u8a.length;
    let i = 0;
    while (i < len) {
        if (u8a[i] <= 0x7F) /* 00..7F */ {
            i += 1;
        }
        else if (u8a[i] >= 0xC2 && u8a[i] <= 0xDF) /* C2..DF 80..BF */ {
            if (i + 1 < len) /* Expect a 2nd byte */ {
                if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
                    // *message = "After a first byte between C2 and DF, expecting a 2nd byte between 80 and BF";
                    // *faulty_bytes = 2;
                    return false;
                }
            }
            else {
                // *message = "After a first byte between C2 and DF, expecting a 2nd byte.";
                // *faulty_bytes = 1;
                return false;
            }
            i += 2;
        }
        else if (u8a[i] === 0xE0) /* E0 A0..BF 80..BF */ {
            if (i + 2 < len) /* Expect a 2nd and 3rd byte */ {
                if (u8a[i + 1] < 0xA0 || u8a[i + 1] > 0xBF) {
                    // *message = "After a first byte of E0, expecting a 2nd byte between A0 and BF.";
                    // *faulty_bytes = 2;
                    return false;
                }
                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                    // *message = "After a first byte of E0, expecting a 3nd byte between 80 and BF.";
                    // *faulty_bytes = 3;
                    return false;
                }
            }
            else {
                // *message = "After a first byte of E0, expecting two following bytes.";
                // *faulty_bytes = 1;
                return false;
            }
            i += 3;
        }
        else if (u8a[i] >= 0xE1 && u8a[i] <= 0xEC) /* E1..EC 80..BF 80..BF */ {
            if (i + 2 < len) /* Expect a 2nd and 3rd byte */ {
                if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
                    // *message = "After a first byte between E1 and EC, expecting the 2nd byte between 80 and BF.";
                    // *faulty_bytes = 2;
                    return false;
                }
                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                    // *message = "After a first byte between E1 and EC, expecting the 3rd byte between 80 and BF.";
                    // *faulty_bytes = 3;
                    return false;
                }
            }
            else {
                // *message = "After a first byte between E1 and EC, expecting two following bytes.";
                // *faulty_bytes = 1;
                return false;
            }
            i += 3;
        }
        else if (u8a[i] === 0xED) /* ED 80..9F 80..BF */ {
            if (i + 2 < len) /* Expect a 2nd and 3rd byte */ {
                if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0x9F) {
                    // *message = "After a first byte of ED, expecting 2nd byte between 80 and 9F.";
                    // *faulty_bytes = 2;
                    return false;
                }
                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                    // *message = "After a first byte of ED, expecting 3rd byte between 80 and BF.";
                    // *faulty_bytes = 3;
                    return false;
                }
            }
            else {
                // *message = "After a first byte of ED, expecting two following bytes.";
                // *faulty_bytes = 1;
                return false;
            }
            i += 3;
        }
        else if (u8a[i] >= 0xEE && u8a[i] <= 0xEF) /* EE..EF 80..BF 80..BF */ {
            if (i + 2 < len) /* Expect a 2nd and 3rd byte */ {
                if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
                    // *message = "After a first byte between EE and EF, expecting 2nd byte between 80 and BF.";
                    // *faulty_bytes = 2;
                    return false;
                }
                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                    // *message = "After a first byte between EE and EF, expecting 3rd byte between 80 and BF.";
                    // *faulty_bytes = 3;
                    return false;
                }
            }
            else {
                // *message = "After a first byte between EE and EF, two following bytes.";
                // *faulty_bytes = 1;
                return false;
            }
            i += 3;
        }
        else if (u8a[i] === 0xF0) /* F0 90..BF 80..BF 80..BF */ {
            if (i + 3 < len) /* Expect a 2nd, 3rd 3th byte */ {
                if (u8a[i + 1] < 0x90 || u8a[i + 1] > 0xBF) {
                    // *message = "After a first byte of F0, expecting 2nd byte between 90 and BF.";
                    // *faulty_bytes = 2;
                    return false;
                }
                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                    // *message = "After a first byte of F0, expecting 3rd byte between 80 and BF.";
                    // *faulty_bytes = 3;
                    return false;
                }
                if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {
                    // *message = "After a first byte of F0, expecting 4th byte between 80 and BF.";
                    // *faulty_bytes = 4;
                    return false;
                }
            }
            else {
                // *message = "After a first byte of F0, expecting three following bytes.";
                // *faulty_bytes = 1;
                return false;
            }
            i += 4;
        }
        else if (u8a[i] >= 0xF1 && u8a[i] <= 0xF3) /* F1..F3 80..BF 80..BF 80..BF */ {
            if (i + 3 < len) /* Expect a 2nd, 3rd 3th byte */ {
                if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
                    // *message = "After a first byte of F1, F2, or F3, expecting a 2nd byte between 80 and BF.";
                    // *faulty_bytes = 2;
                    return false;
                }
                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                    // *message = "After a first byte of F1, F2, or F3, expecting a 3rd byte between 80 and BF.";
                    // *faulty_bytes = 3;
                    return false;
                }
                if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {
                    // *message = "After a first byte of F1, F2, or F3, expecting a 4th byte between 80 and BF.";
                    // *faulty_bytes = 4;
                    return false;
                }
            }
            else {
                // *message = "After a first byte of F1, F2, or F3, expecting three following bytes.";
                // *faulty_bytes = 1;
                return false;
            }
            i += 4;
        }
        else if (u8a[i] === 0xF4) /* F4 80..8F 80..BF 80..BF */ {
            if (i + 3 < len) /* Expect a 2nd, 3rd 3th byte */ {
                if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0x8F) {
                    // *message = "After a first byte of F4, expecting 2nd byte between 80 and 8F.";
                    // *faulty_bytes = 2;
                    return false;
                }
                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                    // *message = "After a first byte of F4, expecting 3rd byte between 80 and BF.";
                    // *faulty_bytes = 3;
                    return false;
                }
                if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {
                    // *message = "After a first byte of F4, expecting 4th byte between 80 and BF.";
                    // *faulty_bytes = 4;
                    return false;
                }
            }
            else {
                // *message = "After a first byte of F4, expecting three following bytes.";
                // *faulty_bytes = 1;
                return false;
            }
            i += 4;
        }
        else {
            // *message = "Expecting bytes in the following ranges: 00..7F C2..F4.";
            // *faulty_bytes = 1;
            return false;
        }
    }
    return true;
}

/**
 * @name lazyMethod
 * @description
 * Creates a lazy, on-demand getter for the specific value. Upon get the value will be evaluated.
 */
function lazyMethod(result, item, creator, getName, index = 0) {
    const name = getName
        ? getName(item, index)
        : item.toString();
    let value;
    Object.defineProperty(result, name, {
        // This allows for re-configuration with the embedded defineProperty below
        // and ensures that on tested browsers and Node, it _will_ be redefined
        // and thus short-circuited for future access
        configurable: true,
        enumerable: true,
        // Use a function here, we don't want to capture the outer this, i.e.
        // don't use arrow functions in this context since we have a this inside
        get: function () {
            // This check should _always_ be false and unneeded, since we override
            // with a value below ... however we ensure we are quire vigilant against
            // all environment failures, so we are rather be safe than sorry
            if (value === undefined) {
                value = creator(item, index, this);
                try {
                    // re-define the property as a value, next time around this
                    // getter will only return the computed value
                    Object.defineProperty(this, name, { value });
                }
                catch {
                    // ignore any errors, since this _should_ not happen due to
                    // the "configurable" property above. But if it ever does
                    // from here-on we will be the cached value the next time
                    // around (with a very slight dip in performance)
                }
            }
            return value;
        }
    });
}
/**
 * @name lazyMethods
 * @description
 * Creates lazy, on-demand getters for the specific values.
 */
function lazyMethods(result, items, creator, getName) {
    for (let i = 0; i < items.length; i++) {
        lazyMethod(result, items[i], creator, getName, i);
    }
    return result;
}

const logTo = {
    debug: 'log',
    error: 'error',
    log: 'log',
    warn: 'warn'
};
function formatOther(value) {
    if (value && isObject(value) && value.constructor === Object) {
        const result = {};
        for (const [k, v] of Object.entries(value)) {
            result[k] = loggerFormat(v);
        }
        return result;
    }
    return value;
}
function loggerFormat(value) {
    if (Array.isArray(value)) {
        return value.map(loggerFormat);
    }
    else if (isBn(value)) {
        return value.toString();
    }
    else if (isU8a(value) || isBuffer(value)) {
        return u8aToHex(u8aToU8a(value));
    }
    return formatOther(value);
}
function formatWithLength(maxLength) {
    return (v) => {
        if (maxLength <= 0) {
            return v;
        }
        const r = `${v}`;
        return r.length < maxLength
            ? v
            : `${r.substring(0, maxLength)} ...`;
    };
}
function apply(log, type, values, maxSize = -1) {
    if (values.length === 1 && isFunction$1(values[0])) {
        const fnResult = values[0]();
        return apply(log, type, Array.isArray(fnResult) ? fnResult : [fnResult], maxSize);
    }
    console[logTo[log]](formatDate(new Date()), type, ...values
        .map(loggerFormat)
        .map(formatWithLength(maxSize)));
}
function noop$1() {
    // noop
}
function isDebugOn(e, type) {
    return !!e && (e === '*' ||
        type === e ||
        (e.endsWith('*') &&
            type.startsWith(e.slice(0, -1))));
}
function isDebugOff(e, type) {
    return !!e && (e.startsWith('-') &&
        (type === e.slice(1) ||
            (e.endsWith('*') &&
                type.startsWith(e.slice(1, -1)))));
}
function getDebugFlag(env, type) {
    let flag = false;
    for (const e of env) {
        if (isDebugOn(e, type)) {
            flag = true;
        }
        else if (isDebugOff(e, type)) {
            flag = false;
        }
    }
    return flag;
}
function parseEnv(type) {
    const env = (hasProcess ? xglobal.process : {}).env || {};
    const maxSize = parseInt(env.DEBUG_MAX || '-1', 10);
    return [
        getDebugFlag((env.DEBUG || '').toLowerCase().split(','), type),
        isNaN(maxSize)
            ? -1
            : maxSize
    ];
}
/**
 * @name Logger
 * @summary Creates a consistent log interface for messages
 * @description
 * Returns a `Logger` that has `.log`, `.error`, `.warn` and `.debug` (controlled with environment `DEBUG=typeA,typeB`) methods. Logging is done with a consistent prefix (type of logger, date) followed by the actual message using the underlying console.
 * @example
 * <BR>
 *
 * ```javascript
 * import { logger } from '@polkadot/util';
 *
 * const l = logger('test');
 * ```
 */
function logger(_type) {
    const type = `${_type.toUpperCase()}:`.padStart(16);
    const [isDebug, maxSize] = parseEnv(_type.toLowerCase());
    return {
        debug: isDebug
            ? (...values) => apply('debug', type, values, maxSize)
            : noop$1,
        error: (...values) => apply('error', type, values),
        log: (...values) => apply('log', type, values),
        noop: noop$1,
        warn: (...values) => apply('warn', type, values)
    };
}

function defaultGetId() {
    return 'none';
}
/**
 * @name memoize
 * @description Memomize the function with a specific instanceId
 */
function memoize(fn, { getInstanceId = defaultGetId } = {}) {
    const cache = {};
    const memoized = (...args) => {
        const stringParams = stringify(args);
        const instanceId = getInstanceId();
        if (!cache[instanceId]) {
            cache[instanceId] = {};
        }
        if (cache[instanceId][stringParams] === undefined) {
            cache[instanceId][stringParams] = fn(...args);
        }
        return cache[instanceId][stringParams];
    };
    memoized.unmemoize = (...args) => {
        const stringParams = stringify(args);
        const instanceId = getInstanceId();
        if (cache[instanceId] && cache[instanceId][stringParams] !== undefined) {
            delete cache[instanceId][stringParams];
        }
    };
    return memoized;
}

/**
 * @name nextTick
 * @description Defer the operation to the queue for evaluation on the next tick
 */
function nextTick(onExec, onError) {
    // While Promise.resolve().then(...) would defer to the nextTick, this
    // actually does not play as nicely in browsers like the setTimeout(...)
    // approach. So the safer, though less optimal approach is the one taken here
    setTimeout(() => {
        Promise
            .resolve()
            .then(() => {
            onExec();
        })
            .catch((error) => {
            if (onError) {
                onError(error);
            }
            else {
                console.error(error);
            }
        });
    }, 0);
}

/**
 * @name objectClear
 * @summary Removes all the keys from the input object
 */
function objectClear(value) {
    const keys = Object.keys(value);
    for (let i = 0; i < keys.length; i++) {
        delete value[keys[i]];
    }
    return value;
}

/**
 * @name objectSpread
 * @summary Concats all sources into the destination
 */
function objectSpread(dest, ...sources) {
    for (let i = 0; i < sources.length; i++) {
        const src = sources[i];
        if (src) {
            if (typeof src.entries === 'function') {
                for (const [key, value] of src.entries()) {
                    dest[key] = value;
                }
            }
            else {
                Object.assign(dest, src);
            }
        }
    }
    return dest;
}

/**
 * @name objectProperty
 * @summary Assign a get property on the input object
 */
function objectProperty(that, key, getter, getName, index = 0) {
    const name = getName
        ? getName(key, index)
        : key;
    // There are 3 approaches here -
    //  - Object.prototype.hasOwnProperty.call(that, key) - this only checks the current class, i.e
    //    will retuirn false if the property is set in the parent class
    //  - isUndefined(...) - this may yield a false positive when the property is there, but not set.
    //    Additionally, on pre-defined getters it may make a call
    //  - key in that - Does not need to be combined with either of the above and checks the full chain
    if (!(name in that)) {
        Object.defineProperty(that, name, {
            enumerable: true,
            // Unlike in lazy, we always call into the upper function, i.e. this method
            // does not cache old values (it is expected to be used for dynamic values)
            get: function () {
                return getter(key, index, this);
            }
        });
    }
}
/**
 * @name objectProperties
 * @summary Assign get properties on the input object
 */
function objectProperties(that, keys, getter, getName) {
    for (let i = 0; i < keys.length; i++) {
        objectProperty(that, keys[i], getter, getName, i);
    }
}

const CC_TO_UP = new Array(256);
const CC_TO_LO = new Array(256);
for (let i = 0; i < CC_TO_UP.length; i++) {
    CC_TO_LO[i] = String.fromCharCode(i).toLowerCase();
    CC_TO_UP[i] = String.fromCharCode(i).toUpperCase();
}
/** @internal */
function formatAllCaps(w) {
    return w.slice(0, w.length - 1).toLowerCase() + CC_TO_UP[w.charCodeAt(w.length - 1)];
}
/**
 * @internal
 *
 * Inspired by https://stackoverflow.com/a/2970667
 *
 * This is not as optimal as the original SO answer (we split into per-word),
 * however it does pass the tests (which the SO version doesn't) and is still
 * a major improvement over the original camelcase npm package -
 *
 *   camelcase: 20.88 μs/op
 *        this:  1.00 μs/op
 *
 * Caveat of this: only Ascii, but acceptable for the intended usecase
 */
function converter$1(format) {
    return (value) => {
        const parts = value
            // replace all separators (including consequtive) with spaces
            .replace(/[-_., ]+/g, ' ')
            // we don't want leading or trailing spaces
            .trim()
            // split into words
            .split(' ');
        const count = parts.length;
        let result = '';
        for (let i = 0; i < count; i++) {
            const w = parts[i];
            // apply the formatting
            result += format(/^[\dA-Z]+$/.test(w)
                // all full uppercase + letters are changed to lowercase
                ? w.toLowerCase()
                // all consecutive capitals + letters are changed to lowercase
                // e.g. UUID64 -> uuid64, while preserving splits, eg. NFTOrder -> nftOrder
                : w.replace(/^[\dA-Z]{2,}[^a-z]/, formatAllCaps), i);
        }
        return result;
    };
}
/**
 * @name stringCamelCase
 * @summary Convert a dash/dot/underscore/space separated Ascii string/String to camelCase
 */
const stringCamelCase = /*#__PURE__*/ converter$1((w, i) => 
(i ? CC_TO_UP[w.charCodeAt(0)] : CC_TO_LO[w.charCodeAt(0)]) + w.slice(1));
/**
 * @name stringPascalCase
 * @summary Convert a dash/dot/underscore/space separated Ascii string/String to PascalCase
 */
const stringPascalCase = /*#__PURE__*/ converter$1((w) => 
CC_TO_UP[w.charCodeAt(0)] + w.slice(1));

/** @internal */
function converter(map) {
    return (value) => value
        ? map[value.charCodeAt(0)] + value.slice(1)
        : '';
}
/**
 * @name stringUpperFirst
 * @summary Uppercase the first letter of a string
 * @description
 * Lowercase the first letter of a string
 * @example
 * <BR>
 *
 * ```javascript
 * import { stringUpperFirst } from '@polkadot/util';
 *
 * stringUpperFirst('abc'); // => 'Abc'
 * ```
 */
const stringUpperFirst = /*#__PURE__*/ converter(CC_TO_UP);

/**
 * @name stringToHex
 * @summary Creates a hex string from a utf-8 string
 * @description
 * String input values return the actual encoded hex value.
 * @example
 * <BR>
 *
 * ```javascript
 * import { stringToHex } from '@polkadot/util';
 *
 * stringToU8a('hello'); // 0x68656c6c6f
 * ```
 */
function stringToHex(value) {
    return u8aToHex(stringToU8a(value));
}

const packageInfo = { name: '@polkadot/api', path: (import.meta && import.meta.url) ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf('/') + 1) : 'auto', type: 'esm', version: '10.1.3' };

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */

var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
  return extendStatics(d, b);
};

function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() { this.constructor = d; }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
  return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
      function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
  function verb(n) { return function (v) { return step([n, v]); }; }
  function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
              case 0: case 1: t = op; break;
              case 4: _.label++; return { value: op[1], done: false };
              case 5: _.label++; y = op[1]; op = [0]; continue;
              case 7: op = _.ops.pop(); _.trys.pop(); continue;
              default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                  if (t[2]) _.ops.pop();
                  _.trys.pop(); continue;
          }
          op = body.call(thisArg, _);
      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
  }
}

function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
      next: function () {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
      }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  }
  catch (error) { e = { error: error }; }
  finally {
      try {
          if (r && !r.done && (m = i["return"])) m.call(i);
      }
      finally { if (e) throw e.error; }
  }
  return ar;
}

function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
      }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
  function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
  function fulfill(value) { resume("next", value); }
  function reject(value) { resume("throw", value); }
  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

const PKCS8_DIVIDER = new Uint8Array([161, 35, 3, 33, 0]);
const PKCS8_HEADER = new Uint8Array([48, 83, 2, 1, 1, 48, 5, 6, 3, 43, 101, 112, 4, 34, 4, 32]);
const PUB_LENGTH = 32;
const SEC_LENGTH = 64;
const SEED_LENGTH = 32;

const SEED_OFFSET = PKCS8_HEADER.length;
function decodePair(passphrase, encrypted, _encType) {
    const encType = Array.isArray(_encType) || _encType === undefined
        ? _encType
        : [_encType];
    const decrypted = jsonDecryptData(encrypted, passphrase, encType);
    const header = decrypted.subarray(0, PKCS8_HEADER.length);
    if (!u8aEq(header, PKCS8_HEADER)) {
        throw new Error('Invalid Pkcs8 header found in body');
    }
    let secretKey = decrypted.subarray(SEED_OFFSET, SEED_OFFSET + SEC_LENGTH);
    let divOffset = SEED_OFFSET + SEC_LENGTH;
    let divider = decrypted.subarray(divOffset, divOffset + PKCS8_DIVIDER.length);
    // old-style, we have the seed here
    if (!u8aEq(divider, PKCS8_DIVIDER)) {
        divOffset = SEED_OFFSET + SEED_LENGTH;
        secretKey = decrypted.subarray(SEED_OFFSET, divOffset);
        divider = decrypted.subarray(divOffset, divOffset + PKCS8_DIVIDER.length);
        if (!u8aEq(divider, PKCS8_DIVIDER)) {
            throw new Error('Invalid Pkcs8 divider found in body');
        }
    }
    const pubOffset = divOffset + PKCS8_DIVIDER.length;
    const publicKey = decrypted.subarray(pubOffset, pubOffset + PUB_LENGTH);
    return {
        publicKey,
        secretKey
    };
}

function encodePair({ publicKey, secretKey }, passphrase) {
    if (!secretKey) {
        throw new Error('Expected a valid secretKey to be passed to encode');
    }
    const encoded = u8aConcat(PKCS8_HEADER, secretKey, PKCS8_DIVIDER, publicKey);
    if (!passphrase) {
        return encoded;
    }
    const { params, password, salt } = scryptEncode(passphrase);
    const { encrypted, nonce } = naclEncrypt(encoded, password.subarray(0, 32));
    return u8aConcat(scryptToU8a(salt, params), nonce, encrypted);
}

function pairToJson(type, { address, meta }, encoded, isEncrypted) {
    return objectSpread(jsonEncryptFormat(encoded, ['pkcs8', type], isEncrypted), {
        address,
        meta
    });
}

const SIG_TYPE_NONE = new Uint8Array();
const TYPE_FROM_SEED = {
    ecdsa: secp256k1PairFromSeed,
    ed25519: ed25519PairFromSeed,
    ethereum: secp256k1PairFromSeed,
    sr25519: sr25519PairFromSeed
};
const TYPE_PREFIX = {
    ecdsa: new Uint8Array([2]),
    ed25519: new Uint8Array([0]),
    ethereum: new Uint8Array([2]),
    sr25519: new Uint8Array([1])
};
const TYPE_SIGNATURE = {
    ecdsa: (m, p) => secp256k1Sign(m, p, 'blake2'),
    ed25519: ed25519Sign,
    ethereum: (m, p) => secp256k1Sign(m, p, 'keccak'),
    sr25519: sr25519Sign
};
const TYPE_ADDRESS = {
    ecdsa: (p) => p.length > 32 ? blake2AsU8a(p) : p,
    ed25519: (p) => p,
    ethereum: (p) => p.length === 20 ? p : keccakAsU8a(secp256k1Expand(p)),
    sr25519: (p) => p
};
function isLocked(secretKey) {
    return !secretKey || u8aEmpty(secretKey);
}
function vrfHash(proof, context, extra) {
    return blake2AsU8a(u8aConcat(context || '', extra || '', proof));
}
/**
 * @name createPair
 * @summary Creates a keyring pair object
 * @description Creates a keyring pair object with provided account public key, metadata, and encoded arguments.
 * The keyring pair stores the account state including the encoded address and associated metadata.
 *
 * It has properties whose values are functions that may be called to perform account actions:
 *
 * - `address` function retrieves the address associated with the account.
 * - `decodedPkcs8` function is called with the account passphrase and account encoded public key.
 * It decodes the encoded public key using the passphrase provided to obtain the decoded account public key
 * and associated secret key that are then available in memory, and changes the account address stored in the
 * state of the pair to correspond to the address of the decoded public key.
 * - `encodePkcs8` function when provided with the correct passphrase associated with the account pair
 * and when the secret key is in memory (when the account pair is not locked) it returns an encoded
 * public key of the account.
 * - `meta` is the metadata that is stored in the state of the pair, either when it was originally
 * created or set via `setMeta`.
 * - `publicKey` returns the public key stored in memory for the pair.
 * - `sign` may be used to return a signature by signing a provided message with the secret
 * key (if it is in memory) using Nacl.
 * - `toJson` calls another `toJson` function and provides the state of the pair,
 * it generates arguments to be passed to the other `toJson` function including an encoded public key of the account
 * that it generates using the secret key from memory (if it has been made available in memory)
 * and the optionally provided passphrase argument. It passes a third boolean argument to `toJson`
 * indicating whether the public key has been encoded or not (if a passphrase argument was provided then it is encoded).
 * The `toJson` function that it calls returns a JSON object with properties including the `address`
 * and `meta` that are assigned with the values stored in the corresponding state variables of the account pair,
 * an `encoded` property that is assigned with the encoded public key in hex format, and an `encoding`
 * property that indicates whether the public key value of the `encoded` property is encoded or not.
 */
function createPair({ toSS58, type }, { publicKey, secretKey }, meta = {}, encoded = null, encTypes) {
    const decodePkcs8 = (passphrase, userEncoded) => {
        const decoded = decodePair(passphrase, userEncoded || encoded, encTypes);
        if (decoded.secretKey.length === 64) {
            publicKey = decoded.publicKey;
            secretKey = decoded.secretKey;
        }
        else {
            const pair = TYPE_FROM_SEED[type](decoded.secretKey);
            publicKey = pair.publicKey;
            secretKey = pair.secretKey;
        }
    };
    const recode = (passphrase) => {
        isLocked(secretKey) && encoded && decodePkcs8(passphrase, encoded);
        encoded = encodePair({ publicKey, secretKey }, passphrase); // re-encode, latest version
        encTypes = undefined; // swap to defaults, latest version follows
        return encoded;
    };
    const encodeAddress = () => {
        const raw = TYPE_ADDRESS[type](publicKey);
        return type === 'ethereum'
            ? ethereumEncode(raw)
            : toSS58(raw);
    };
    return {
        get address() {
            return encodeAddress();
        },
        get addressRaw() {
            const raw = TYPE_ADDRESS[type](publicKey);
            return type === 'ethereum'
                ? raw.slice(-20)
                : raw;
        },
        get isLocked() {
            return isLocked(secretKey);
        },
        get meta() {
            return meta;
        },
        get publicKey() {
            return publicKey;
        },
        get type() {
            return type;
        },
        // eslint-disable-next-line sort-keys
        decodePkcs8,
        derive: (suri, meta) => {
            if (type === 'ethereum') {
                throw new Error('Unable to derive on this keypair');
            }
            else if (isLocked(secretKey)) {
                throw new Error('Cannot derive on a locked keypair');
            }
            const { path } = keyExtractPath(suri);
            const derived = keyFromPath({ publicKey, secretKey }, path, type);
            return createPair({ toSS58, type }, derived, meta, null);
        },
        encodePkcs8: (passphrase) => {
            return recode(passphrase);
        },
        lock: () => {
            secretKey = new Uint8Array();
        },
        setMeta: (additional) => {
            meta = objectSpread({}, meta, additional);
        },
        sign: (message, options = {}) => {
            if (isLocked(secretKey)) {
                throw new Error('Cannot sign with a locked key pair');
            }
            return u8aConcat(options.withType
                ? TYPE_PREFIX[type]
                : SIG_TYPE_NONE, TYPE_SIGNATURE[type](u8aToU8a(message), { publicKey, secretKey }));
        },
        toJson: (passphrase) => {
            // NOTE: For ecdsa and ethereum, the publicKey cannot be extracted from the address. For these
            // pass the hex-encoded publicKey through to the address portion of the JSON (before decoding)
            // unless the publicKey is already an address
            const address = ['ecdsa', 'ethereum'].includes(type)
                ? publicKey.length === 20
                    ? u8aToHex(publicKey)
                    : u8aToHex(secp256k1Compress(publicKey))
                : encodeAddress();
            return pairToJson(type, { address, meta }, recode(passphrase), !!passphrase);
        },
        unlock: (passphrase) => {
            return decodePkcs8(passphrase);
        },
        verify: (message, signature, signerPublic) => {
            return signatureVerify(message, signature, TYPE_ADDRESS[type](u8aToU8a(signerPublic))).isValid;
        },
        vrfSign: (message, context, extra) => {
            if (isLocked(secretKey)) {
                throw new Error('Cannot sign with a locked key pair');
            }
            if (type === 'sr25519') {
                return sr25519VrfSign(message, { secretKey }, context, extra);
            }
            const proof = TYPE_SIGNATURE[type](u8aToU8a(message), { publicKey, secretKey });
            return u8aConcat(vrfHash(proof, context, extra), proof);
        },
        vrfVerify: (message, vrfResult, signerPublic, context, extra) => {
            if (type === 'sr25519') {
                return sr25519VrfVerify(message, vrfResult, publicKey, context, extra);
            }
            const result = signatureVerify(message, u8aConcat(TYPE_PREFIX[type], vrfResult.subarray(32)), TYPE_ADDRESS[type](u8aToU8a(signerPublic)));
            return result.isValid && u8aEq(vrfResult.subarray(0, 32), vrfHash(vrfResult.subarray(32), context, extra));
        }
    };
}

const DEV_PHRASE = 'bottom drive obey lake curtain smoke basket hold race lonely fit walk';

var _Pairs_map;
class Pairs {
    constructor() {
        _Pairs_map.set(this, {});
    }
    add(pair) {
        __classPrivateFieldGet(this, _Pairs_map, "f")[decodeAddress(pair.address).toString()] = pair;
        return pair;
    }
    all() {
        return Object.values(__classPrivateFieldGet(this, _Pairs_map, "f"));
    }
    get(address) {
        const pair = __classPrivateFieldGet(this, _Pairs_map, "f")[decodeAddress(address).toString()];
        if (!pair) {
            throw new Error(`Unable to retrieve keypair '${isU8a(address) || isHex(address)
                ? u8aToHex(u8aToU8a(address))
                : address}'`);
        }
        return pair;
    }
    remove(address) {
        delete __classPrivateFieldGet(this, _Pairs_map, "f")[decodeAddress(address).toString()];
    }
}
_Pairs_map = new WeakMap();

var _Keyring_pairs, _Keyring_type, _Keyring_ss58;
const PairFromSeed = {
    ecdsa: (seed) => secp256k1PairFromSeed(seed),
    ed25519: (seed) => ed25519PairFromSeed(seed),
    ethereum: (seed) => secp256k1PairFromSeed(seed),
    sr25519: (seed) => sr25519PairFromSeed(seed)
};
function pairToPublic({ publicKey }) {
    return publicKey;
}
/**
 * # @polkadot/keyring
 *
 * ## Overview
 *
 * @name Keyring
 * @summary Keyring management of user accounts
 * @description Allows generation of keyring pairs from a variety of input combinations, such as
 * json object containing account address or public key, account metadata, and account encoded using
 * `addFromJson`, or by providing those values as arguments separately to `addFromAddress`,
 * or by providing the mnemonic (seed phrase) and account metadata as arguments to `addFromMnemonic`.
 * Stores the keyring pairs in a keyring pair dictionary. Removal of the keyring pairs from the keyring pair
 * dictionary is achieved using `removePair`. Retrieval of all the stored pairs via `getPairs` or perform
 * lookup of a pair for a given account address or public key using `getPair`. JSON metadata associated with
 * an account may be obtained using `toJson` accompanied by the account passphrase.
 */
class Keyring {
    constructor(options = {}) {
        _Keyring_pairs.set(this, void 0);
        _Keyring_type.set(this, void 0);
        _Keyring_ss58.set(this, void 0);
        this.decodeAddress = decodeAddress;
        /**
         * @name encodeAddress
         * @description Encodes the input into an ss58 representation
         */
        this.encodeAddress = (address, ss58Format) => {
            return this.type === 'ethereum'
                ? ethereumEncode(address)
                : encodeAddress(address, ss58Format === undefined ? __classPrivateFieldGet(this, _Keyring_ss58, "f") : ss58Format);
        };
        options.type = options.type || 'ed25519';
        if (!['ecdsa', 'ethereum', 'ed25519', 'sr25519'].includes(options.type || 'undefined')) {
            throw new Error(`Expected a keyring type of either 'ed25519', 'sr25519', 'ethereum' or 'ecdsa', found '${options.type || 'unknown'}`);
        }
        __classPrivateFieldSet(this, _Keyring_pairs, new Pairs(), "f");
        __classPrivateFieldSet(this, _Keyring_ss58, options.ss58Format, "f");
        __classPrivateFieldSet(this, _Keyring_type, options.type, "f");
    }
    /**
     * @description retrieve the pairs (alias for getPairs)
     */
    get pairs() {
        return this.getPairs();
    }
    /**
     * @description retrieve the publicKeys (alias for getPublicKeys)
     */
    get publicKeys() {
        return this.getPublicKeys();
    }
    /**
     * @description Returns the type of the keyring, ed25519, sr25519 or ecdsa
     */
    get type() {
        return __classPrivateFieldGet(this, _Keyring_type, "f");
    }
    /**
     * @name addPair
     * @summary Stores an account, given a keyring pair, as a Key/Value (public key, pair) in Keyring Pair Dictionary
     */
    addPair(pair) {
        return __classPrivateFieldGet(this, _Keyring_pairs, "f").add(pair);
    }
    /**
     * @name addFromAddress
     * @summary Stores an account, given an account address, as a Key/Value (public key, pair) in Keyring Pair Dictionary
     * @description Allows user to explicitly provide separate inputs including account address or public key, and optionally
     * the associated account metadata, and the default encoded value as arguments (that may be obtained from the json file
     * of an account backup), and then generates a keyring pair from them that it passes to
     * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
     */
    addFromAddress(address, meta = {}, encoded = null, type = this.type, ignoreChecksum, encType) {
        const publicKey = this.decodeAddress(address, ignoreChecksum);
        return this.addPair(createPair({ toSS58: this.encodeAddress, type }, { publicKey, secretKey: new Uint8Array() }, meta, encoded, encType));
    }
    /**
     * @name addFromJson
     * @summary Stores an account, given JSON data, as a Key/Value (public key, pair) in Keyring Pair Dictionary
     * @description Allows user to provide a json object argument that contains account information (that may be obtained from the json file
     * of an account backup), and then generates a keyring pair from it that it passes to
     * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
     */
    addFromJson(json, ignoreChecksum) {
        return this.addPair(this.createFromJson(json, ignoreChecksum));
    }
    /**
     * @name addFromMnemonic
     * @summary Stores an account, given a mnemonic, as a Key/Value (public key, pair) in Keyring Pair Dictionary
     * @description Allows user to provide a mnemonic (seed phrase that is provided when account is originally created)
     * argument and a metadata argument that contains account information (that may be obtained from the json file
     * of an account backup), and then generates a keyring pair from it that it passes to
     * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
     */
    addFromMnemonic(mnemonic, meta = {}, type = this.type) {
        return this.addFromUri(mnemonic, meta, type);
    }
    /**
     * @name addFromPair
     * @summary Stores an account created from an explicit publicKey/secreteKey combination
     */
    addFromPair(pair, meta = {}, type = this.type) {
        return this.addPair(this.createFromPair(pair, meta, type));
    }
    /**
     * @name addFromSeed
     * @summary Stores an account, given seed data, as a Key/Value (public key, pair) in Keyring Pair Dictionary
     * @description Stores in a keyring pair dictionary the public key of the pair as a key and the pair as the associated value.
     * Allows user to provide the account seed as an argument, and then generates a keyring pair from it that it passes to
     * `addPair` to store in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
     */
    addFromSeed(seed, meta = {}, type = this.type) {
        return this.addPair(createPair({ toSS58: this.encodeAddress, type }, PairFromSeed[type](seed), meta, null));
    }
    /**
     * @name addFromUri
     * @summary Creates an account via an suri
     * @description Extracts the phrase, path and password from a SURI format for specifying secret keys `<secret>/<soft-key>//<hard-key>///<password>` (the `///password` may be omitted, and `/<soft-key>` and `//<hard-key>` maybe repeated and mixed). The secret can be a hex string, mnemonic phrase or a string (to be padded)
     */
    addFromUri(suri, meta = {}, type = this.type) {
        return this.addPair(this.createFromUri(suri, meta, type));
    }
    /**
     * @name createFromJson
     * @description Creates a pair from a JSON keyfile
     */
    createFromJson({ address, encoded, encoding: { content, type, version }, meta }, ignoreChecksum) {
        if (version === '3' && content[0] !== 'pkcs8') {
            throw new Error(`Unable to decode non-pkcs8 type, [${content.join(',')}] found}`);
        }
        const cryptoType = version === '0' || !Array.isArray(content)
            ? this.type
            : content[1];
        const encType = !Array.isArray(type)
            ? [type]
            : type;
        if (!['ed25519', 'sr25519', 'ecdsa', 'ethereum'].includes(cryptoType)) {
            throw new Error(`Unknown crypto type ${cryptoType}`);
        }
        // Here the address and publicKey are 32 bytes and isomorphic. This is why the address field needs to be the public key for ethereum type pairs
        const publicKey = isHex(address)
            ? hexToU8a(address)
            : this.decodeAddress(address, ignoreChecksum);
        const decoded = isHex(encoded)
            ? hexToU8a(encoded)
            : base64Decode(encoded);
        return createPair({ toSS58: this.encodeAddress, type: cryptoType }, { publicKey, secretKey: new Uint8Array() }, meta, decoded, encType);
    }
    /**
     * @name createFromPair
     * @summary Creates a pair from an explicit publicKey/secreteKey combination
     */
    createFromPair(pair, meta = {}, type = this.type) {
        return createPair({ toSS58: this.encodeAddress, type }, pair, meta, null);
    }
    /**
     * @name createFromUri
     * @summary Creates a Keypair from an suri
     * @description This creates a pair from the suri, but does not add it to the keyring
     */
    createFromUri(_suri, meta = {}, type = this.type) {
        // here we only aut-add the dev phrase if we have a hard-derived path
        const suri = _suri.startsWith('//')
            ? `${DEV_PHRASE}${_suri}`
            : _suri;
        const { derivePath, password, path, phrase } = keyExtractSuri(suri);
        let seed;
        const isPhraseHex = isHex(phrase, 256);
        if (isPhraseHex) {
            seed = hexToU8a(phrase);
        }
        else {
            const parts = phrase.split(' ');
            if ([12, 15, 18, 21, 24].includes(parts.length)) {
                seed = type === 'ethereum'
                    ? mnemonicToLegacySeed(phrase, '', false, 64)
                    : mnemonicToMiniSecret(phrase, password);
            }
            else {
                if (phrase.length > 32) {
                    throw new Error('specified phrase is not a valid mnemonic and is invalid as a raw seed at > 32 bytes');
                }
                seed = stringToU8a(phrase.padEnd(32));
            }
        }
        const derived = type === 'ethereum'
            ? isPhraseHex
                ? PairFromSeed[type](seed) // for eth, if the private key is provided as suri, it must be derived only once
                : hdEthereum(seed, derivePath.substring(1))
            : keyFromPath(PairFromSeed[type](seed), path, type);
        return createPair({ toSS58: this.encodeAddress, type }, derived, meta, null);
    }
    /**
     * @name getPair
     * @summary Retrieves an account keyring pair from the Keyring Pair Dictionary, given an account address
     * @description Returns a keyring pair value from the keyring pair dictionary by performing
     * a key lookup using the provided account address or public key (after decoding it).
     */
    getPair(address) {
        return __classPrivateFieldGet(this, _Keyring_pairs, "f").get(address);
    }
    /**
     * @name getPairs
     * @summary Retrieves all account keyring pairs from the Keyring Pair Dictionary
     * @description Returns an array list of all the keyring pair values that are stored in the keyring pair dictionary.
     */
    getPairs() {
        return __classPrivateFieldGet(this, _Keyring_pairs, "f").all();
    }
    /**
     * @name getPublicKeys
     * @summary Retrieves Public Keys of all Keyring Pairs stored in the Keyring Pair Dictionary
     * @description Returns an array list of all the public keys associated with each of the keyring pair values that are stored in the keyring pair dictionary.
     */
    getPublicKeys() {
        return __classPrivateFieldGet(this, _Keyring_pairs, "f").all().map(pairToPublic);
    }
    /**
     * @name removePair
     * @description Deletes the provided input address or public key from the stored Keyring Pair Dictionary.
     */
    removePair(address) {
        __classPrivateFieldGet(this, _Keyring_pairs, "f").remove(address);
    }
    /**
     * @name setSS58Format;
     * @description Sets the ss58 format for the keyring
     */
    setSS58Format(ss58) {
        __classPrivateFieldSet(this, _Keyring_ss58, ss58, "f");
    }
    /**
     * @name toJson
     * @summary Returns a JSON object associated with the input argument that contains metadata assocated with an account
     * @description Returns a JSON object containing the metadata associated with an account
     * when valid address or public key and when the account passphrase is provided if the account secret
     * is not already unlocked and available in memory. Note that in [Polkadot-JS Apps](https://github.com/polkadot-js/apps) the user
     * may backup their account to a JSON file that contains this information.
     */
    toJson(address, passphrase) {
        return __classPrivateFieldGet(this, _Keyring_pairs, "f").get(address).toJson(passphrase);
    }
}
_Keyring_pairs = new WeakMap(), _Keyring_type = new WeakMap(), _Keyring_ss58 = new WeakMap();

const fetch = xglobal.fetch;

const UNKNOWN = -99999;
function extend(that, name, value) {
    Object.defineProperty(that, name, {
        configurable: true,
        enumerable: false,
        value
    });
}
/**
 * @name RpcError
 * @summary Extension to the basic JS Error.
 * @description
 * The built-in JavaScript Error class is extended by adding a code to allow for Error categorization. In addition to the normal `stack`, `message`, the numeric `code` and `data` (any types) parameters are available on the object.
 * @example
 * <BR>
 *
 * ```javascript
 * const { RpcError } from '@polkadot/util');
 *
 * throw new RpcError('some message', RpcError.CODES.METHOD_NOT_FOUND); // => error.code = -32601
 * ```
 */
class RpcError extends Error {
    constructor(message = '', code = UNKNOWN, data) {
        super();
        extend(this, 'message', String(message));
        extend(this, 'name', this.constructor.name);
        extend(this, 'data', data);
        extend(this, 'code', code);
        if (isFunction$1(Error.captureStackTrace)) {
            Error.captureStackTrace(this, this.constructor);
        }
        else {
            const { stack } = new Error(message);
            stack && extend(this, 'stack', stack);
        }
    }
}
RpcError.CODES = {
    ASSERT: -90009,
    INVALID_JSONRPC: -99998,
    METHOD_NOT_FOUND: -32601,
    UNKNOWN
};

var _RpcCoder_id;
function formatErrorData(data) {
    if (isUndefined(data)) {
        return '';
    }
    const formatted = `: ${isString(data)
        ? data.replace(/Error\("/g, '').replace(/\("/g, '(').replace(/"\)/g, ')').replace(/\(/g, ', ').replace(/\)/g, '')
        : stringify(data)}`;
    // We need some sort of cut-off here since these can be very large and
    // very nested, pick a number and trim the result display to it
    return formatted.length <= 256
        ? formatted
        : `${formatted.substring(0, 255)}…`;
}
function checkError(error) {
    if (error) {
        const { code, data, message } = error;
        throw new RpcError(`${code}: ${message}${formatErrorData(data)}`, code, data);
    }
}
/** @internal */
class RpcCoder {
    constructor() {
        _RpcCoder_id.set(this, 0);
    }
    decodeResponse(response) {
        if (!response || response.jsonrpc !== '2.0') {
            throw new Error('Invalid jsonrpc field in decoded object');
        }
        const isSubscription = !isUndefined(response.params) && !isUndefined(response.method);
        if (!isNumber(response.id) &&
            (!isSubscription || (!isNumber(response.params.subscription) &&
                !isString(response.params.subscription)))) {
            throw new Error('Invalid id field in decoded object');
        }
        checkError(response.error);
        if (response.result === undefined && !isSubscription) {
            throw new Error('No result found in jsonrpc response');
        }
        if (isSubscription) {
            checkError(response.params.error);
            return response.params.result;
        }
        return response.result;
    }
    encodeJson(method, params) {
        const [id, data] = this.encodeObject(method, params);
        return [id, stringify(data)];
    }
    encodeObject(method, params) {
        var _a;
        const id = __classPrivateFieldSet(this, _RpcCoder_id, (_a = __classPrivateFieldGet(this, _RpcCoder_id, "f"), ++_a), "f");
        return [id, {
                id,
                jsonrpc: '2.0',
                method,
                params
            }];
    }
}
_RpcCoder_id = new WeakMap();

const HTTP_URL = 'http://127.0.0.1:9933';
const WS_URL = 'ws://127.0.0.1:9944';
var defaults = {
    HTTP_URL,
    WS_URL
};

var _LRUCache_instances, _LRUCache_data, _LRUCache_refs, _LRUCache_length, _LRUCache_head, _LRUCache_tail, _LRUCache_toHead;
const DEFAULT_CAPACITY = 128;
class LRUNode {
    constructor(key) {
        this.key = key;
        this.next = this.prev = this;
    }
}
class LRUCache {
    constructor(capacity = DEFAULT_CAPACITY) {
        _LRUCache_instances.add(this);
        _LRUCache_data.set(this, new Map());
        _LRUCache_refs.set(this, new Map());
        _LRUCache_length.set(this, 0);
        _LRUCache_head.set(this, void 0);
        _LRUCache_tail.set(this, void 0);
        this.capacity = capacity;
        __classPrivateFieldSet(this, _LRUCache_head, __classPrivateFieldSet(this, _LRUCache_tail, new LRUNode('<empty>'), "f"), "f");
    }
    get length() {
        return __classPrivateFieldGet(this, _LRUCache_length, "f");
    }
    get lengthData() {
        return __classPrivateFieldGet(this, _LRUCache_data, "f").size;
    }
    get lengthRefs() {
        return __classPrivateFieldGet(this, _LRUCache_refs, "f").size;
    }
    entries() {
        const keys = this.keys();
        const entries = new Array(keys.length);
        for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            entries[i] = [key, __classPrivateFieldGet(this, _LRUCache_data, "f").get(key)];
        }
        return entries;
    }
    keys() {
        const keys = [];
        if (__classPrivateFieldGet(this, _LRUCache_length, "f")) {
            let curr = __classPrivateFieldGet(this, _LRUCache_head, "f");
            while (curr !== __classPrivateFieldGet(this, _LRUCache_tail, "f")) {
                keys.push(curr.key);
                curr = curr.next;
            }
            keys.push(curr.key);
        }
        return keys;
    }
    get(key) {
        const data = __classPrivateFieldGet(this, _LRUCache_data, "f").get(key);
        if (data) {
            __classPrivateFieldGet(this, _LRUCache_instances, "m", _LRUCache_toHead).call(this, key);
            return data;
        }
        return null;
    }
    set(key, value) {
        if (__classPrivateFieldGet(this, _LRUCache_data, "f").has(key)) {
            __classPrivateFieldGet(this, _LRUCache_instances, "m", _LRUCache_toHead).call(this, key);
        }
        else {
            const node = new LRUNode(key);
            __classPrivateFieldGet(this, _LRUCache_refs, "f").set(node.key, node);
            if (this.length === 0) {
                __classPrivateFieldSet(this, _LRUCache_head, __classPrivateFieldSet(this, _LRUCache_tail, node, "f"), "f");
            }
            else {
                __classPrivateFieldGet(this, _LRUCache_head, "f").prev = node;
                node.next = __classPrivateFieldGet(this, _LRUCache_head, "f");
                __classPrivateFieldSet(this, _LRUCache_head, node, "f");
            }
            if (__classPrivateFieldGet(this, _LRUCache_length, "f") === this.capacity) {
                __classPrivateFieldGet(this, _LRUCache_data, "f").delete(__classPrivateFieldGet(this, _LRUCache_tail, "f").key);
                __classPrivateFieldGet(this, _LRUCache_refs, "f").delete(__classPrivateFieldGet(this, _LRUCache_tail, "f").key);
                __classPrivateFieldSet(this, _LRUCache_tail, __classPrivateFieldGet(this, _LRUCache_tail, "f").prev, "f");
                __classPrivateFieldGet(this, _LRUCache_tail, "f").next = __classPrivateFieldGet(this, _LRUCache_head, "f");
            }
            else {
                __classPrivateFieldSet(this, _LRUCache_length, __classPrivateFieldGet(this, _LRUCache_length, "f") + 1, "f");
            }
        }
        __classPrivateFieldGet(this, _LRUCache_data, "f").set(key, value);
    }
}
_LRUCache_data = new WeakMap(), _LRUCache_refs = new WeakMap(), _LRUCache_length = new WeakMap(), _LRUCache_head = new WeakMap(), _LRUCache_tail = new WeakMap(), _LRUCache_instances = new WeakSet(), _LRUCache_toHead = function _LRUCache_toHead(key) {
    const ref = __classPrivateFieldGet(this, _LRUCache_refs, "f").get(key);
    if (ref && ref !== __classPrivateFieldGet(this, _LRUCache_head, "f")) {
        ref.prev.next = ref.next;
        ref.next.prev = ref.prev;
        ref.next = __classPrivateFieldGet(this, _LRUCache_head, "f");
        __classPrivateFieldGet(this, _LRUCache_head, "f").prev = ref;
        __classPrivateFieldSet(this, _LRUCache_head, ref, "f");
    }
};

var _HttpProvider_instances, _HttpProvider_callCache, _HttpProvider_coder, _HttpProvider_endpoint, _HttpProvider_headers, _HttpProvider_stats, _HttpProvider_send;
const ERROR_SUBSCRIBE = 'HTTP Provider does not have subscriptions, use WebSockets instead';
const l$d = logger('api-http');
/**
 * # @polkadot/rpc-provider
 *
 * @name HttpProvider
 *
 * @description The HTTP Provider allows sending requests using HTTP to a HTTP RPC server TCP port. It does not support subscriptions so you won't be able to listen to events such as new blocks or balance changes. It is usually preferable using the [[WsProvider]].
 *
 * @example
 * <BR>
 *
 * ```javascript
 * import Api from '@polkadot/api/promise';
 * import { HttpProvider } from '@polkadot/rpc-provider';
 *
 * const provider = new HttpProvider('http://127.0.0.1:9933');
 * const api = new Api(provider);
 * ```
 *
 * @see [[WsProvider]]
 */
class HttpProvider {
    /**
     * @param {string} endpoint The endpoint url starting with http://
     */
    constructor(endpoint = defaults.HTTP_URL, headers = {}) {
        _HttpProvider_instances.add(this);
        _HttpProvider_callCache.set(this, new LRUCache());
        _HttpProvider_coder.set(this, void 0);
        _HttpProvider_endpoint.set(this, void 0);
        _HttpProvider_headers.set(this, void 0);
        _HttpProvider_stats.set(this, void 0);
        if (!/^(https|http):\/\//.test(endpoint)) {
            throw new Error(`Endpoint should start with 'http://' or 'https://', received '${endpoint}'`);
        }
        __classPrivateFieldSet(this, _HttpProvider_coder, new RpcCoder(), "f");
        __classPrivateFieldSet(this, _HttpProvider_endpoint, endpoint, "f");
        __classPrivateFieldSet(this, _HttpProvider_headers, headers, "f");
        __classPrivateFieldSet(this, _HttpProvider_stats, {
            active: { requests: 0, subscriptions: 0 },
            total: { bytesRecv: 0, bytesSent: 0, cached: 0, errors: 0, requests: 0, subscriptions: 0, timeout: 0 }
        }, "f");
    }
    /**
     * @summary `true` when this provider supports subscriptions
     */
    get hasSubscriptions() {
        return false;
    }
    /**
     * @description Returns a clone of the object
     */
    clone() {
        return new HttpProvider(__classPrivateFieldGet(this, _HttpProvider_endpoint, "f"), __classPrivateFieldGet(this, _HttpProvider_headers, "f"));
    }
    /**
     * @description Manually connect from the connection
     */
    async connect() {
        // noop
    }
    /**
     * @description Manually disconnect from the connection
     */
    async disconnect() {
        // noop
    }
    /**
     * @description Returns the connection stats
     */
    get stats() {
        return __classPrivateFieldGet(this, _HttpProvider_stats, "f");
    }
    /**
     * @summary `true` when this provider supports clone()
     */
    get isClonable() {
        return true;
    }
    /**
     * @summary Whether the node is connected or not.
     * @return {boolean} true if connected
     */
    get isConnected() {
        return true;
    }
    /**
     * @summary Events are not supported with the HttpProvider, see [[WsProvider]].
     * @description HTTP Provider does not have 'on' emitters. WebSockets should be used instead.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    on(type, sub) {
        l$d.error('HTTP Provider does not have \'on\' emitters, use WebSockets instead');
        return () => {
            // noop
        };
    }
    /**
     * @summary Send HTTP POST Request with Body to configured HTTP Endpoint.
     */
    async send(method, params, isCacheable) {
        __classPrivateFieldGet(this, _HttpProvider_stats, "f").total.requests++;
        const [, body] = __classPrivateFieldGet(this, _HttpProvider_coder, "f").encodeJson(method, params);
        let resultPromise = isCacheable
            ? __classPrivateFieldGet(this, _HttpProvider_callCache, "f").get(body)
            : null;
        if (!resultPromise) {
            resultPromise = __classPrivateFieldGet(this, _HttpProvider_instances, "m", _HttpProvider_send).call(this, body);
            if (isCacheable) {
                __classPrivateFieldGet(this, _HttpProvider_callCache, "f").set(body, resultPromise);
            }
        }
        else {
            __classPrivateFieldGet(this, _HttpProvider_stats, "f").total.cached++;
        }
        return resultPromise;
    }
    /**
     * @summary Subscriptions are not supported with the HttpProvider, see [[WsProvider]].
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars,@typescript-eslint/require-await
    async subscribe(types, method, params, cb) {
        l$d.error(ERROR_SUBSCRIBE);
        throw new Error(ERROR_SUBSCRIBE);
    }
    /**
     * @summary Subscriptions are not supported with the HttpProvider, see [[WsProvider]].
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars,@typescript-eslint/require-await
    async unsubscribe(type, method, id) {
        l$d.error(ERROR_SUBSCRIBE);
        throw new Error(ERROR_SUBSCRIBE);
    }
}
_HttpProvider_callCache = new WeakMap(), _HttpProvider_coder = new WeakMap(), _HttpProvider_endpoint = new WeakMap(), _HttpProvider_headers = new WeakMap(), _HttpProvider_stats = new WeakMap(), _HttpProvider_instances = new WeakSet(), _HttpProvider_send = async function _HttpProvider_send(body) {
    __classPrivateFieldGet(this, _HttpProvider_stats, "f").active.requests++;
    __classPrivateFieldGet(this, _HttpProvider_stats, "f").total.bytesSent += body.length;
    try {
        const response = await fetch(__classPrivateFieldGet(this, _HttpProvider_endpoint, "f"), {
            body,
            headers: {
                Accept: 'application/json',
                'Content-Length': `${body.length}`,
                'Content-Type': 'application/json',
                ...__classPrivateFieldGet(this, _HttpProvider_headers, "f")
            },
            method: 'POST'
        });
        if (!response.ok) {
            throw new Error(`[${response.status}]: ${response.statusText}`);
        }
        const result = await response.text();
        __classPrivateFieldGet(this, _HttpProvider_stats, "f").total.bytesRecv += result.length;
        const decoded = __classPrivateFieldGet(this, _HttpProvider_coder, "f").decodeResponse(JSON.parse(result));
        __classPrivateFieldGet(this, _HttpProvider_stats, "f").active.requests--;
        return decoded;
    }
    catch (e) {
        __classPrivateFieldGet(this, _HttpProvider_stats, "f").active.requests--;
        __classPrivateFieldGet(this, _HttpProvider_stats, "f").total.errors++;
        throw e;
    }
};

var eventemitter3 = {exports: {}};

(function (module) {

var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */
function Events() {}

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
}

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */
function addListener(emitter, event, fn, context, once) {
  if (typeof fn !== 'function') {
    throw new TypeError('The listener must be a function');
  }

  var listener = new EE(fn, context || emitter, once)
    , evt = prefix ? prefix + event : event;

  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  else emitter._events[evt] = [emitter._events[evt], listener];

  return emitter;
}

/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */
function clearEvent(emitter, evt) {
  if (--emitter._eventsCount === 0) emitter._events = new Events();
  else delete emitter._events[evt];
}

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  var evt = prefix ? prefix + event : event
    , handlers = this._events[evt];

  if (!handlers) return [];
  if (handlers.fn) return [handlers.fn];

  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    ee[i] = handlers[i].fn;
  }

  return ee;
};

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */
EventEmitter.prototype.listenerCount = function listenerCount(event) {
  var evt = prefix ? prefix + event : event
    , listeners = this._events[evt];

  if (!listeners) return 0;
  if (listeners.fn) return 1;
  return listeners.length;
};

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  return addListener(this, event, fn, context, false);
};

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  return addListener(this, event, fn, context, true);
};

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    clearEvent(this, evt);
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
      listeners.fn === fn &&
      (!once || listeners.once) &&
      (!context || listeners.context === context)
    ) {
      clearEvent(this, evt);
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
        listeners[i].fn !== fn ||
        (once && !listeners[i].once) ||
        (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else clearEvent(this, evt);
  }

  return this;
};

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) clearEvent(this, evt);
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
{
  module.exports = EventEmitter;
}
}(eventemitter3));

var EventEmitter = eventemitter3.exports;

var _InnerChecker_healthCallback, _InnerChecker_currentHealthCheckId, _InnerChecker_currentHealthTimeout, _InnerChecker_currentSubunsubRequestId, _InnerChecker_currentSubscriptionId, _InnerChecker_requestToSmoldot, _InnerChecker_isSyncing, _InnerChecker_nextRequestId;
/*
 * Creates a new health checker.
 *
 * The role of the health checker is to report to the user the health of a smoldot chain.
 *
 * In order to use it, start by creating a health checker, and call `setSendJsonRpc` to set the
 * way to send a JSON-RPC request to a chain. The health checker is disabled by default. Use
 * `start()` in order to start the health checks. The `start()` function must be passed a callback called
 * when an update to the health of the node is available.
 *
 * In order to send a JSON-RPC request to the chain, you **must** use the `sendJsonRpc` function
 * of the health checker. The health checker rewrites the `id` of the requests it receives.
 *
 * When the chain send a JSON-RPC response, it must be passed to `responsePassThrough()`. This
 * function intercepts the responses destined to the requests that have been emitted by the health
 * checker and returns `null`. If the response doesn't concern the health checker, the response is
 * simply returned by the function.
 *
 * # How it works
 *
 * The health checker periodically calls the `system_health` JSON-RPC call in order to determine
 * the health of the chain.
 *
 * In addition to this, as long as the health check reports that `isSyncing` is `true`, the
 * health checker also maintains a subscription to new best blocks using `chain_subscribeNewHeads`.
 * Whenever a new block is notified, a health check is performed immediately in order to determine
 * whether `isSyncing` has changed to `false`.
 *
 * Thanks to this subscription, the latency of the report of the switch from `isSyncing: true` to
 * `isSyncing: false` is very low.
 *
 */
function healthChecker() {
    // `null` if health checker is not started.
    let checker = null;
    let sendJsonRpc = null;
    return {
        responsePassThrough: (jsonRpcResponse) => {
            if (checker === null) {
                return jsonRpcResponse;
            }
            return checker.responsePassThrough(jsonRpcResponse);
        },
        sendJsonRpc: (request) => {
            if (!sendJsonRpc) {
                throw new Error('setSendJsonRpc must be called before sending requests');
            }
            if (checker === null) {
                sendJsonRpc(request);
            }
            else {
                checker.sendJsonRpc(request);
            }
        },
        setSendJsonRpc: (cb) => {
            sendJsonRpc = cb;
        },
        start: (healthCallback) => {
            if (checker !== null) {
                throw new Error("Can't start the health checker multiple times in parallel");
            }
            else if (!sendJsonRpc) {
                throw new Error('setSendJsonRpc must be called before starting the health checks');
            }
            checker = new InnerChecker(healthCallback, sendJsonRpc);
            checker.update(true);
        },
        stop: () => {
            if (checker === null) {
                return;
            } // Already stopped.
            checker.destroy();
            checker = null;
        }
    };
}
class InnerChecker {
    constructor(healthCallback, requestToSmoldot) {
        _InnerChecker_healthCallback.set(this, void 0);
        _InnerChecker_currentHealthCheckId.set(this, null);
        _InnerChecker_currentHealthTimeout.set(this, null);
        _InnerChecker_currentSubunsubRequestId.set(this, null);
        _InnerChecker_currentSubscriptionId.set(this, null);
        _InnerChecker_requestToSmoldot.set(this, void 0);
        _InnerChecker_isSyncing.set(this, false);
        _InnerChecker_nextRequestId.set(this, 0);
        this.sendJsonRpc = (request) => {
            // Replace the `id` in the request to prefix the request ID with `extern:`.
            let parsedRequest;
            try {
                parsedRequest = JSON.parse(request);
            }
            catch (err) {
                return;
            }
            if (parsedRequest.id) {
                const newId = 'extern:' + stringify(parsedRequest.id);
                parsedRequest.id = newId;
            }
            __classPrivateFieldGet(this, _InnerChecker_requestToSmoldot, "f").call(this, parsedRequest);
        };
        this.responsePassThrough = (jsonRpcResponse) => {
            let parsedResponse;
            try {
                parsedResponse = JSON.parse(jsonRpcResponse);
            }
            catch (err) {
                return jsonRpcResponse;
            }
            // Check whether response is a response to `system_health`.
            if (parsedResponse.id && __classPrivateFieldGet(this, _InnerChecker_currentHealthCheckId, "f") === parsedResponse.id) {
                __classPrivateFieldSet(this, _InnerChecker_currentHealthCheckId, null, "f");
                // Check whether query was successful. It is possible for queries to fail for
                // various reasons, such as the client being overloaded.
                if (!parsedResponse.result) {
                    this.update(false);
                    return null;
                }
                __classPrivateFieldGet(this, _InnerChecker_healthCallback, "f").call(this, parsedResponse.result);
                __classPrivateFieldSet(this, _InnerChecker_isSyncing, parsedResponse.result.isSyncing, "f");
                this.update(false);
                return null;
            }
            // Check whether response is a response to the subscription or unsubscription.
            if (parsedResponse.id &&
                __classPrivateFieldGet(this, _InnerChecker_currentSubunsubRequestId, "f") === parsedResponse.id) {
                __classPrivateFieldSet(this, _InnerChecker_currentSubunsubRequestId, null, "f");
                // Check whether query was successful. It is possible for queries to fail for
                // various reasons, such as the client being overloaded.
                if (!parsedResponse.result) {
                    this.update(false);
                    return null;
                }
                if (__classPrivateFieldGet(this, _InnerChecker_currentSubscriptionId, "f")) {
                    __classPrivateFieldSet(this, _InnerChecker_currentSubscriptionId, null, "f");
                }
                else {
                    __classPrivateFieldSet(this, _InnerChecker_currentSubscriptionId, parsedResponse.result, "f");
                }
                this.update(false);
                return null;
            }
            // Check whether response is a notification to a subscription.
            if (parsedResponse.params &&
                __classPrivateFieldGet(this, _InnerChecker_currentSubscriptionId, "f") &&
                parsedResponse.params.subscription === __classPrivateFieldGet(this, _InnerChecker_currentSubscriptionId, "f")) {
                // Note that after a successful subscription, a notification containing
                // the current best block is always returned. Considering that a
                // subscription is performed in response to a health check, calling
                // `startHealthCheck()` here will lead to a second health check.
                // It might seem redundant to perform two health checks in a quick
                // succession, but doing so doesn't lead to any problem, and it is
                // actually possible for the health to have changed in between as the
                // current best block might have been updated during the subscription
                // request.
                this.update(true);
                return null;
            }
            // Response doesn't concern us.
            if (parsedResponse.id) {
                const id = parsedResponse.id;
                // Need to remove the `extern:` prefix.
                if (!id.startsWith('extern:')) {
                    throw new Error('State inconsistency in health checker');
                }
                const newId = JSON.parse(id.slice('extern:'.length));
                parsedResponse.id = newId;
            }
            return stringify(parsedResponse);
        };
        this.update = (startNow) => {
            // If `startNow`, clear `#currentHealthTimeout` so that it is set below.
            if (startNow && __classPrivateFieldGet(this, _InnerChecker_currentHealthTimeout, "f")) {
                clearTimeout(__classPrivateFieldGet(this, _InnerChecker_currentHealthTimeout, "f"));
                __classPrivateFieldSet(this, _InnerChecker_currentHealthTimeout, null, "f");
            }
            if (!__classPrivateFieldGet(this, _InnerChecker_currentHealthTimeout, "f")) {
                const startHealthRequest = () => {
                    __classPrivateFieldSet(this, _InnerChecker_currentHealthTimeout, null, "f");
                    // No matter what, don't start a health request if there is already one in progress.
                    // This is sane to do because receiving a response to a health request calls `update()`.
                    if (__classPrivateFieldGet(this, _InnerChecker_currentHealthCheckId, "f")) {
                        return;
                    }
                    // Actual request starting.
                    __classPrivateFieldSet(this, _InnerChecker_currentHealthCheckId, `health-checker:${__classPrivateFieldGet(this, _InnerChecker_nextRequestId, "f")}`, "f");
                    __classPrivateFieldSet(this, _InnerChecker_nextRequestId, __classPrivateFieldGet(this, _InnerChecker_nextRequestId, "f") + 1, "f");
                    __classPrivateFieldGet(this, _InnerChecker_requestToSmoldot, "f").call(this, {
                        id: __classPrivateFieldGet(this, _InnerChecker_currentHealthCheckId, "f"),
                        jsonrpc: '2.0',
                        method: 'system_health',
                        params: []
                    });
                };
                if (startNow) {
                    startHealthRequest();
                }
                else {
                    __classPrivateFieldSet(this, _InnerChecker_currentHealthTimeout, setTimeout(startHealthRequest, 1000), "f");
                }
            }
            if (__classPrivateFieldGet(this, _InnerChecker_isSyncing, "f") &&
                !__classPrivateFieldGet(this, _InnerChecker_currentSubscriptionId, "f") &&
                !__classPrivateFieldGet(this, _InnerChecker_currentSubunsubRequestId, "f")) {
                this.startSubscription();
            }
            if (!__classPrivateFieldGet(this, _InnerChecker_isSyncing, "f") &&
                __classPrivateFieldGet(this, _InnerChecker_currentSubscriptionId, "f") &&
                !__classPrivateFieldGet(this, _InnerChecker_currentSubunsubRequestId, "f")) {
                this.endSubscription();
            }
        };
        this.startSubscription = () => {
            if (__classPrivateFieldGet(this, _InnerChecker_currentSubunsubRequestId, "f") || __classPrivateFieldGet(this, _InnerChecker_currentSubscriptionId, "f")) {
                throw new Error('Internal error in health checker');
            }
            __classPrivateFieldSet(this, _InnerChecker_currentSubunsubRequestId, `health-checker:${__classPrivateFieldGet(this, _InnerChecker_nextRequestId, "f")}`, "f");
            __classPrivateFieldSet(this, _InnerChecker_nextRequestId, __classPrivateFieldGet(this, _InnerChecker_nextRequestId, "f") + 1, "f");
            __classPrivateFieldGet(this, _InnerChecker_requestToSmoldot, "f").call(this, {
                id: __classPrivateFieldGet(this, _InnerChecker_currentSubunsubRequestId, "f"),
                jsonrpc: '2.0',
                method: 'chain_subscribeNewHeads',
                params: []
            });
        };
        this.endSubscription = () => {
            if (__classPrivateFieldGet(this, _InnerChecker_currentSubunsubRequestId, "f") || !__classPrivateFieldGet(this, _InnerChecker_currentSubscriptionId, "f")) {
                throw new Error('Internal error in health checker');
            }
            __classPrivateFieldSet(this, _InnerChecker_currentSubunsubRequestId, `health-checker:${__classPrivateFieldGet(this, _InnerChecker_nextRequestId, "f")}`, "f");
            __classPrivateFieldSet(this, _InnerChecker_nextRequestId, __classPrivateFieldGet(this, _InnerChecker_nextRequestId, "f") + 1, "f");
            __classPrivateFieldGet(this, _InnerChecker_requestToSmoldot, "f").call(this, {
                id: __classPrivateFieldGet(this, _InnerChecker_currentSubunsubRequestId, "f"),
                jsonrpc: '2.0',
                method: 'chain_unsubscribeNewHeads',
                params: [__classPrivateFieldGet(this, _InnerChecker_currentSubscriptionId, "f")]
            });
        };
        this.destroy = () => {
            if (__classPrivateFieldGet(this, _InnerChecker_currentHealthTimeout, "f")) {
                clearTimeout(__classPrivateFieldGet(this, _InnerChecker_currentHealthTimeout, "f"));
                __classPrivateFieldSet(this, _InnerChecker_currentHealthTimeout, null, "f");
            }
        };
        __classPrivateFieldSet(this, _InnerChecker_healthCallback, healthCallback, "f");
        __classPrivateFieldSet(this, _InnerChecker_requestToSmoldot, (request) => requestToSmoldot(stringify(request)), "f");
    }
}
_InnerChecker_healthCallback = new WeakMap(), _InnerChecker_currentHealthCheckId = new WeakMap(), _InnerChecker_currentHealthTimeout = new WeakMap(), _InnerChecker_currentSubunsubRequestId = new WeakMap(), _InnerChecker_currentSubscriptionId = new WeakMap(), _InnerChecker_requestToSmoldot = new WeakMap(), _InnerChecker_isSyncing = new WeakMap(), _InnerChecker_nextRequestId = new WeakMap();

var _ScProvider_Sc, _ScProvider_coder, _ScProvider_spec, _ScProvider_sharedSandbox, _ScProvider_subscriptions, _ScProvider_resubscribeMethods, _ScProvider_requests, _ScProvider_wellKnownChains, _ScProvider_eventemitter, _ScProvider_chain, _ScProvider_isChainReady, _ScProvider_resubscribe;
const l$c = logger('api-substrate-connect');
const subscriptionUnsubscriptionMethods = new Map([
    ['author_submitAndWatchExtrinsic', 'author_unwatchExtrinsic'],
    ['chain_subscribeAllHeads', 'chain_unsubscribeAllHeads'],
    ['chain_subscribeFinalizedHeads', 'chain_unsubscribeFinalizedHeads'],
    ['chain_subscribeFinalisedHeads', 'chain_subscribeFinalisedHeads'],
    ['chain_subscribeNewHeads', 'chain_unsubscribeNewHeads'],
    ['chain_subscribeNewHead', 'chain_unsubscribeNewHead'],
    ['chain_subscribeRuntimeVersion', 'chain_unsubscribeRuntimeVersion'],
    ['subscribe_newHead', 'unsubscribe_newHead'],
    ['state_subscribeRuntimeVersion', 'state_unsubscribeRuntimeVersion'],
    ['state_subscribeStorage', 'state_unsubscribeStorage']
]);
const scClients = new WeakMap();
class ScProvider {
    constructor(Sc, spec, sharedSandbox) {
        _ScProvider_Sc.set(this, void 0);
        _ScProvider_coder.set(this, new RpcCoder());
        _ScProvider_spec.set(this, void 0);
        _ScProvider_sharedSandbox.set(this, void 0);
        _ScProvider_subscriptions.set(this, new Map());
        _ScProvider_resubscribeMethods.set(this, new Map());
        _ScProvider_requests.set(this, new Map());
        _ScProvider_wellKnownChains.set(this, void 0);
        _ScProvider_eventemitter.set(this, new EventEmitter());
        _ScProvider_chain.set(this, null);
        _ScProvider_isChainReady.set(this, false);
        _ScProvider_resubscribe.set(this, () => {
            const promises = [];
            __classPrivateFieldGet(this, _ScProvider_resubscribeMethods, "f").forEach((subDetails) => {
                // only re-create subscriptions which are not in author (only area where
                // transactions are created, i.e. submissions such as 'author_submitAndWatchExtrinsic'
                // are not included (and will not be re-broadcast)
                if (subDetails.type.startsWith('author_')) {
                    return;
                }
                try {
                    const promise = new Promise((resolve) => {
                        this.subscribe(subDetails.type, subDetails.method, subDetails.params, subDetails.callback).catch((error) => console.log(error));
                        resolve();
                    });
                    promises.push(promise);
                }
                catch (error) {
                    l$c.error(error);
                }
            });
            Promise.all(promises).catch((err) => l$c.log(err));
        });
        if (!isObject(Sc) || !isObject(Sc.WellKnownChain) || !isFunction$1(Sc.createScClient)) {
            throw new Error('Expected an @substrate/connect interface as first parameter to ScProvider');
        }
        __classPrivateFieldSet(this, _ScProvider_Sc, Sc, "f");
        __classPrivateFieldSet(this, _ScProvider_spec, spec, "f");
        __classPrivateFieldSet(this, _ScProvider_sharedSandbox, sharedSandbox, "f");
        __classPrivateFieldSet(this, _ScProvider_wellKnownChains, new Set(Object.values(Sc.WellKnownChain)), "f");
    }
    get hasSubscriptions() {
        // Indicates that subscriptions are supported
        return true;
    }
    get isClonable() {
        return false;
    }
    get isConnected() {
        return !!__classPrivateFieldGet(this, _ScProvider_chain, "f") && __classPrivateFieldGet(this, _ScProvider_isChainReady, "f");
    }
    clone() {
        throw new Error('clone() is not supported.');
    }
    // Config details can be found in @substrate/connect repo following the link:
    // https://github.com/paritytech/substrate-connect/blob/main/packages/connect/src/connector/index.ts
    async connect(config, checkerFactory = healthChecker) {
        if (this.isConnected) {
            throw new Error('Already connected!');
        }
        // it could happen that after emitting `disconnected` due to the fact taht
        // smoldot is syncing, the consumer tries to reconnect after a certain amount
        // of time... In which case we want to make sure that we don't create a new
        // chain.
        if (__classPrivateFieldGet(this, _ScProvider_chain, "f")) {
            await __classPrivateFieldGet(this, _ScProvider_chain, "f");
            return;
        }
        if (__classPrivateFieldGet(this, _ScProvider_sharedSandbox, "f") && !__classPrivateFieldGet(this, _ScProvider_sharedSandbox, "f").isConnected) {
            await __classPrivateFieldGet(this, _ScProvider_sharedSandbox, "f").connect();
        }
        const client = __classPrivateFieldGet(this, _ScProvider_sharedSandbox, "f")
            ? scClients.get(__classPrivateFieldGet(this, _ScProvider_sharedSandbox, "f"))
            : __classPrivateFieldGet(this, _ScProvider_Sc, "f").createScClient(config);
        if (!client) {
            throw new Error('Unkown ScProvider!');
        }
        scClients.set(this, client);
        const hc = checkerFactory();
        const onResponse = (res) => {
            const hcRes = hc.responsePassThrough(res);
            if (!hcRes) {
                return;
            }
            const response = JSON.parse(hcRes);
            let decodedResponse;
            try {
                decodedResponse = __classPrivateFieldGet(this, _ScProvider_coder, "f").decodeResponse(response);
            }
            catch (e) {
                decodedResponse = e;
            }
            // It's not a subscription message, but rather a standar RPC response
            if (response.params?.subscription === undefined || !response.method) {
                return __classPrivateFieldGet(this, _ScProvider_requests, "f").get(response.id)?.(decodedResponse);
            }
            // We are dealing with a subscription message
            const subscriptionId = `${response.method}::${response.params.subscription}`;
            const callback = __classPrivateFieldGet(this, _ScProvider_subscriptions, "f").get(subscriptionId)?.[0];
            callback?.(decodedResponse);
        };
        const addChain = __classPrivateFieldGet(this, _ScProvider_wellKnownChains, "f").has(__classPrivateFieldGet(this, _ScProvider_spec, "f"))
            ? client.addWellKnownChain
            : client.addChain;
        __classPrivateFieldSet(this, _ScProvider_chain, addChain(__classPrivateFieldGet(this, _ScProvider_spec, "f"), onResponse).then((chain) => {
            hc.setSendJsonRpc(chain.sendJsonRpc);
            __classPrivateFieldSet(this, _ScProvider_isChainReady, false, "f");
            const cleanup = () => {
                // If there are any callbacks left, we have to reject/error them.
                // Otherwise, that would cause a memory leak.
                const disconnectionError = new Error('Disconnected');
                __classPrivateFieldGet(this, _ScProvider_requests, "f").forEach((cb) => cb(disconnectionError));
                __classPrivateFieldGet(this, _ScProvider_subscriptions, "f").forEach(([cb]) => cb(disconnectionError));
                __classPrivateFieldGet(this, _ScProvider_subscriptions, "f").clear();
            };
            const staleSubscriptions = [];
            const killStaleSubscriptions = () => {
                if (staleSubscriptions.length === 0) {
                    return;
                }
                const stale = staleSubscriptions.pop();
                if (!stale) {
                    throw new Error('Unable to get stale subscription');
                }
                const { id, unsubscribeMethod } = stale;
                Promise
                    .race([
                    this.send(unsubscribeMethod, [id]).catch(() => undefined),
                    new Promise((resolve) => setTimeout(resolve, 500))
                ])
                    .then(killStaleSubscriptions)
                    .catch(() => undefined);
            };
            hc.start((health) => {
                const isReady = !health.isSyncing && (health.peers > 0 || !health.shouldHavePeers);
                // if it's the same as before, then nothing has changed and we are done
                if (__classPrivateFieldGet(this, _ScProvider_isChainReady, "f") === isReady) {
                    return;
                }
                __classPrivateFieldSet(this, _ScProvider_isChainReady, isReady, "f");
                if (!isReady) {
                    // If we've reached this point, that means that the chain used to be "ready"
                    // and now we are about to emit `disconnected`.
                    //
                    // This will cause the PolkadotJs API think that the connection is
                    // actually dead. In reality the smoldot chain is not dead, of course.
                    // However, we have to cleanup all the existing callbacks because when
                    // the smoldot chain stops syncing, then we will emit `connected` and
                    // the PolkadotJs API will try to re-create the previous
                    // subscriptions and requests. Although, now is not a good moment
                    // to be sending unsubscription messages to the smoldot chain, we
                    // should wait until is no longer syncing to send the unsubscription
                    // messages from the stale subscriptions of the previous connection.
                    //
                    // That's why -before we perform the cleanup of `this.#subscriptions`-
                    // we keep the necessary information that we will need later on to
                    // kill the stale subscriptions.
                    [...__classPrivateFieldGet(this, _ScProvider_subscriptions, "f").values()].forEach((s) => {
                        staleSubscriptions.push(s[1]);
                    });
                    cleanup();
                    __classPrivateFieldGet(this, _ScProvider_eventemitter, "f").emit('disconnected');
                }
                else {
                    killStaleSubscriptions();
                    __classPrivateFieldGet(this, _ScProvider_eventemitter, "f").emit('connected');
                    if (__classPrivateFieldGet(this, _ScProvider_resubscribeMethods, "f").size) {
                        __classPrivateFieldGet(this, _ScProvider_resubscribe, "f").call(this);
                    }
                }
            });
            return objectSpread({}, chain, {
                remove: () => {
                    hc.stop();
                    chain.remove();
                    cleanup();
                },
                sendJsonRpc: hc.sendJsonRpc.bind(hc)
            });
        }), "f");
        try {
            await __classPrivateFieldGet(this, _ScProvider_chain, "f");
        }
        catch (e) {
            __classPrivateFieldSet(this, _ScProvider_chain, null, "f");
            __classPrivateFieldGet(this, _ScProvider_eventemitter, "f").emit('error', e);
            throw e;
        }
    }
    async disconnect() {
        if (!__classPrivateFieldGet(this, _ScProvider_chain, "f")) {
            return;
        }
        const chain = await __classPrivateFieldGet(this, _ScProvider_chain, "f");
        __classPrivateFieldSet(this, _ScProvider_chain, null, "f");
        __classPrivateFieldSet(this, _ScProvider_isChainReady, false, "f");
        try {
            chain.remove();
        }
        catch (_) { }
        __classPrivateFieldGet(this, _ScProvider_eventemitter, "f").emit('disconnected');
    }
    on(type, sub) {
        // It's possible. Although, quite unlikely, that by the time that polkadot
        // subscribes to the `connected` event, the Provider is already connected.
        // In that case, we must emit to let the consumer know that we are connected.
        if (type === 'connected' && this.isConnected) {
            sub();
        }
        __classPrivateFieldGet(this, _ScProvider_eventemitter, "f").on(type, sub);
        return () => {
            __classPrivateFieldGet(this, _ScProvider_eventemitter, "f").removeListener(type, sub);
        };
    }
    async send(method, params) {
        if (!this.isConnected || !__classPrivateFieldGet(this, _ScProvider_chain, "f")) {
            throw new Error('Provider is not connected');
        }
        const chain = await __classPrivateFieldGet(this, _ScProvider_chain, "f");
        const [id, json] = __classPrivateFieldGet(this, _ScProvider_coder, "f").encodeJson(method, params);
        const result = new Promise((resolve, reject) => {
            __classPrivateFieldGet(this, _ScProvider_requests, "f").set(id, (response) => {
                (isError(response) ? reject : resolve)(response);
            });
            try {
                chain.sendJsonRpc(json);
            }
            catch (e) {
                __classPrivateFieldSet(this, _ScProvider_chain, null, "f");
                try {
                    chain.remove();
                }
                catch (_) { }
                __classPrivateFieldGet(this, _ScProvider_eventemitter, "f").emit('error', e);
            }
        });
        try {
            return await result;
        }
        finally {
            // let's ensure that once the Promise is resolved/rejected, then we remove
            // remove its entry from the internal #requests
            __classPrivateFieldGet(this, _ScProvider_requests, "f").delete(id);
        }
    }
    async subscribe(type, method, params, callback) {
        if (!subscriptionUnsubscriptionMethods.has(method)) {
            throw new Error(`Unsupported subscribe method: ${method}`);
        }
        const id = await this.send(method, params);
        const subscriptionId = `${type}::${id}`;
        const cb = (response) => {
            if (response instanceof Error) {
                callback(response, undefined);
            }
            else {
                callback(null, response);
            }
        };
        const unsubscribeMethod = subscriptionUnsubscriptionMethods.get(method);
        if (!unsubscribeMethod) {
            throw new Error('Invalid unsubscribe method found');
        }
        __classPrivateFieldGet(this, _ScProvider_resubscribeMethods, "f").set(subscriptionId, { callback, method, params, type });
        __classPrivateFieldGet(this, _ScProvider_subscriptions, "f").set(subscriptionId, [cb, { id, unsubscribeMethod }]);
        return id;
    }
    unsubscribe(type, method, id) {
        if (!this.isConnected) {
            throw new Error('Provider is not connected');
        }
        const subscriptionId = `${type}::${id}`;
        if (!__classPrivateFieldGet(this, _ScProvider_subscriptions, "f").has(subscriptionId)) {
            return Promise.reject(new Error(`Unable to find active subscription=${subscriptionId}`));
        }
        __classPrivateFieldGet(this, _ScProvider_resubscribeMethods, "f").delete(subscriptionId);
        __classPrivateFieldGet(this, _ScProvider_subscriptions, "f").delete(subscriptionId);
        return this.send(method, [id]);
    }
}
_ScProvider_Sc = new WeakMap(), _ScProvider_coder = new WeakMap(), _ScProvider_spec = new WeakMap(), _ScProvider_sharedSandbox = new WeakMap(), _ScProvider_subscriptions = new WeakMap(), _ScProvider_resubscribeMethods = new WeakMap(), _ScProvider_requests = new WeakMap(), _ScProvider_wellKnownChains = new WeakMap(), _ScProvider_eventemitter = new WeakMap(), _ScProvider_chain = new WeakMap(), _ScProvider_isChainReady = new WeakMap(), _ScProvider_resubscribe = new WeakMap();

const WebSocket = xglobal.WebSocket;

const known = {
    1000: 'Normal Closure',
    1001: 'Going Away',
    1002: 'Protocol Error',
    1003: 'Unsupported Data',
    1004: '(For future)',
    1005: 'No Status Received',
    1006: 'Abnormal Closure',
    1007: 'Invalid frame payload data',
    1008: 'Policy Violation',
    1009: 'Message too big',
    1010: 'Missing Extension',
    1011: 'Internal Error',
    1012: 'Service Restart',
    1013: 'Try Again Later',
    1014: 'Bad Gateway',
    1015: 'TLS Handshake'
};
function getWSErrorString(code) {
    if (code >= 0 && code <= 999) {
        return '(Unused)';
    }
    else if (code >= 1016) {
        if (code <= 1999) {
            return '(For WebSocket standard)';
        }
        else if (code <= 2999) {
            return '(For WebSocket extensions)';
        }
        else if (code <= 3999) {
            return '(For libraries and frameworks)';
        }
        else if (code <= 4999) {
            return '(For applications)';
        }
    }
    return known[code] || '(Unknown)';
}

var _WsProvider_instances, _WsProvider_callCache, _WsProvider_coder, _WsProvider_endpoints, _WsProvider_headers, _WsProvider_eventemitter, _WsProvider_handlers, _WsProvider_isReadyPromise, _WsProvider_stats, _WsProvider_waitingForId, _WsProvider_autoConnectMs, _WsProvider_endpointIndex, _WsProvider_endpointStats, _WsProvider_isConnected, _WsProvider_subscriptions, _WsProvider_timeoutId, _WsProvider_websocket, _WsProvider_timeout, _WsProvider_send, _WsProvider_emit, _WsProvider_onSocketClose, _WsProvider_onSocketError, _WsProvider_onSocketMessage, _WsProvider_onSocketMessageResult, _WsProvider_onSocketMessageSubscribe, _WsProvider_onSocketOpen, _WsProvider_resubscribe, _WsProvider_timeoutHandlers;
const ALIASES = {
    chain_finalisedHead: 'chain_finalizedHead',
    chain_subscribeFinalisedHeads: 'chain_subscribeFinalizedHeads',
    chain_unsubscribeFinalisedHeads: 'chain_unsubscribeFinalizedHeads'
};
const RETRY_DELAY = 2500;
const DEFAULT_TIMEOUT_MS = 60 * 1000;
const TIMEOUT_INTERVAL = 5000;
const l$b = logger('api-ws');
/** @internal Clears a Record<*> of all keys, optionally with all callback on clear */
function eraseRecord(record, cb) {
    Object.keys(record).forEach((key) => {
        if (cb) {
            cb(record[key]);
        }
        delete record[key];
    });
}
/** @internal Creates a default/empty stats object */
function defaultEndpointStats() {
    return { bytesRecv: 0, bytesSent: 0, cached: 0, errors: 0, requests: 0, subscriptions: 0, timeout: 0 };
}
/**
 * # @polkadot/rpc-provider/ws
 *
 * @name WsProvider
 *
 * @description The WebSocket Provider allows sending requests using WebSocket to a WebSocket RPC server TCP port. Unlike the [[HttpProvider]], it does support subscriptions and allows listening to events such as new blocks or balance changes.
 *
 * @example
 * <BR>
 *
 * ```javascript
 * import Api from '@polkadot/api/promise';
 * import { WsProvider } from '@polkadot/rpc-provider/ws';
 *
 * const provider = new WsProvider('ws://127.0.0.1:9944');
 * const api = new Api(provider);
 * ```
 *
 * @see [[HttpProvider]]
 */
class WsProvider {
    /**
     * @param {string | string[]}  endpoint    The endpoint url. Usually `ws://ip:9944` or `wss://ip:9944`, may provide an array of endpoint strings.
     * @param {number | false} autoConnectMs Whether to connect automatically or not (default). Provided value is used as a delay between retries.
     * @param {Record<string, string>} headers The headers provided to the underlying WebSocket
     * @param {number} [timeout] Custom timeout value used per request . Defaults to `DEFAULT_TIMEOUT_MS`
     */
    constructor(endpoint = defaults.WS_URL, autoConnectMs = RETRY_DELAY, headers = {}, timeout) {
        _WsProvider_instances.add(this);
        _WsProvider_callCache.set(this, new LRUCache());
        _WsProvider_coder.set(this, void 0);
        _WsProvider_endpoints.set(this, void 0);
        _WsProvider_headers.set(this, void 0);
        _WsProvider_eventemitter.set(this, void 0);
        _WsProvider_handlers.set(this, {});
        _WsProvider_isReadyPromise.set(this, void 0);
        _WsProvider_stats.set(this, void 0);
        _WsProvider_waitingForId.set(this, {});
        _WsProvider_autoConnectMs.set(this, void 0);
        _WsProvider_endpointIndex.set(this, void 0);
        _WsProvider_endpointStats.set(this, void 0);
        _WsProvider_isConnected.set(this, false);
        _WsProvider_subscriptions.set(this, {});
        _WsProvider_timeoutId.set(this, null);
        _WsProvider_websocket.set(this, void 0);
        _WsProvider_timeout.set(this, void 0);
        _WsProvider_emit.set(this, (type, ...args) => {
            __classPrivateFieldGet(this, _WsProvider_eventemitter, "f").emit(type, ...args);
        });
        _WsProvider_onSocketClose.set(this, (event) => {
            const error = new Error(`disconnected from ${this.endpoint}: ${event.code}:: ${event.reason || getWSErrorString(event.code)}`);
            if (__classPrivateFieldGet(this, _WsProvider_autoConnectMs, "f") > 0) {
                l$b.error(error.message);
            }
            __classPrivateFieldSet(this, _WsProvider_isConnected, false, "f");
            if (__classPrivateFieldGet(this, _WsProvider_websocket, "f")) {
                __classPrivateFieldGet(this, _WsProvider_websocket, "f").onclose = null;
                __classPrivateFieldGet(this, _WsProvider_websocket, "f").onerror = null;
                __classPrivateFieldGet(this, _WsProvider_websocket, "f").onmessage = null;
                __classPrivateFieldGet(this, _WsProvider_websocket, "f").onopen = null;
                __classPrivateFieldSet(this, _WsProvider_websocket, null, "f");
            }
            if (__classPrivateFieldGet(this, _WsProvider_timeoutId, "f")) {
                clearInterval(__classPrivateFieldGet(this, _WsProvider_timeoutId, "f"));
                __classPrivateFieldSet(this, _WsProvider_timeoutId, null, "f");
            }
            // reject all hanging requests
            eraseRecord(__classPrivateFieldGet(this, _WsProvider_handlers, "f"), (h) => {
                try {
                    h.callback(error, undefined);
                }
                catch (err) {
                    // does not throw
                    l$b.error(err);
                }
            });
            eraseRecord(__classPrivateFieldGet(this, _WsProvider_waitingForId, "f"));
            // Reset stats for active endpoint
            __classPrivateFieldSet(this, _WsProvider_endpointStats, defaultEndpointStats(), "f");
            __classPrivateFieldGet(this, _WsProvider_emit, "f").call(this, 'disconnected');
            if (__classPrivateFieldGet(this, _WsProvider_autoConnectMs, "f") > 0) {
                setTimeout(() => {
                    this.connectWithRetry().catch(() => {
                        // does not throw
                    });
                }, __classPrivateFieldGet(this, _WsProvider_autoConnectMs, "f"));
            }
        });
        _WsProvider_onSocketError.set(this, (error) => {
            l$b.debug(() => ['socket error', error]);
            __classPrivateFieldGet(this, _WsProvider_emit, "f").call(this, 'error', error);
        });
        _WsProvider_onSocketMessage.set(this, (message) => {
            l$b.debug(() => ['received', message.data]);
            __classPrivateFieldGet(this, _WsProvider_endpointStats, "f").bytesRecv += message.data.length;
            __classPrivateFieldGet(this, _WsProvider_stats, "f").total.bytesRecv += message.data.length;
            const response = JSON.parse(message.data);
            return isUndefined(response.method)
                ? __classPrivateFieldGet(this, _WsProvider_onSocketMessageResult, "f").call(this, response)
                : __classPrivateFieldGet(this, _WsProvider_onSocketMessageSubscribe, "f").call(this, response);
        });
        _WsProvider_onSocketMessageResult.set(this, (response) => {
            const handler = __classPrivateFieldGet(this, _WsProvider_handlers, "f")[response.id];
            if (!handler) {
                l$b.debug(() => `Unable to find handler for id=${response.id}`);
                return;
            }
            try {
                const { method, params, subscription } = handler;
                const result = __classPrivateFieldGet(this, _WsProvider_coder, "f").decodeResponse(response);
                // first send the result - in case of subs, we may have an update
                // immediately if we have some queued results already
                handler.callback(null, result);
                if (subscription) {
                    const subId = `${subscription.type}::${result}`;
                    __classPrivateFieldGet(this, _WsProvider_subscriptions, "f")[subId] = objectSpread({}, subscription, {
                        method,
                        params
                    });
                    // if we have a result waiting for this subscription already
                    if (__classPrivateFieldGet(this, _WsProvider_waitingForId, "f")[subId]) {
                        __classPrivateFieldGet(this, _WsProvider_onSocketMessageSubscribe, "f").call(this, __classPrivateFieldGet(this, _WsProvider_waitingForId, "f")[subId]);
                    }
                }
            }
            catch (error) {
                __classPrivateFieldGet(this, _WsProvider_endpointStats, "f").errors++;
                __classPrivateFieldGet(this, _WsProvider_stats, "f").total.errors++;
                handler.callback(error, undefined);
            }
            delete __classPrivateFieldGet(this, _WsProvider_handlers, "f")[response.id];
        });
        _WsProvider_onSocketMessageSubscribe.set(this, (response) => {
            const method = ALIASES[response.method] || response.method || 'invalid';
            const subId = `${method}::${response.params.subscription}`;
            const handler = __classPrivateFieldGet(this, _WsProvider_subscriptions, "f")[subId];
            if (!handler) {
                // store the JSON, we could have out-of-order subid coming in
                __classPrivateFieldGet(this, _WsProvider_waitingForId, "f")[subId] = response;
                l$b.debug(() => `Unable to find handler for subscription=${subId}`);
                return;
            }
            // housekeeping
            delete __classPrivateFieldGet(this, _WsProvider_waitingForId, "f")[subId];
            try {
                const result = __classPrivateFieldGet(this, _WsProvider_coder, "f").decodeResponse(response);
                handler.callback(null, result);
            }
            catch (error) {
                __classPrivateFieldGet(this, _WsProvider_endpointStats, "f").errors++;
                __classPrivateFieldGet(this, _WsProvider_stats, "f").total.errors++;
                handler.callback(error, undefined);
            }
        });
        _WsProvider_onSocketOpen.set(this, () => {
            if (__classPrivateFieldGet(this, _WsProvider_websocket, "f") === null) {
                throw new Error('WebSocket cannot be null in onOpen');
            }
            l$b.debug(() => ['connected to', this.endpoint]);
            __classPrivateFieldSet(this, _WsProvider_isConnected, true, "f");
            __classPrivateFieldGet(this, _WsProvider_resubscribe, "f").call(this);
            __classPrivateFieldGet(this, _WsProvider_emit, "f").call(this, 'connected');
            return true;
        });
        _WsProvider_resubscribe.set(this, () => {
            const subscriptions = __classPrivateFieldGet(this, _WsProvider_subscriptions, "f");
            __classPrivateFieldSet(this, _WsProvider_subscriptions, {}, "f");
            Promise.all(Object.keys(subscriptions).map(async (id) => {
                const { callback, method, params, type } = subscriptions[id];
                // only re-create subscriptions which are not in author (only area where
                // transactions are created, i.e. submissions such as 'author_submitAndWatchExtrinsic'
                // are not included (and will not be re-broadcast)
                if (type.startsWith('author_')) {
                    return;
                }
                try {
                    await this.subscribe(type, method, params, callback);
                }
                catch (error) {
                    l$b.error(error);
                }
            })).catch(l$b.error);
        });
        _WsProvider_timeoutHandlers.set(this, () => {
            const now = Date.now();
            const ids = Object.keys(__classPrivateFieldGet(this, _WsProvider_handlers, "f"));
            for (let i = 0; i < ids.length; i++) {
                const handler = __classPrivateFieldGet(this, _WsProvider_handlers, "f")[ids[i]];
                if ((now - handler.start) > __classPrivateFieldGet(this, _WsProvider_timeout, "f")) {
                    try {
                        handler.callback(new Error(`No response received from RPC endpoint in ${__classPrivateFieldGet(this, _WsProvider_timeout, "f") / 1000}s`), undefined);
                    }
                    catch {
                        // ignore
                    }
                    __classPrivateFieldGet(this, _WsProvider_endpointStats, "f").timeout++;
                    __classPrivateFieldGet(this, _WsProvider_stats, "f").total.timeout++;
                    delete __classPrivateFieldGet(this, _WsProvider_handlers, "f")[ids[i]];
                }
            }
        });
        const endpoints = Array.isArray(endpoint)
            ? endpoint
            : [endpoint];
        if (endpoints.length === 0) {
            throw new Error('WsProvider requires at least one Endpoint');
        }
        endpoints.forEach((endpoint) => {
            if (!/^(wss|ws):\/\//.test(endpoint)) {
                throw new Error(`Endpoint should start with 'ws://', received '${endpoint}'`);
            }
        });
        __classPrivateFieldSet(this, _WsProvider_eventemitter, new EventEmitter(), "f");
        __classPrivateFieldSet(this, _WsProvider_autoConnectMs, autoConnectMs || 0, "f");
        __classPrivateFieldSet(this, _WsProvider_coder, new RpcCoder(), "f");
        __classPrivateFieldSet(this, _WsProvider_endpointIndex, -1, "f");
        __classPrivateFieldSet(this, _WsProvider_endpoints, endpoints, "f");
        __classPrivateFieldSet(this, _WsProvider_headers, headers, "f");
        __classPrivateFieldSet(this, _WsProvider_websocket, null, "f");
        __classPrivateFieldSet(this, _WsProvider_stats, {
            active: { requests: 0, subscriptions: 0 },
            total: defaultEndpointStats()
        }, "f");
        __classPrivateFieldSet(this, _WsProvider_endpointStats, defaultEndpointStats(), "f");
        __classPrivateFieldSet(this, _WsProvider_timeout, timeout || DEFAULT_TIMEOUT_MS, "f");
        if (autoConnectMs > 0) {
            this.connectWithRetry().catch(() => {
                // does not throw
            });
        }
        __classPrivateFieldSet(this, _WsProvider_isReadyPromise, new Promise((resolve) => {
            __classPrivateFieldGet(this, _WsProvider_eventemitter, "f").once('connected', () => {
                resolve(this);
            });
        }), "f");
    }
    /**
     * @summary `true` when this provider supports subscriptions
     */
    get hasSubscriptions() {
        return true;
    }
    /**
     * @summary `true` when this provider supports clone()
     */
    get isClonable() {
        return true;
    }
    /**
     * @summary Whether the node is connected or not.
     * @return {boolean} true if connected
     */
    get isConnected() {
        return __classPrivateFieldGet(this, _WsProvider_isConnected, "f");
    }
    /**
     * @description Promise that resolves the first time we are connected and loaded
     */
    get isReady() {
        return __classPrivateFieldGet(this, _WsProvider_isReadyPromise, "f");
    }
    get endpoint() {
        return __classPrivateFieldGet(this, _WsProvider_endpoints, "f")[__classPrivateFieldGet(this, _WsProvider_endpointIndex, "f")];
    }
    /**
     * @description Returns a clone of the object
     */
    clone() {
        return new WsProvider(__classPrivateFieldGet(this, _WsProvider_endpoints, "f"));
    }
    selectEndpointIndex(endpoints) {
        return (__classPrivateFieldGet(this, _WsProvider_endpointIndex, "f") + 1) % endpoints.length;
    }
    /**
     * @summary Manually connect
     * @description The [[WsProvider]] connects automatically by default, however if you decided otherwise, you may
     * connect manually using this method.
     */
    // eslint-disable-next-line @typescript-eslint/require-await
    async connect() {
        if (__classPrivateFieldGet(this, _WsProvider_websocket, "f")) {
            throw new Error('WebSocket is already connected');
        }
        try {
            __classPrivateFieldSet(this, _WsProvider_endpointIndex, this.selectEndpointIndex(__classPrivateFieldGet(this, _WsProvider_endpoints, "f")), "f");
            // the as typeof WebSocket here is Deno-specific - not available on the globalThis
            __classPrivateFieldSet(this, _WsProvider_websocket, typeof xglobal.WebSocket !== 'undefined' && isChildClass(xglobal.WebSocket, WebSocket)
                ? new WebSocket(this.endpoint)
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore - WS may be an instance of ws, which supports options
                : new WebSocket(this.endpoint, undefined, {
                    headers: __classPrivateFieldGet(this, _WsProvider_headers, "f")
                }), "f");
            if (__classPrivateFieldGet(this, _WsProvider_websocket, "f")) {
                __classPrivateFieldGet(this, _WsProvider_websocket, "f").onclose = __classPrivateFieldGet(this, _WsProvider_onSocketClose, "f");
                __classPrivateFieldGet(this, _WsProvider_websocket, "f").onerror = __classPrivateFieldGet(this, _WsProvider_onSocketError, "f");
                __classPrivateFieldGet(this, _WsProvider_websocket, "f").onmessage = __classPrivateFieldGet(this, _WsProvider_onSocketMessage, "f");
                __classPrivateFieldGet(this, _WsProvider_websocket, "f").onopen = __classPrivateFieldGet(this, _WsProvider_onSocketOpen, "f");
            }
            // timeout any handlers that have not had a response
            __classPrivateFieldSet(this, _WsProvider_timeoutId, setInterval(() => __classPrivateFieldGet(this, _WsProvider_timeoutHandlers, "f").call(this), TIMEOUT_INTERVAL), "f");
        }
        catch (error) {
            l$b.error(error);
            __classPrivateFieldGet(this, _WsProvider_emit, "f").call(this, 'error', error);
            throw error;
        }
    }
    /**
     * @description Connect, never throwing an error, but rather forcing a retry
     */
    async connectWithRetry() {
        if (__classPrivateFieldGet(this, _WsProvider_autoConnectMs, "f") > 0) {
            try {
                await this.connect();
            }
            catch (error) {
                setTimeout(() => {
                    this.connectWithRetry().catch(() => {
                        // does not throw
                    });
                }, __classPrivateFieldGet(this, _WsProvider_autoConnectMs, "f"));
            }
        }
    }
    /**
     * @description Manually disconnect from the connection, clearing auto-connect logic
     */
    // eslint-disable-next-line @typescript-eslint/require-await
    async disconnect() {
        // switch off autoConnect, we are in manual mode now
        __classPrivateFieldSet(this, _WsProvider_autoConnectMs, 0, "f");
        try {
            if (__classPrivateFieldGet(this, _WsProvider_websocket, "f")) {
                // 1000 - Normal closure; the connection successfully completed
                __classPrivateFieldGet(this, _WsProvider_websocket, "f").close(1000);
            }
        }
        catch (error) {
            l$b.error(error);
            __classPrivateFieldGet(this, _WsProvider_emit, "f").call(this, 'error', error);
            throw error;
        }
    }
    /**
     * @description Returns the connection stats
     */
    get stats() {
        return {
            active: {
                requests: Object.keys(__classPrivateFieldGet(this, _WsProvider_handlers, "f")).length,
                subscriptions: Object.keys(__classPrivateFieldGet(this, _WsProvider_subscriptions, "f")).length
            },
            total: __classPrivateFieldGet(this, _WsProvider_stats, "f").total
        };
    }
    get endpointStats() {
        return __classPrivateFieldGet(this, _WsProvider_endpointStats, "f");
    }
    /**
     * @summary Listens on events after having subscribed using the [[subscribe]] function.
     * @param  {ProviderInterfaceEmitted} type Event
     * @param  {ProviderInterfaceEmitCb}  sub  Callback
     * @return unsubscribe function
     */
    on(type, sub) {
        __classPrivateFieldGet(this, _WsProvider_eventemitter, "f").on(type, sub);
        return () => {
            __classPrivateFieldGet(this, _WsProvider_eventemitter, "f").removeListener(type, sub);
        };
    }
    /**
     * @summary Send JSON data using WebSockets to configured HTTP Endpoint or queue.
     * @param method The RPC methods to execute
     * @param params Encoded parameters as applicable for the method
     * @param subscription Subscription details (internally used)
     */
    send(method, params, isCacheable, subscription) {
        __classPrivateFieldGet(this, _WsProvider_endpointStats, "f").requests++;
        __classPrivateFieldGet(this, _WsProvider_stats, "f").total.requests++;
        const [id, body] = __classPrivateFieldGet(this, _WsProvider_coder, "f").encodeJson(method, params);
        let resultPromise = isCacheable
            ? __classPrivateFieldGet(this, _WsProvider_callCache, "f").get(body)
            : null;
        if (!resultPromise) {
            resultPromise = __classPrivateFieldGet(this, _WsProvider_instances, "m", _WsProvider_send).call(this, id, body, method, params, subscription);
            if (isCacheable) {
                __classPrivateFieldGet(this, _WsProvider_callCache, "f").set(body, resultPromise);
            }
        }
        else {
            __classPrivateFieldGet(this, _WsProvider_endpointStats, "f").cached++;
            __classPrivateFieldGet(this, _WsProvider_stats, "f").total.cached++;
        }
        return resultPromise;
    }
    /**
     * @name subscribe
     * @summary Allows subscribing to a specific event.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * const provider = new WsProvider('ws://127.0.0.1:9944');
     * const rpc = new Rpc(provider);
     *
     * rpc.state.subscribeStorage([[storage.system.account, <Address>]], (_, values) => {
     *   console.log(values)
     * }).then((subscriptionId) => {
     *   console.log('balance changes subscription id: ', subscriptionId)
     * })
     * ```
     */
    subscribe(type, method, params, callback) {
        __classPrivateFieldGet(this, _WsProvider_endpointStats, "f").subscriptions++;
        __classPrivateFieldGet(this, _WsProvider_stats, "f").total.subscriptions++;
        // subscriptions are not cached, LRU applies to .at(<blockHash>) only
        return this.send(method, params, false, { callback, type });
    }
    /**
     * @summary Allows unsubscribing to subscriptions made with [[subscribe]].
     */
    async unsubscribe(type, method, id) {
        const subscription = `${type}::${id}`;
        // FIXME This now could happen with re-subscriptions. The issue is that with a re-sub
        // the assigned id now does not match what the API user originally received. It has
        // a slight complication in solving - since we cannot rely on the send id, but rather
        // need to find the actual subscription id to map it
        if (isUndefined(__classPrivateFieldGet(this, _WsProvider_subscriptions, "f")[subscription])) {
            l$b.debug(() => `Unable to find active subscription=${subscription}`);
            return false;
        }
        delete __classPrivateFieldGet(this, _WsProvider_subscriptions, "f")[subscription];
        try {
            return this.isConnected && !isNull(__classPrivateFieldGet(this, _WsProvider_websocket, "f"))
                ? this.send(method, [id])
                : true;
        }
        catch (error) {
            return false;
        }
    }
}
_WsProvider_callCache = new WeakMap(), _WsProvider_coder = new WeakMap(), _WsProvider_endpoints = new WeakMap(), _WsProvider_headers = new WeakMap(), _WsProvider_eventemitter = new WeakMap(), _WsProvider_handlers = new WeakMap(), _WsProvider_isReadyPromise = new WeakMap(), _WsProvider_stats = new WeakMap(), _WsProvider_waitingForId = new WeakMap(), _WsProvider_autoConnectMs = new WeakMap(), _WsProvider_endpointIndex = new WeakMap(), _WsProvider_endpointStats = new WeakMap(), _WsProvider_isConnected = new WeakMap(), _WsProvider_subscriptions = new WeakMap(), _WsProvider_timeoutId = new WeakMap(), _WsProvider_websocket = new WeakMap(), _WsProvider_timeout = new WeakMap(), _WsProvider_emit = new WeakMap(), _WsProvider_onSocketClose = new WeakMap(), _WsProvider_onSocketError = new WeakMap(), _WsProvider_onSocketMessage = new WeakMap(), _WsProvider_onSocketMessageResult = new WeakMap(), _WsProvider_onSocketMessageSubscribe = new WeakMap(), _WsProvider_onSocketOpen = new WeakMap(), _WsProvider_resubscribe = new WeakMap(), _WsProvider_timeoutHandlers = new WeakMap(), _WsProvider_instances = new WeakSet(), _WsProvider_send = async function _WsProvider_send(id, body, method, params, subscription) {
    return new Promise((resolve, reject) => {
        try {
            if (!this.isConnected || __classPrivateFieldGet(this, _WsProvider_websocket, "f") === null) {
                throw new Error('WebSocket is not connected');
            }
            const callback = (error, result) => {
                error
                    ? reject(error)
                    : resolve(result);
            };
            l$b.debug(() => ['calling', method, body]);
            __classPrivateFieldGet(this, _WsProvider_handlers, "f")[id] = {
                callback,
                method,
                params,
                start: Date.now(),
                subscription
            };
            __classPrivateFieldGet(this, _WsProvider_endpointStats, "f").bytesSent += body.length;
            __classPrivateFieldGet(this, _WsProvider_stats, "f").total.bytesSent += body.length;
            __classPrivateFieldGet(this, _WsProvider_websocket, "f").send(body);
        }
        catch (error) {
            __classPrivateFieldGet(this, _WsProvider_endpointStats, "f").errors++;
            __classPrivateFieldGet(this, _WsProvider_stats, "f").total.errors++;
            reject(error);
        }
    });
};

function isFunction(value) {
    return typeof value === 'function';
}

function createErrorClass(createImpl) {
    var _super = function (instance) {
        Error.call(instance);
        instance.stack = new Error().stack;
    };
    var ctorFunc = createImpl(_super);
    ctorFunc.prototype = Object.create(Error.prototype);
    ctorFunc.prototype.constructor = ctorFunc;
    return ctorFunc;
}

var UnsubscriptionError = createErrorClass(function (_super) {
    return function UnsubscriptionErrorImpl(errors) {
        _super(this);
        this.message = errors
            ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ')
            : '';
        this.name = 'UnsubscriptionError';
        this.errors = errors;
    };
});

function arrRemove(arr, item) {
    if (arr) {
        var index = arr.indexOf(item);
        0 <= index && arr.splice(index, 1);
    }
}

var Subscription = (function () {
    function Subscription(initialTeardown) {
        this.initialTeardown = initialTeardown;
        this.closed = false;
        this._parentage = null;
        this._finalizers = null;
    }
    Subscription.prototype.unsubscribe = function () {
        var e_1, _a, e_2, _b;
        var errors;
        if (!this.closed) {
            this.closed = true;
            var _parentage = this._parentage;
            if (_parentage) {
                this._parentage = null;
                if (Array.isArray(_parentage)) {
                    try {
                        for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
                            var parent_1 = _parentage_1_1.value;
                            parent_1.remove(this);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                else {
                    _parentage.remove(this);
                }
            }
            var initialFinalizer = this.initialTeardown;
            if (isFunction(initialFinalizer)) {
                try {
                    initialFinalizer();
                }
                catch (e) {
                    errors = e instanceof UnsubscriptionError ? e.errors : [e];
                }
            }
            var _finalizers = this._finalizers;
            if (_finalizers) {
                this._finalizers = null;
                try {
                    for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
                        var finalizer = _finalizers_1_1.value;
                        try {
                            execFinalizer(finalizer);
                        }
                        catch (err) {
                            errors = errors !== null && errors !== void 0 ? errors : [];
                            if (err instanceof UnsubscriptionError) {
                                errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
                            }
                            else {
                                errors.push(err);
                            }
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return)) _b.call(_finalizers_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            if (errors) {
                throw new UnsubscriptionError(errors);
            }
        }
    };
    Subscription.prototype.add = function (teardown) {
        var _a;
        if (teardown && teardown !== this) {
            if (this.closed) {
                execFinalizer(teardown);
            }
            else {
                if (teardown instanceof Subscription) {
                    if (teardown.closed || teardown._hasParent(this)) {
                        return;
                    }
                    teardown._addParent(this);
                }
                (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
            }
        }
    };
    Subscription.prototype._hasParent = function (parent) {
        var _parentage = this._parentage;
        return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));
    };
    Subscription.prototype._addParent = function (parent) {
        var _parentage = this._parentage;
        this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
    };
    Subscription.prototype._removeParent = function (parent) {
        var _parentage = this._parentage;
        if (_parentage === parent) {
            this._parentage = null;
        }
        else if (Array.isArray(_parentage)) {
            arrRemove(_parentage, parent);
        }
    };
    Subscription.prototype.remove = function (teardown) {
        var _finalizers = this._finalizers;
        _finalizers && arrRemove(_finalizers, teardown);
        if (teardown instanceof Subscription) {
            teardown._removeParent(this);
        }
    };
    Subscription.EMPTY = (function () {
        var empty = new Subscription();
        empty.closed = true;
        return empty;
    })();
    return Subscription;
}());
var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
function isSubscription(value) {
    return (value instanceof Subscription ||
        (value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe)));
}
function execFinalizer(finalizer) {
    if (isFunction(finalizer)) {
        finalizer();
    }
    else {
        finalizer.unsubscribe();
    }
}

var config = {
    onUnhandledError: null,
    onStoppedNotification: null,
    Promise: undefined,
    useDeprecatedSynchronousErrorHandling: false,
    useDeprecatedNextContext: false,
};

var timeoutProvider = {
    setTimeout: function (handler, timeout) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var delegate = timeoutProvider.delegate;
        if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
            return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout], __read(args)));
        }
        return setTimeout.apply(void 0, __spreadArray([handler, timeout], __read(args)));
    },
    clearTimeout: function (handle) {
        var delegate = timeoutProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
    },
    delegate: undefined,
};

function reportUnhandledError(err) {
    timeoutProvider.setTimeout(function () {
        {
            throw err;
        }
    });
}

function noop() { }

function errorContext(cb) {
    {
        cb();
    }
}

var Subscriber = (function (_super) {
    __extends(Subscriber, _super);
    function Subscriber(destination) {
        var _this = _super.call(this) || this;
        _this.isStopped = false;
        if (destination) {
            _this.destination = destination;
            if (isSubscription(destination)) {
                destination.add(_this);
            }
        }
        else {
            _this.destination = EMPTY_OBSERVER;
        }
        return _this;
    }
    Subscriber.create = function (next, error, complete) {
        return new SafeSubscriber(next, error, complete);
    };
    Subscriber.prototype.next = function (value) {
        if (this.isStopped) ;
        else {
            this._next(value);
        }
    };
    Subscriber.prototype.error = function (err) {
        if (this.isStopped) ;
        else {
            this.isStopped = true;
            this._error(err);
        }
    };
    Subscriber.prototype.complete = function () {
        if (this.isStopped) ;
        else {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function () {
        if (!this.closed) {
            this.isStopped = true;
            _super.prototype.unsubscribe.call(this);
            this.destination = null;
        }
    };
    Subscriber.prototype._next = function (value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
        try {
            this.destination.error(err);
        }
        finally {
            this.unsubscribe();
        }
    };
    Subscriber.prototype._complete = function () {
        try {
            this.destination.complete();
        }
        finally {
            this.unsubscribe();
        }
    };
    return Subscriber;
}(Subscription));
var _bind = Function.prototype.bind;
function bind(fn, thisArg) {
    return _bind.call(fn, thisArg);
}
var ConsumerObserver = (function () {
    function ConsumerObserver(partialObserver) {
        this.partialObserver = partialObserver;
    }
    ConsumerObserver.prototype.next = function (value) {
        var partialObserver = this.partialObserver;
        if (partialObserver.next) {
            try {
                partialObserver.next(value);
            }
            catch (error) {
                handleUnhandledError(error);
            }
        }
    };
    ConsumerObserver.prototype.error = function (err) {
        var partialObserver = this.partialObserver;
        if (partialObserver.error) {
            try {
                partialObserver.error(err);
            }
            catch (error) {
                handleUnhandledError(error);
            }
        }
        else {
            handleUnhandledError(err);
        }
    };
    ConsumerObserver.prototype.complete = function () {
        var partialObserver = this.partialObserver;
        if (partialObserver.complete) {
            try {
                partialObserver.complete();
            }
            catch (error) {
                handleUnhandledError(error);
            }
        }
    };
    return ConsumerObserver;
}());
var SafeSubscriber = (function (_super) {
    __extends(SafeSubscriber, _super);
    function SafeSubscriber(observerOrNext, error, complete) {
        var _this = _super.call(this) || this;
        var partialObserver;
        if (isFunction(observerOrNext) || !observerOrNext) {
            partialObserver = {
                next: (observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : undefined),
                error: error !== null && error !== void 0 ? error : undefined,
                complete: complete !== null && complete !== void 0 ? complete : undefined,
            };
        }
        else {
            var context_1;
            if (_this && config.useDeprecatedNextContext) {
                context_1 = Object.create(observerOrNext);
                context_1.unsubscribe = function () { return _this.unsubscribe(); };
                partialObserver = {
                    next: observerOrNext.next && bind(observerOrNext.next, context_1),
                    error: observerOrNext.error && bind(observerOrNext.error, context_1),
                    complete: observerOrNext.complete && bind(observerOrNext.complete, context_1),
                };
            }
            else {
                partialObserver = observerOrNext;
            }
        }
        _this.destination = new ConsumerObserver(partialObserver);
        return _this;
    }
    return SafeSubscriber;
}(Subscriber));
function handleUnhandledError(error) {
    {
        reportUnhandledError(error);
    }
}
function defaultErrorHandler(err) {
    throw err;
}
var EMPTY_OBSERVER = {
    closed: true,
    next: noop,
    error: defaultErrorHandler,
    complete: noop,
};

var observable = (function () { return (typeof Symbol === 'function' && Symbol.observable) || '@@observable'; })();

function identity$2(x) {
    return x;
}

function pipeFromArray(fns) {
    if (fns.length === 0) {
        return identity$2;
    }
    if (fns.length === 1) {
        return fns[0];
    }
    return function piped(input) {
        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
    };
}

var Observable = (function () {
    function Observable(subscribe) {
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    Observable.prototype.lift = function (operator) {
        var observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    };
    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
        var _this = this;
        var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
        errorContext(function () {
            var _a = _this, operator = _a.operator, source = _a.source;
            subscriber.add(operator
                ?
                    operator.call(subscriber, source)
                : source
                    ?
                        _this._subscribe(subscriber)
                    :
                        _this._trySubscribe(subscriber));
        });
        return subscriber;
    };
    Observable.prototype._trySubscribe = function (sink) {
        try {
            return this._subscribe(sink);
        }
        catch (err) {
            sink.error(err);
        }
    };
    Observable.prototype.forEach = function (next, promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var subscriber = new SafeSubscriber({
                next: function (value) {
                    try {
                        next(value);
                    }
                    catch (err) {
                        reject(err);
                        subscriber.unsubscribe();
                    }
                },
                error: reject,
                complete: resolve,
            });
            _this.subscribe(subscriber);
        });
    };
    Observable.prototype._subscribe = function (subscriber) {
        var _a;
        return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
    };
    Observable.prototype[observable] = function () {
        return this;
    };
    Observable.prototype.pipe = function () {
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i] = arguments[_i];
        }
        return pipeFromArray(operations)(this);
    };
    Observable.prototype.toPromise = function (promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) { return (value = x); }, function (err) { return reject(err); }, function () { return resolve(value); });
        });
    };
    Observable.create = function (subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}());
function getPromiseCtor(promiseCtor) {
    var _a;
    return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;
}
function isObserver(value) {
    return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
}
function isSubscriber(value) {
    return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));
}

function hasLift(source) {
    return isFunction(source === null || source === void 0 ? void 0 : source.lift);
}
function operate(init) {
    return function (source) {
        if (hasLift(source)) {
            return source.lift(function (liftedSource) {
                try {
                    return init(liftedSource, this);
                }
                catch (err) {
                    this.error(err);
                }
            });
        }
        throw new TypeError('Unable to lift unknown Observable type');
    };
}

function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
    return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
var OperatorSubscriber = (function (_super) {
    __extends(OperatorSubscriber, _super);
    function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
        var _this = _super.call(this, destination) || this;
        _this.onFinalize = onFinalize;
        _this.shouldUnsubscribe = shouldUnsubscribe;
        _this._next = onNext
            ? function (value) {
                try {
                    onNext(value);
                }
                catch (err) {
                    destination.error(err);
                }
            }
            : _super.prototype._next;
        _this._error = onError
            ? function (err) {
                try {
                    onError(err);
                }
                catch (err) {
                    destination.error(err);
                }
                finally {
                    this.unsubscribe();
                }
            }
            : _super.prototype._error;
        _this._complete = onComplete
            ? function () {
                try {
                    onComplete();
                }
                catch (err) {
                    destination.error(err);
                }
                finally {
                    this.unsubscribe();
                }
            }
            : _super.prototype._complete;
        return _this;
    }
    OperatorSubscriber.prototype.unsubscribe = function () {
        var _a;
        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
            var closed_1 = this.closed;
            _super.prototype.unsubscribe.call(this);
            !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
        }
    };
    return OperatorSubscriber;
}(Subscriber));

function refCount() {
    return operate(function (source, subscriber) {
        var connection = null;
        source._refCount++;
        var refCounter = createOperatorSubscriber(subscriber, undefined, undefined, undefined, function () {
            if (!source || source._refCount <= 0 || 0 < --source._refCount) {
                connection = null;
                return;
            }
            var sharedConnection = source._connection;
            var conn = connection;
            connection = null;
            if (sharedConnection && (!conn || sharedConnection === conn)) {
                sharedConnection.unsubscribe();
            }
            subscriber.unsubscribe();
        });
        source.subscribe(refCounter);
        if (!refCounter.closed) {
            connection = source.connect();
        }
    });
}

var ConnectableObservable = (function (_super) {
    __extends(ConnectableObservable, _super);
    function ConnectableObservable(source, subjectFactory) {
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.subjectFactory = subjectFactory;
        _this._subject = null;
        _this._refCount = 0;
        _this._connection = null;
        if (hasLift(source)) {
            _this.lift = source.lift;
        }
        return _this;
    }
    ConnectableObservable.prototype._subscribe = function (subscriber) {
        return this.getSubject().subscribe(subscriber);
    };
    ConnectableObservable.prototype.getSubject = function () {
        var subject = this._subject;
        if (!subject || subject.isStopped) {
            this._subject = this.subjectFactory();
        }
        return this._subject;
    };
    ConnectableObservable.prototype._teardown = function () {
        this._refCount = 0;
        var _connection = this._connection;
        this._subject = this._connection = null;
        _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
    };
    ConnectableObservable.prototype.connect = function () {
        var _this = this;
        var connection = this._connection;
        if (!connection) {
            connection = this._connection = new Subscription();
            var subject_1 = this.getSubject();
            connection.add(this.source.subscribe(createOperatorSubscriber(subject_1, undefined, function () {
                _this._teardown();
                subject_1.complete();
            }, function (err) {
                _this._teardown();
                subject_1.error(err);
            }, function () { return _this._teardown(); })));
            if (connection.closed) {
                this._connection = null;
                connection = Subscription.EMPTY;
            }
        }
        return connection;
    };
    ConnectableObservable.prototype.refCount = function () {
        return refCount()(this);
    };
    return ConnectableObservable;
}(Observable));

var ObjectUnsubscribedError = createErrorClass(function (_super) {
    return function ObjectUnsubscribedErrorImpl() {
        _super(this);
        this.name = 'ObjectUnsubscribedError';
        this.message = 'object unsubscribed';
    };
});

var Subject = (function (_super) {
    __extends(Subject, _super);
    function Subject() {
        var _this = _super.call(this) || this;
        _this.closed = false;
        _this.currentObservers = null;
        _this.observers = [];
        _this.isStopped = false;
        _this.hasError = false;
        _this.thrownError = null;
        return _this;
    }
    Subject.prototype.lift = function (operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    };
    Subject.prototype._throwIfClosed = function () {
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
    };
    Subject.prototype.next = function (value) {
        var _this = this;
        errorContext(function () {
            var e_1, _a;
            _this._throwIfClosed();
            if (!_this.isStopped) {
                if (!_this.currentObservers) {
                    _this.currentObservers = Array.from(_this.observers);
                }
                try {
                    for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var observer = _c.value;
                        observer.next(value);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        });
    };
    Subject.prototype.error = function (err) {
        var _this = this;
        errorContext(function () {
            _this._throwIfClosed();
            if (!_this.isStopped) {
                _this.hasError = _this.isStopped = true;
                _this.thrownError = err;
                var observers = _this.observers;
                while (observers.length) {
                    observers.shift().error(err);
                }
            }
        });
    };
    Subject.prototype.complete = function () {
        var _this = this;
        errorContext(function () {
            _this._throwIfClosed();
            if (!_this.isStopped) {
                _this.isStopped = true;
                var observers = _this.observers;
                while (observers.length) {
                    observers.shift().complete();
                }
            }
        });
    };
    Subject.prototype.unsubscribe = function () {
        this.isStopped = this.closed = true;
        this.observers = this.currentObservers = null;
    };
    Object.defineProperty(Subject.prototype, "observed", {
        get: function () {
            var _a;
            return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
        },
        enumerable: false,
        configurable: true
    });
    Subject.prototype._trySubscribe = function (subscriber) {
        this._throwIfClosed();
        return _super.prototype._trySubscribe.call(this, subscriber);
    };
    Subject.prototype._subscribe = function (subscriber) {
        this._throwIfClosed();
        this._checkFinalizedStatuses(subscriber);
        return this._innerSubscribe(subscriber);
    };
    Subject.prototype._innerSubscribe = function (subscriber) {
        var _this = this;
        var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
        if (hasError || isStopped) {
            return EMPTY_SUBSCRIPTION;
        }
        this.currentObservers = null;
        observers.push(subscriber);
        return new Subscription(function () {
            _this.currentObservers = null;
            arrRemove(observers, subscriber);
        });
    };
    Subject.prototype._checkFinalizedStatuses = function (subscriber) {
        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
        if (hasError) {
            subscriber.error(thrownError);
        }
        else if (isStopped) {
            subscriber.complete();
        }
    };
    Subject.prototype.asObservable = function () {
        var observable = new Observable();
        observable.source = this;
        return observable;
    };
    Subject.create = function (destination, source) {
        return new AnonymousSubject(destination, source);
    };
    return Subject;
}(Observable));
var AnonymousSubject = (function (_super) {
    __extends(AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
        var _this = _super.call(this) || this;
        _this.destination = destination;
        _this.source = source;
        return _this;
    }
    AnonymousSubject.prototype.next = function (value) {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
    };
    AnonymousSubject.prototype.error = function (err) {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
    };
    AnonymousSubject.prototype.complete = function () {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
    };
    AnonymousSubject.prototype._subscribe = function (subscriber) {
        var _a, _b;
        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
    };
    return AnonymousSubject;
}(Subject));

var BehaviorSubject = (function (_super) {
    __extends(BehaviorSubject, _super);
    function BehaviorSubject(_value) {
        var _this = _super.call(this) || this;
        _this._value = _value;
        return _this;
    }
    Object.defineProperty(BehaviorSubject.prototype, "value", {
        get: function () {
            return this.getValue();
        },
        enumerable: false,
        configurable: true
    });
    BehaviorSubject.prototype._subscribe = function (subscriber) {
        var subscription = _super.prototype._subscribe.call(this, subscriber);
        !subscription.closed && subscriber.next(this._value);
        return subscription;
    };
    BehaviorSubject.prototype.getValue = function () {
        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;
        if (hasError) {
            throw thrownError;
        }
        this._throwIfClosed();
        return _value;
    };
    BehaviorSubject.prototype.next = function (value) {
        _super.prototype.next.call(this, (this._value = value));
    };
    return BehaviorSubject;
}(Subject));

var dateTimestampProvider = {
    now: function () {
        return (dateTimestampProvider.delegate || Date).now();
    },
    delegate: undefined,
};

var ReplaySubject = (function (_super) {
    __extends(ReplaySubject, _super);
    function ReplaySubject(_bufferSize, _windowTime, _timestampProvider) {
        if (_bufferSize === void 0) { _bufferSize = Infinity; }
        if (_windowTime === void 0) { _windowTime = Infinity; }
        if (_timestampProvider === void 0) { _timestampProvider = dateTimestampProvider; }
        var _this = _super.call(this) || this;
        _this._bufferSize = _bufferSize;
        _this._windowTime = _windowTime;
        _this._timestampProvider = _timestampProvider;
        _this._buffer = [];
        _this._infiniteTimeWindow = true;
        _this._infiniteTimeWindow = _windowTime === Infinity;
        _this._bufferSize = Math.max(1, _bufferSize);
        _this._windowTime = Math.max(1, _windowTime);
        return _this;
    }
    ReplaySubject.prototype.next = function (value) {
        var _a = this, isStopped = _a.isStopped, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow, _timestampProvider = _a._timestampProvider, _windowTime = _a._windowTime;
        if (!isStopped) {
            _buffer.push(value);
            !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
        }
        this._trimBuffer();
        _super.prototype.next.call(this, value);
    };
    ReplaySubject.prototype._subscribe = function (subscriber) {
        this._throwIfClosed();
        this._trimBuffer();
        var subscription = this._innerSubscribe(subscriber);
        var _a = this, _infiniteTimeWindow = _a._infiniteTimeWindow, _buffer = _a._buffer;
        var copy = _buffer.slice();
        for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
            subscriber.next(copy[i]);
        }
        this._checkFinalizedStatuses(subscriber);
        return subscription;
    };
    ReplaySubject.prototype._trimBuffer = function () {
        var _a = this, _bufferSize = _a._bufferSize, _timestampProvider = _a._timestampProvider, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow;
        var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
        if (!_infiniteTimeWindow) {
            var now = _timestampProvider.now();
            var last = 0;
            for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
                last = i;
            }
            last && _buffer.splice(0, last + 1);
        }
    };
    return ReplaySubject;
}(Subject));

var Action = (function (_super) {
    __extends(Action, _super);
    function Action(scheduler, work) {
        return _super.call(this) || this;
    }
    Action.prototype.schedule = function (state, delay) {
        return this;
    };
    return Action;
}(Subscription));

var intervalProvider = {
    setInterval: function (handler, timeout) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var delegate = intervalProvider.delegate;
        if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {
            return delegate.setInterval.apply(delegate, __spreadArray([handler, timeout], __read(args)));
        }
        return setInterval.apply(void 0, __spreadArray([handler, timeout], __read(args)));
    },
    clearInterval: function (handle) {
        var delegate = intervalProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
    },
    delegate: undefined,
};

var AsyncAction = (function (_super) {
    __extends(AsyncAction, _super);
    function AsyncAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.pending = false;
        return _this;
    }
    AsyncAction.prototype.schedule = function (state, delay) {
        var _a;
        if (delay === void 0) { delay = 0; }
        if (this.closed) {
            return this;
        }
        this.state = state;
        var id = this.id;
        var scheduler = this.scheduler;
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, delay);
        }
        this.pending = true;
        this.delay = delay;
        this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay);
        return this;
    };
    AsyncAction.prototype.requestAsyncId = function (scheduler, _id, delay) {
        if (delay === void 0) { delay = 0; }
        return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);
    };
    AsyncAction.prototype.recycleAsyncId = function (_scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        if (delay != null && this.delay === delay && this.pending === false) {
            return id;
        }
        if (id != null) {
            intervalProvider.clearInterval(id);
        }
        return undefined;
    };
    AsyncAction.prototype.execute = function (state, delay) {
        if (this.closed) {
            return new Error('executing a cancelled action');
        }
        this.pending = false;
        var error = this._execute(state, delay);
        if (error) {
            return error;
        }
        else if (this.pending === false && this.id != null) {
            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
        }
    };
    AsyncAction.prototype._execute = function (state, _delay) {
        var errored = false;
        var errorValue;
        try {
            this.work(state);
        }
        catch (e) {
            errored = true;
            errorValue = e ? e : new Error('Scheduled action threw falsy error');
        }
        if (errored) {
            this.unsubscribe();
            return errorValue;
        }
    };
    AsyncAction.prototype.unsubscribe = function () {
        if (!this.closed) {
            var _a = this, id = _a.id, scheduler = _a.scheduler;
            var actions = scheduler.actions;
            this.work = this.state = this.scheduler = null;
            this.pending = false;
            arrRemove(actions, this);
            if (id != null) {
                this.id = this.recycleAsyncId(scheduler, id, null);
            }
            this.delay = null;
            _super.prototype.unsubscribe.call(this);
        }
    };
    return AsyncAction;
}(Action));

var nextHandle = 1;
var resolved;
var activeHandles = {};
function findAndClearHandle(handle) {
    if (handle in activeHandles) {
        delete activeHandles[handle];
        return true;
    }
    return false;
}
var Immediate = {
    setImmediate: function (cb) {
        var handle = nextHandle++;
        activeHandles[handle] = true;
        if (!resolved) {
            resolved = Promise.resolve();
        }
        resolved.then(function () { return findAndClearHandle(handle) && cb(); });
        return handle;
    },
    clearImmediate: function (handle) {
        findAndClearHandle(handle);
    },
};

var setImmediate = Immediate.setImmediate, clearImmediate = Immediate.clearImmediate;
var immediateProvider = {
    setImmediate: function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var delegate = immediateProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate).apply(void 0, __spreadArray([], __read(args)));
    },
    clearImmediate: function (handle) {
        var delegate = immediateProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);
    },
    delegate: undefined,
};

var AsapAction = (function (_super) {
    __extends(AsapAction, _super);
    function AsapAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        if (delay !== null && delay > 0) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        scheduler.actions.push(this);
        return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));
    };
    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        var _a;
        if (delay === void 0) { delay = 0; }
        if (delay != null ? delay > 0 : this.delay > 0) {
            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        var actions = scheduler.actions;
        if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {
            immediateProvider.clearImmediate(id);
            if (scheduler._scheduled === id) {
                scheduler._scheduled = undefined;
            }
        }
        return undefined;
    };
    return AsapAction;
}(AsyncAction));

var Scheduler = (function () {
    function Scheduler(schedulerActionCtor, now) {
        if (now === void 0) { now = Scheduler.now; }
        this.schedulerActionCtor = schedulerActionCtor;
        this.now = now;
    }
    Scheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) { delay = 0; }
        return new this.schedulerActionCtor(this, work).schedule(state, delay);
    };
    Scheduler.now = dateTimestampProvider.now;
    return Scheduler;
}());

var AsyncScheduler = (function (_super) {
    __extends(AsyncScheduler, _super);
    function AsyncScheduler(SchedulerAction, now) {
        if (now === void 0) { now = Scheduler.now; }
        var _this = _super.call(this, SchedulerAction, now) || this;
        _this.actions = [];
        _this._active = false;
        return _this;
    }
    AsyncScheduler.prototype.flush = function (action) {
        var actions = this.actions;
        if (this._active) {
            actions.push(action);
            return;
        }
        var error;
        this._active = true;
        do {
            if ((error = action.execute(action.state, action.delay))) {
                break;
            }
        } while ((action = actions.shift()));
        this._active = false;
        if (error) {
            while ((action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsyncScheduler;
}(Scheduler));

var AsapScheduler = (function (_super) {
    __extends(AsapScheduler, _super);
    function AsapScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AsapScheduler.prototype.flush = function (action) {
        this._active = true;
        var flushId = this._scheduled;
        this._scheduled = undefined;
        var actions = this.actions;
        var error;
        action = action || actions.shift();
        do {
            if ((error = action.execute(action.state, action.delay))) {
                break;
            }
        } while ((action = actions[0]) && action.id === flushId && actions.shift());
        this._active = false;
        if (error) {
            while ((action = actions[0]) && action.id === flushId && actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsapScheduler;
}(AsyncScheduler));

var asapScheduler = new AsapScheduler(AsapAction);

var EMPTY = new Observable(function (subscriber) { return subscriber.complete(); });

function isScheduler(value) {
    return value && isFunction(value.schedule);
}

function last(arr) {
    return arr[arr.length - 1];
}
function popResultSelector(args) {
    return isFunction(last(args)) ? args.pop() : undefined;
}
function popScheduler(args) {
    return isScheduler(last(args)) ? args.pop() : undefined;
}

var isArrayLike$1 = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });

function isPromise(value) {
    return isFunction(value === null || value === void 0 ? void 0 : value.then);
}

function isInteropObservable(input) {
    return isFunction(input[observable]);
}

function isAsyncIterable(obj) {
    return Symbol.asyncIterator && isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
}

function createInvalidObservableTypeError(input) {
    return new TypeError("You provided " + (input !== null && typeof input === 'object' ? 'an invalid object' : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
}

function getSymbolIterator() {
    if (typeof Symbol !== 'function' || !Symbol.iterator) {
        return '@@iterator';
    }
    return Symbol.iterator;
}
var iterator = getSymbolIterator();

function isIterable(input) {
    return isFunction(input === null || input === void 0 ? void 0 : input[iterator]);
}

function readableStreamLikeToAsyncGenerator(readableStream) {
    return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
        var reader, _a, value, done;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    reader = readableStream.getReader();
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, , 9, 10]);
                    _b.label = 2;
                case 2:
                    return [4, __await(reader.read())];
                case 3:
                    _a = _b.sent(), value = _a.value, done = _a.done;
                    if (!done) return [3, 5];
                    return [4, __await(void 0)];
                case 4: return [2, _b.sent()];
                case 5: return [4, __await(value)];
                case 6: return [4, _b.sent()];
                case 7:
                    _b.sent();
                    return [3, 2];
                case 8: return [3, 10];
                case 9:
                    reader.releaseLock();
                    return [7];
                case 10: return [2];
            }
        });
    });
}
function isReadableStreamLike(obj) {
    return isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
}

function innerFrom(input) {
    if (input instanceof Observable) {
        return input;
    }
    if (input != null) {
        if (isInteropObservable(input)) {
            return fromInteropObservable(input);
        }
        if (isArrayLike$1(input)) {
            return fromArrayLike(input);
        }
        if (isPromise(input)) {
            return fromPromise(input);
        }
        if (isAsyncIterable(input)) {
            return fromAsyncIterable(input);
        }
        if (isIterable(input)) {
            return fromIterable(input);
        }
        if (isReadableStreamLike(input)) {
            return fromReadableStreamLike(input);
        }
    }
    throw createInvalidObservableTypeError(input);
}
function fromInteropObservable(obj) {
    return new Observable(function (subscriber) {
        var obs = obj[observable]();
        if (isFunction(obs.subscribe)) {
            return obs.subscribe(subscriber);
        }
        throw new TypeError('Provided object does not correctly implement Symbol.observable');
    });
}
function fromArrayLike(array) {
    return new Observable(function (subscriber) {
        for (var i = 0; i < array.length && !subscriber.closed; i++) {
            subscriber.next(array[i]);
        }
        subscriber.complete();
    });
}
function fromPromise(promise) {
    return new Observable(function (subscriber) {
        promise
            .then(function (value) {
            if (!subscriber.closed) {
                subscriber.next(value);
                subscriber.complete();
            }
        }, function (err) { return subscriber.error(err); })
            .then(null, reportUnhandledError);
    });
}
function fromIterable(iterable) {
    return new Observable(function (subscriber) {
        var e_1, _a;
        try {
            for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
                var value = iterable_1_1.value;
                subscriber.next(value);
                if (subscriber.closed) {
                    return;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        subscriber.complete();
    });
}
function fromAsyncIterable(asyncIterable) {
    return new Observable(function (subscriber) {
        process(asyncIterable, subscriber).catch(function (err) { return subscriber.error(err); });
    });
}
function fromReadableStreamLike(readableStream) {
    return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
}
function process(asyncIterable, subscriber) {
    var asyncIterable_1, asyncIterable_1_1;
    var e_2, _a;
    return __awaiter(this, void 0, void 0, function () {
        var value, e_2_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 5, 6, 11]);
                    asyncIterable_1 = __asyncValues(asyncIterable);
                    _b.label = 1;
                case 1: return [4, asyncIterable_1.next()];
                case 2:
                    if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];
                    value = asyncIterable_1_1.value;
                    subscriber.next(value);
                    if (subscriber.closed) {
                        return [2];
                    }
                    _b.label = 3;
                case 3: return [3, 1];
                case 4: return [3, 11];
                case 5:
                    e_2_1 = _b.sent();
                    e_2 = { error: e_2_1 };
                    return [3, 11];
                case 6:
                    _b.trys.push([6, , 9, 10]);
                    if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [3, 8];
                    return [4, _a.call(asyncIterable_1)];
                case 7:
                    _b.sent();
                    _b.label = 8;
                case 8: return [3, 10];
                case 9:
                    if (e_2) throw e_2.error;
                    return [7];
                case 10: return [7];
                case 11:
                    subscriber.complete();
                    return [2];
            }
        });
    });
}

function executeSchedule(parentSubscription, scheduler, work, delay, repeat) {
    if (delay === void 0) { delay = 0; }
    if (repeat === void 0) { repeat = false; }
    var scheduleSubscription = scheduler.schedule(function () {
        work();
        if (repeat) {
            parentSubscription.add(this.schedule(null, delay));
        }
        else {
            this.unsubscribe();
        }
    }, delay);
    parentSubscription.add(scheduleSubscription);
    if (!repeat) {
        return scheduleSubscription;
    }
}

function observeOn(scheduler, delay) {
    if (delay === void 0) { delay = 0; }
    return operate(function (source, subscriber) {
        source.subscribe(createOperatorSubscriber(subscriber, function (value) { return executeSchedule(subscriber, scheduler, function () { return subscriber.next(value); }, delay); }, function () { return executeSchedule(subscriber, scheduler, function () { return subscriber.complete(); }, delay); }, function (err) { return executeSchedule(subscriber, scheduler, function () { return subscriber.error(err); }, delay); }));
    });
}

function subscribeOn(scheduler, delay) {
    if (delay === void 0) { delay = 0; }
    return operate(function (source, subscriber) {
        subscriber.add(scheduler.schedule(function () { return source.subscribe(subscriber); }, delay));
    });
}

function scheduleObservable(input, scheduler) {
    return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
}

function schedulePromise(input, scheduler) {
    return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
}

function scheduleArray(input, scheduler) {
    return new Observable(function (subscriber) {
        var i = 0;
        return scheduler.schedule(function () {
            if (i === input.length) {
                subscriber.complete();
            }
            else {
                subscriber.next(input[i++]);
                if (!subscriber.closed) {
                    this.schedule();
                }
            }
        });
    });
}

function scheduleIterable(input, scheduler) {
    return new Observable(function (subscriber) {
        var iterator$1;
        executeSchedule(subscriber, scheduler, function () {
            iterator$1 = input[iterator]();
            executeSchedule(subscriber, scheduler, function () {
                var _a;
                var value;
                var done;
                try {
                    (_a = iterator$1.next(), value = _a.value, done = _a.done);
                }
                catch (err) {
                    subscriber.error(err);
                    return;
                }
                if (done) {
                    subscriber.complete();
                }
                else {
                    subscriber.next(value);
                }
            }, 0, true);
        });
        return function () { return isFunction(iterator$1 === null || iterator$1 === void 0 ? void 0 : iterator$1.return) && iterator$1.return(); };
    });
}

function scheduleAsyncIterable(input, scheduler) {
    if (!input) {
        throw new Error('Iterable cannot be null');
    }
    return new Observable(function (subscriber) {
        executeSchedule(subscriber, scheduler, function () {
            var iterator = input[Symbol.asyncIterator]();
            executeSchedule(subscriber, scheduler, function () {
                iterator.next().then(function (result) {
                    if (result.done) {
                        subscriber.complete();
                    }
                    else {
                        subscriber.next(result.value);
                    }
                });
            }, 0, true);
        });
    });
}

function scheduleReadableStreamLike(input, scheduler) {
    return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);
}

function scheduled(input, scheduler) {
    if (input != null) {
        if (isInteropObservable(input)) {
            return scheduleObservable(input, scheduler);
        }
        if (isArrayLike$1(input)) {
            return scheduleArray(input, scheduler);
        }
        if (isPromise(input)) {
            return schedulePromise(input, scheduler);
        }
        if (isAsyncIterable(input)) {
            return scheduleAsyncIterable(input, scheduler);
        }
        if (isIterable(input)) {
            return scheduleIterable(input, scheduler);
        }
        if (isReadableStreamLike(input)) {
            return scheduleReadableStreamLike(input, scheduler);
        }
    }
    throw createInvalidObservableTypeError(input);
}

function from(input, scheduler) {
    return scheduler ? scheduled(input, scheduler) : innerFrom(input);
}

function of() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = popScheduler(args);
    return from(args, scheduler);
}

var EmptyError = createErrorClass(function (_super) { return function EmptyErrorImpl() {
    _super(this);
    this.name = 'EmptyError';
    this.message = 'no elements in sequence';
}; });

function firstValueFrom(source, config) {
    var hasConfig = typeof config === 'object';
    return new Promise(function (resolve, reject) {
        var subscriber = new SafeSubscriber({
            next: function (value) {
                resolve(value);
                subscriber.unsubscribe();
            },
            error: reject,
            complete: function () {
                if (hasConfig) {
                    resolve(config.defaultValue);
                }
                else {
                    reject(new EmptyError());
                }
            },
        });
        source.subscribe(subscriber);
    });
}

function map(project, thisArg) {
    return operate(function (source, subscriber) {
        var index = 0;
        source.subscribe(createOperatorSubscriber(subscriber, function (value) {
            subscriber.next(project.call(thisArg, value, index++));
        }));
    });
}

var isArray$1 = Array.isArray;
function callOrApply(fn, args) {
    return isArray$1(args) ? fn.apply(void 0, __spreadArray([], __read(args))) : fn(args);
}
function mapOneOrManyArgs(fn) {
    return map(function (args) { return callOrApply(fn, args); });
}

var isArray = Array.isArray;
var getPrototypeOf = Object.getPrototypeOf, objectProto = Object.prototype, getKeys = Object.keys;
function argsArgArrayOrObject(args) {
    if (args.length === 1) {
        var first_1 = args[0];
        if (isArray(first_1)) {
            return { args: first_1, keys: null };
        }
        if (isPOJO(first_1)) {
            var keys = getKeys(first_1);
            return {
                args: keys.map(function (key) { return first_1[key]; }),
                keys: keys,
            };
        }
    }
    return { args: args, keys: null };
}
function isPOJO(obj) {
    return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;
}

function createObject(keys, values) {
    return keys.reduce(function (result, key, i) { return ((result[key] = values[i]), result); }, {});
}

function combineLatest() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = popScheduler(args);
    var resultSelector = popResultSelector(args);
    var _a = argsArgArrayOrObject(args), observables = _a.args, keys = _a.keys;
    if (observables.length === 0) {
        return from([], scheduler);
    }
    var result = new Observable(combineLatestInit(observables, scheduler, keys
        ?
            function (values) { return createObject(keys, values); }
        :
            identity$2));
    return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;
}
function combineLatestInit(observables, scheduler, valueTransform) {
    if (valueTransform === void 0) { valueTransform = identity$2; }
    return function (subscriber) {
        maybeSchedule(scheduler, function () {
            var length = observables.length;
            var values = new Array(length);
            var active = length;
            var remainingFirstValues = length;
            var _loop_1 = function (i) {
                maybeSchedule(scheduler, function () {
                    var source = from(observables[i], scheduler);
                    var hasFirstValue = false;
                    source.subscribe(createOperatorSubscriber(subscriber, function (value) {
                        values[i] = value;
                        if (!hasFirstValue) {
                            hasFirstValue = true;
                            remainingFirstValues--;
                        }
                        if (!remainingFirstValues) {
                            subscriber.next(valueTransform(values.slice()));
                        }
                    }, function () {
                        if (!--active) {
                            subscriber.complete();
                        }
                    }));
                }, subscriber);
            };
            for (var i = 0; i < length; i++) {
                _loop_1(i);
            }
        }, subscriber);
    };
}
function maybeSchedule(scheduler, execute, subscription) {
    if (scheduler) {
        executeSchedule(subscription, scheduler, execute);
    }
    else {
        execute();
    }
}

function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {
    var buffer = [];
    var active = 0;
    var index = 0;
    var isComplete = false;
    var checkComplete = function () {
        if (isComplete && !buffer.length && !active) {
            subscriber.complete();
        }
    };
    var outerNext = function (value) { return (active < concurrent ? doInnerSub(value) : buffer.push(value)); };
    var doInnerSub = function (value) {
        expand && subscriber.next(value);
        active++;
        var innerComplete = false;
        innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, function (innerValue) {
            onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
            if (expand) {
                outerNext(innerValue);
            }
            else {
                subscriber.next(innerValue);
            }
        }, function () {
            innerComplete = true;
        }, undefined, function () {
            if (innerComplete) {
                try {
                    active--;
                    var _loop_1 = function () {
                        var bufferedValue = buffer.shift();
                        if (innerSubScheduler) {
                            executeSchedule(subscriber, innerSubScheduler, function () { return doInnerSub(bufferedValue); });
                        }
                        else {
                            doInnerSub(bufferedValue);
                        }
                    };
                    while (buffer.length && active < concurrent) {
                        _loop_1();
                    }
                    checkComplete();
                }
                catch (err) {
                    subscriber.error(err);
                }
            }
        }));
    };
    source.subscribe(createOperatorSubscriber(subscriber, outerNext, function () {
        isComplete = true;
        checkComplete();
    }));
    return function () {
        additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
    };
}

function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) { concurrent = Infinity; }
    if (isFunction(resultSelector)) {
        return mergeMap(function (a, i) { return map(function (b, ii) { return resultSelector(a, b, i, ii); })(innerFrom(project(a, i))); }, concurrent);
    }
    else if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
    }
    return operate(function (source, subscriber) { return mergeInternals(source, subscriber, project, concurrent); });
}

function mergeAll(concurrent) {
    if (concurrent === void 0) { concurrent = Infinity; }
    return mergeMap(identity$2, concurrent);
}

function concatAll() {
    return mergeAll(1);
}

function concat() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return concatAll()(from(args, popScheduler(args)));
}

function filter(predicate, thisArg) {
    return operate(function (source, subscriber) {
        var index = 0;
        source.subscribe(createOperatorSubscriber(subscriber, function (value) { return predicate.call(thisArg, value, index++) && subscriber.next(value); }));
    });
}

function catchError(selector) {
    return operate(function (source, subscriber) {
        var innerSub = null;
        var syncUnsub = false;
        var handledResult;
        innerSub = source.subscribe(createOperatorSubscriber(subscriber, undefined, undefined, function (err) {
            handledResult = innerFrom(selector(err, catchError(selector)(source)));
            if (innerSub) {
                innerSub.unsubscribe();
                innerSub = null;
                handledResult.subscribe(subscriber);
            }
            else {
                syncUnsub = true;
            }
        }));
        if (syncUnsub) {
            innerSub.unsubscribe();
            innerSub = null;
            handledResult.subscribe(subscriber);
        }
    });
}

function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
    return function (source, subscriber) {
        var hasState = hasSeed;
        var state = seed;
        var index = 0;
        source.subscribe(createOperatorSubscriber(subscriber, function (value) {
            var i = index++;
            state = hasState
                ?
                    accumulator(state, value, i)
                :
                    ((hasState = true), value);
            emitOnNext && subscriber.next(state);
        }, emitBeforeComplete &&
            (function () {
                hasState && subscriber.next(state);
                subscriber.complete();
            })));
    };
}

function reduce(accumulator, seed) {
    return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));
}

var arrReducer = function (arr, value) { return (arr.push(value), arr); };
function toArray() {
    return operate(function (source, subscriber) {
        reduce(arrReducer, [])(source).subscribe(subscriber);
    });
}

function fromSubscribable(subscribable) {
    return new Observable(function (subscriber) { return subscribable.subscribe(subscriber); });
}

var DEFAULT_CONFIG = {
    connector: function () { return new Subject(); },
};
function connect(selector, config) {
    if (config === void 0) { config = DEFAULT_CONFIG; }
    var connector = config.connector;
    return operate(function (source, subscriber) {
        var subject = connector();
        innerFrom(selector(fromSubscribable(subject))).subscribe(subscriber);
        subscriber.add(source.subscribe(subject));
    });
}

function defaultIfEmpty(defaultValue) {
    return operate(function (source, subscriber) {
        var hasValue = false;
        source.subscribe(createOperatorSubscriber(subscriber, function (value) {
            hasValue = true;
            subscriber.next(value);
        }, function () {
            if (!hasValue) {
                subscriber.next(defaultValue);
            }
            subscriber.complete();
        }));
    });
}

function take(count) {
    return count <= 0
        ?
            function () { return EMPTY; }
        : operate(function (source, subscriber) {
            var seen = 0;
            source.subscribe(createOperatorSubscriber(subscriber, function (value) {
                if (++seen <= count) {
                    subscriber.next(value);
                    if (count <= seen) {
                        subscriber.complete();
                    }
                }
            }));
        });
}

function distinctUntilChanged(comparator, keySelector) {
    if (keySelector === void 0) { keySelector = identity$2; }
    comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;
    return operate(function (source, subscriber) {
        var previousKey;
        var first = true;
        source.subscribe(createOperatorSubscriber(subscriber, function (value) {
            var currentKey = keySelector(value);
            if (first || !comparator(previousKey, currentKey)) {
                first = false;
                previousKey = currentKey;
                subscriber.next(value);
            }
        }));
    });
}
function defaultCompare(a, b) {
    return a === b;
}

function throwIfEmpty(errorFactory) {
    if (errorFactory === void 0) { errorFactory = defaultErrorFactory; }
    return operate(function (source, subscriber) {
        var hasValue = false;
        source.subscribe(createOperatorSubscriber(subscriber, function (value) {
            hasValue = true;
            subscriber.next(value);
        }, function () { return (hasValue ? subscriber.complete() : subscriber.error(errorFactory())); }));
    });
}
function defaultErrorFactory() {
    return new EmptyError();
}

function first(predicate, defaultValue) {
    var hasDefaultValue = arguments.length >= 2;
    return function (source) {
        return source.pipe(predicate ? filter(function (v, i) { return predicate(v, i, source); }) : identity$2, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function () { return new EmptyError(); }));
    };
}

function multicast(subjectOrSubjectFactory, selector) {
    var subjectFactory = isFunction(subjectOrSubjectFactory) ? subjectOrSubjectFactory : function () { return subjectOrSubjectFactory; };
    if (isFunction(selector)) {
        return connect(selector, {
            connector: subjectFactory,
        });
    }
    return function (source) { return new ConnectableObservable(source, subjectFactory); };
}

function publishReplay(bufferSize, windowTime, selectorOrScheduler, timestampProvider) {
    if (selectorOrScheduler && !isFunction(selectorOrScheduler)) {
        timestampProvider = selectorOrScheduler;
    }
    var selector = isFunction(selectorOrScheduler) ? selectorOrScheduler : undefined;
    return function (source) { return multicast(new ReplaySubject(bufferSize, windowTime, timestampProvider), selector)(source); };
}

function startWith() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
    }
    var scheduler = popScheduler(values);
    return operate(function (source, subscriber) {
        (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);
    });
}

function switchMap(project, resultSelector) {
    return operate(function (source, subscriber) {
        var innerSubscriber = null;
        var index = 0;
        var isComplete = false;
        var checkComplete = function () { return isComplete && !innerSubscriber && subscriber.complete(); };
        source.subscribe(createOperatorSubscriber(subscriber, function (value) {
            innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
            var innerIndex = 0;
            var outerIndex = index++;
            innerFrom(project(value, outerIndex)).subscribe((innerSubscriber = createOperatorSubscriber(subscriber, function (innerValue) { return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue); }, function () {
                innerSubscriber = null;
                checkComplete();
            })));
        }, function () {
            isComplete = true;
            checkComplete();
        }));
    });
}

function tap(observerOrNext, error, complete) {
    var tapObserver = isFunction(observerOrNext) || error || complete
        ?
            { next: observerOrNext, error: error, complete: complete }
        : observerOrNext;
    return tapObserver
        ? operate(function (source, subscriber) {
            var _a;
            (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
            var isUnsub = true;
            source.subscribe(createOperatorSubscriber(subscriber, function (value) {
                var _a;
                (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);
                subscriber.next(value);
            }, function () {
                var _a;
                isUnsub = false;
                (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
                subscriber.complete();
            }, function (err) {
                var _a;
                isUnsub = false;
                (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);
                subscriber.error(err);
            }, function () {
                var _a, _b;
                if (isUnsub) {
                    (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
                }
                (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
            }));
        })
        :
            identity$2;
}

/* eslint-disable sort-keys */
const AllHashers = {
    Blake2_128: null,
    Blake2_256: null,
    Blake2_128Concat: null,
    Twox128: null,
    Twox256: null,
    Twox64Concat: null,
    // new in v11
    Identity: null
};

const runtime$r = {
    Metadata: [
        {
            methods: {
                metadata: {
                    description: 'Returns the metadata of a runtime',
                    params: [],
                    type: 'OpaqueMetadata'
                }
            },
            version: 1
        }
    ]
};

const v9 = {
    // v9
    ErrorMetadataV9: {
        name: 'Text',
        docs: 'Vec<Text>'
    },
    EventMetadataV9: {
        name: 'Text',
        args: 'Vec<Type>',
        docs: 'Vec<Text>'
    },
    FunctionArgumentMetadataV9: {
        name: 'Text',
        type: 'Type'
    },
    FunctionMetadataV9: {
        name: 'Text',
        args: 'Vec<FunctionArgumentMetadataV9>',
        docs: 'Vec<Text>'
    },
    MetadataV9: {
        modules: 'Vec<ModuleMetadataV9>'
    },
    ModuleConstantMetadataV9: {
        name: 'Text',
        type: 'Type',
        value: 'Bytes',
        docs: 'Vec<Text>'
    },
    ModuleMetadataV9: {
        name: 'Text',
        storage: 'Option<StorageMetadataV9>',
        calls: 'Option<Vec<FunctionMetadataV9>>',
        events: 'Option<Vec<EventMetadataV9>>',
        constants: 'Vec<ModuleConstantMetadataV9>',
        errors: 'Vec<ErrorMetadataV9>'
    },
    StorageEntryMetadataV9: {
        name: 'Text',
        modifier: 'StorageEntryModifierV9',
        type: 'StorageEntryTypeV9',
        fallback: 'Bytes',
        docs: 'Vec<Text>'
    },
    StorageEntryModifierV9: {
        _enum: ['Optional', 'Default', 'Required']
    },
    StorageEntryTypeV9: {
        _enum: {
            Plain: 'Type',
            Map: {
                hasher: 'StorageHasherV9',
                key: 'Type',
                value: 'Type',
                linked: 'bool'
            },
            DoubleMap: {
                hasher: 'StorageHasherV9',
                key1: 'Type',
                key2: 'Type',
                value: 'Type',
                key2Hasher: 'StorageHasherV9'
            }
        }
    },
    StorageHasherV9: {
        _enum: {
            Blake2_128: null,
            Blake2_256: null,
            Twox128: null,
            Twox256: null,
            Twox64Concat: null
        }
    },
    StorageMetadataV9: {
        prefix: 'Text',
        items: 'Vec<StorageEntryMetadataV9>'
    }
};

const v10 = {
    // v10
    ErrorMetadataV10: 'ErrorMetadataV9',
    EventMetadataV10: 'EventMetadataV9',
    FunctionArgumentMetadataV10: 'FunctionArgumentMetadataV9',
    FunctionMetadataV10: 'FunctionMetadataV9',
    MetadataV10: {
        modules: 'Vec<ModuleMetadataV10>'
    },
    ModuleConstantMetadataV10: 'ModuleConstantMetadataV9',
    ModuleMetadataV10: {
        name: 'Text',
        storage: 'Option<StorageMetadataV10>',
        calls: 'Option<Vec<FunctionMetadataV10>>',
        events: 'Option<Vec<EventMetadataV10>>',
        constants: 'Vec<ModuleConstantMetadataV10>',
        errors: 'Vec<ErrorMetadataV10>'
    },
    StorageEntryModifierV10: 'StorageEntryModifierV9',
    StorageEntryMetadataV10: {
        name: 'Text',
        modifier: 'StorageEntryModifierV10',
        type: 'StorageEntryTypeV10',
        fallback: 'Bytes',
        docs: 'Vec<Text>'
    },
    StorageEntryTypeV10: {
        _enum: {
            Plain: 'Type',
            Map: {
                hasher: 'StorageHasherV10',
                key: 'Type',
                value: 'Type',
                linked: 'bool'
            },
            DoubleMap: {
                hasher: 'StorageHasherV10',
                key1: 'Type',
                key2: 'Type',
                value: 'Type',
                key2Hasher: 'StorageHasherV10'
            }
        }
    },
    StorageMetadataV10: {
        prefix: 'Text',
        items: 'Vec<StorageEntryMetadataV10>'
    },
    StorageHasherV10: {
        _enum: {
            Blake2_128: null,
            Blake2_256: null,
            Blake2_128Concat: null,
            Twox128: null,
            Twox256: null,
            Twox64Concat: null
        }
    }
};

const v11 = {
    // v11
    ErrorMetadataV11: 'ErrorMetadataV10',
    EventMetadataV11: 'EventMetadataV10',
    ExtrinsicMetadataV11: {
        version: 'u8',
        signedExtensions: 'Vec<Text>'
    },
    FunctionArgumentMetadataV11: 'FunctionArgumentMetadataV10',
    FunctionMetadataV11: 'FunctionMetadataV10',
    MetadataV11: {
        modules: 'Vec<ModuleMetadataV11>',
        extrinsic: 'ExtrinsicMetadataV11'
    },
    ModuleConstantMetadataV11: 'ModuleConstantMetadataV10',
    ModuleMetadataV11: {
        name: 'Text',
        storage: 'Option<StorageMetadataV11>',
        calls: 'Option<Vec<FunctionMetadataV11>>',
        events: 'Option<Vec<EventMetadataV11>>',
        constants: 'Vec<ModuleConstantMetadataV11>',
        errors: 'Vec<ErrorMetadataV11>'
    },
    StorageEntryModifierV11: 'StorageEntryModifierV10',
    StorageEntryMetadataV11: {
        name: 'Text',
        modifier: 'StorageEntryModifierV11',
        type: 'StorageEntryTypeV11',
        fallback: 'Bytes',
        docs: 'Vec<Text>'
    },
    StorageEntryTypeV11: {
        _enum: {
            Plain: 'Type',
            Map: {
                hasher: 'StorageHasherV11',
                key: 'Type',
                value: 'Type',
                linked: 'bool'
            },
            DoubleMap: {
                hasher: 'StorageHasherV11',
                key1: 'Type',
                key2: 'Type',
                value: 'Type',
                key2Hasher: 'StorageHasherV11'
            }
        }
    },
    StorageMetadataV11: {
        prefix: 'Text',
        items: 'Vec<StorageEntryMetadataV11>'
    },
    StorageHasherV11: {
        _enum: AllHashers
    }
};

const v12 = {
    // v12
    ErrorMetadataV12: 'ErrorMetadataV11',
    EventMetadataV12: 'EventMetadataV11',
    ExtrinsicMetadataV12: 'ExtrinsicMetadataV11',
    FunctionArgumentMetadataV12: 'FunctionArgumentMetadataV11',
    FunctionMetadataV12: 'FunctionMetadataV11',
    MetadataV12: {
        modules: 'Vec<ModuleMetadataV12>',
        extrinsic: 'ExtrinsicMetadataV12'
    },
    ModuleConstantMetadataV12: 'ModuleConstantMetadataV11',
    ModuleMetadataV12: {
        name: 'Text',
        storage: 'Option<StorageMetadataV12>',
        calls: 'Option<Vec<FunctionMetadataV12>>',
        events: 'Option<Vec<EventMetadataV12>>',
        constants: 'Vec<ModuleConstantMetadataV12>',
        errors: 'Vec<ErrorMetadataV12>',
        index: 'u8'
    },
    StorageEntryModifierV12: 'StorageEntryModifierV11',
    StorageEntryMetadataV12: 'StorageEntryMetadataV11',
    StorageEntryTypeV12: 'StorageEntryTypeV11',
    StorageMetadataV12: 'StorageMetadataV11',
    StorageHasherV12: 'StorageHasherV11'
};

const v13 = {
    // v13
    ErrorMetadataV13: 'ErrorMetadataV12',
    EventMetadataV13: 'EventMetadataV12',
    ExtrinsicMetadataV13: 'ExtrinsicMetadataV12',
    FunctionArgumentMetadataV13: 'FunctionArgumentMetadataV12',
    FunctionMetadataV13: 'FunctionMetadataV12',
    MetadataV13: {
        modules: 'Vec<ModuleMetadataV13>',
        extrinsic: 'ExtrinsicMetadataV13'
    },
    ModuleConstantMetadataV13: 'ModuleConstantMetadataV12',
    ModuleMetadataV13: {
        name: 'Text',
        storage: 'Option<StorageMetadataV13>',
        calls: 'Option<Vec<FunctionMetadataV13>>',
        events: 'Option<Vec<EventMetadataV13>>',
        constants: 'Vec<ModuleConstantMetadataV13>',
        errors: 'Vec<ErrorMetadataV13>',
        index: 'u8'
    },
    StorageEntryModifierV13: 'StorageEntryModifierV12',
    StorageEntryMetadataV13: {
        name: 'Text',
        modifier: 'StorageEntryModifierV13',
        type: 'StorageEntryTypeV13',
        fallback: 'Bytes',
        docs: 'Vec<Text>'
    },
    StorageEntryTypeV13: {
        _enum: {
            Plain: 'Type',
            Map: {
                hasher: 'StorageHasherV13',
                key: 'Type',
                value: 'Type',
                linked: 'bool'
            },
            DoubleMap: {
                hasher: 'StorageHasherV13',
                key1: 'Type',
                key2: 'Type',
                value: 'Type',
                key2Hasher: 'StorageHasherV13'
            },
            NMap: {
                keyVec: 'Vec<Type>',
                hashers: 'Vec<StorageHasherV13>',
                value: 'Type'
            }
        }
    },
    StorageMetadataV13: {
        prefix: 'Text',
        items: 'Vec<StorageEntryMetadataV13>'
    },
    StorageHasherV13: 'StorageHasherV12'
};

/* eslint-disable sort-keys */
const Si1Variant = {
    name: 'Text',
    fields: 'Vec<Si1Field>',
    index: 'u8',
    docs: 'Vec<Text>'
};
const v1$1 = {
    Si1Field: {
        name: 'Option<Text>',
        type: 'Si1LookupTypeId',
        typeName: 'Option<Text>',
        docs: 'Vec<Text>'
    },
    Si1LookupTypeId: 'Compact<u32>',
    Si1Path: 'Si0Path',
    Si1Type: {
        path: 'Si1Path',
        params: 'Vec<Si1TypeParameter>',
        def: 'Si1TypeDef',
        docs: 'Vec<Text>'
    },
    Si1TypeDef: {
        _enum: {
            Composite: 'Si1TypeDefComposite',
            Variant: 'Si1TypeDefVariant',
            Sequence: 'Si1TypeDefSequence',
            Array: 'Si1TypeDefArray',
            Tuple: 'Si1TypeDefTuple',
            Primitive: 'Si1TypeDefPrimitive',
            Compact: 'Si1TypeDefCompact',
            BitSequence: 'Si1TypeDefBitSequence',
            // NOTE: This is specific to the implementation for pre-v14 metadata
            // compatibility (always keep this as the last entry in the enum)
            HistoricMetaCompat: 'Type'
        }
    },
    Si1TypeDefArray: {
        len: 'u32',
        type: 'Si1LookupTypeId'
    },
    Si1TypeDefBitSequence: {
        bitStoreType: 'Si1LookupTypeId',
        bitOrderType: 'Si1LookupTypeId'
    },
    Si1TypeDefCompact: {
        type: 'Si1LookupTypeId'
    },
    Si1TypeDefComposite: {
        fields: 'Vec<Si1Field>'
    },
    Si1TypeDefPrimitive: 'Si0TypeDefPrimitive',
    Si1TypeDefSequence: {
        type: 'Si1LookupTypeId'
    },
    Si1TypeDefTuple: 'Vec<Si1LookupTypeId>',
    Si1TypeParameter: {
        name: 'Text',
        type: 'Option<Si1LookupTypeId>'
    },
    Si1TypeDefVariant: {
        variants: 'Vec<Si1Variant>'
    },
    Si1Variant
};

const v14 = {
    // registry
    PortableTypeV14: {
        id: 'Si1LookupTypeId',
        type: 'Si1Type'
    },
    // compatibility with earlier layouts, i.e. don't break previous users
    ErrorMetadataV14: objectSpread({}, Si1Variant, { args: 'Vec<Type>' }),
    EventMetadataV14: objectSpread({}, Si1Variant, { args: 'Vec<Type>' }),
    FunctionArgumentMetadataV14: {
        name: 'Text',
        type: 'Type',
        typeName: 'Option<Type>'
    },
    FunctionMetadataV14: objectSpread({}, Si1Variant, { args: 'Vec<FunctionArgumentMetadataV14>' }),
    // V14
    ExtrinsicMetadataV14: {
        type: 'SiLookupTypeId',
        version: 'u8',
        signedExtensions: 'Vec<SignedExtensionMetadataV14>'
    },
    MetadataV14: {
        lookup: 'PortableRegistry',
        pallets: 'Vec<PalletMetadataV14>',
        extrinsic: 'ExtrinsicMetadataV14',
        type: 'SiLookupTypeId'
    },
    PalletCallMetadataV14: {
        type: 'SiLookupTypeId'
    },
    PalletConstantMetadataV14: {
        name: 'Text',
        type: 'SiLookupTypeId',
        value: 'Bytes',
        docs: 'Vec<Text>'
    },
    PalletErrorMetadataV14: {
        type: 'SiLookupTypeId'
    },
    PalletEventMetadataV14: {
        type: 'SiLookupTypeId'
    },
    PalletMetadataV14: {
        name: 'Text',
        storage: 'Option<PalletStorageMetadataV14>',
        calls: 'Option<PalletCallMetadataV14>',
        events: 'Option<PalletEventMetadataV14>',
        constants: 'Vec<PalletConstantMetadataV14>',
        errors: 'Option<PalletErrorMetadataV14>',
        index: 'u8'
    },
    PalletStorageMetadataV14: {
        prefix: 'Text',
        // NOTE: Renamed from entries
        items: 'Vec<StorageEntryMetadataV14>'
    },
    SignedExtensionMetadataV14: {
        identifier: 'Text',
        type: 'SiLookupTypeId',
        additionalSigned: 'SiLookupTypeId'
    },
    StorageEntryMetadataV14: {
        name: 'Text',
        modifier: 'StorageEntryModifierV14',
        type: 'StorageEntryTypeV14',
        fallback: 'Bytes',
        docs: 'Vec<Text>'
    },
    StorageEntryModifierV14: 'StorageEntryModifierV13',
    StorageEntryTypeV14: {
        _enum: {
            Plain: 'SiLookupTypeId',
            Map: {
                hashers: 'Vec<StorageHasherV14>',
                key: 'SiLookupTypeId',
                value: 'SiLookupTypeId'
            }
        }
    },
    StorageHasherV14: 'StorageHasherV13'
};

var definitions$14 = {
    rpc: {},
    runtime: runtime$r,
    types: objectSpread({}, v9, v10, v11, v12, v13, v14, {
        // latest mappings
        ErrorMetadataLatest: 'ErrorMetadataV14',
        EventMetadataLatest: 'EventMetadataV14',
        ExtrinsicMetadataLatest: 'ExtrinsicMetadataV14',
        FunctionArgumentMetadataLatest: 'FunctionArgumentMetadataV14',
        FunctionMetadataLatest: 'FunctionMetadataV14',
        MetadataLatest: 'MetadataV14',
        PalletCallMetadataLatest: 'PalletCallMetadataV14',
        PalletConstantMetadataLatest: 'PalletConstantMetadataV14',
        PalletErrorMetadataLatest: 'PalletErrorMetadataV14',
        PalletEventMetadataLatest: 'PalletEventMetadataV14',
        PalletMetadataLatest: 'PalletMetadataV14',
        PalletStorageMetadataLatest: 'PalletStorageMetadataV14',
        PortableType: 'PortableTypeV14',
        SignedExtensionMetadataLatest: 'SignedExtensionMetadataV14',
        StorageEntryMetadataLatest: 'StorageEntryMetadataV14',
        StorageEntryModifierLatest: 'StorageEntryModifierV14',
        StorageEntryTypeLatest: 'StorageEntryTypeV14',
        StorageHasher: 'StorageHasherV14',
        // additional types
        OpaqueMetadata: 'Opaque<Bytes>',
        // the enum containing all the mappings
        MetadataAll: {
            _enum: {
                V0: 'DoNotConstruct<MetadataV0>',
                V1: 'DoNotConstruct<MetadataV1>',
                V2: 'DoNotConstruct<MetadataV2>',
                V3: 'DoNotConstruct<MetadataV3>',
                V4: 'DoNotConstruct<MetadataV4>',
                V5: 'DoNotConstruct<MetadataV5>',
                V6: 'DoNotConstruct<MetadataV6>',
                V7: 'DoNotConstruct<MetadataV7>',
                V8: 'DoNotConstruct<MetadataV8>',
                // First version on Kusama in V9, dropping will be problematic
                V9: 'MetadataV9',
                V10: 'MetadataV10',
                V11: 'MetadataV11',
                V12: 'MetadataV12',
                V13: 'MetadataV13',
                V14: 'MetadataV14'
            }
        }
    })
};

const CORE_V1_TO_V4 = {
    execute_block: {
        description: 'Execute the given block.',
        params: [
            {
                name: 'block',
                type: 'Block'
            }
        ],
        type: 'Null'
    }
};
const CORE_V1_TO_V2 = {
    version: {
        description: 'Returns the version of the runtime.',
        params: [],
        type: 'RuntimeVersionPre3'
    }
};
const CORE_V2_TO_V4 = {
    initialize_block: {
        description: 'Initialize a block with the given header.',
        params: [
            {
                name: 'header',
                type: 'Header'
            }
        ],
        type: 'Null'
    }
};
const runtime$q = {
    Core: [
        {
            methods: objectSpread({
                version: {
                    description: 'Returns the version of the runtime.',
                    params: [],
                    type: 'RuntimeVersion'
                }
            }, CORE_V1_TO_V4, CORE_V2_TO_V4),
            version: 4
        },
        {
            methods: objectSpread({
                version: {
                    description: 'Returns the version of the runtime.',
                    params: [],
                    type: 'RuntimeVersionPre4'
                }
            }, CORE_V1_TO_V4, CORE_V2_TO_V4),
            version: 3
        },
        {
            methods: objectSpread({}, CORE_V1_TO_V2, CORE_V1_TO_V4, CORE_V2_TO_V4),
            version: 2
        },
        {
            methods: objectSpread({
                initialise_block: {
                    description: 'Initialize a block with the given header.',
                    params: [
                        {
                            name: 'header',
                            type: 'Header'
                        }
                    ],
                    type: 'Null'
                }
            }, CORE_V1_TO_V2, CORE_V1_TO_V4),
            version: 1
        }
    ]
};

const numberTypes = {
    Fixed64: 'Int<64, Fixed64>',
    FixedI64: 'Int<64, FixedI64>',
    FixedU64: 'UInt<64, FixedU64>',
    Fixed128: 'Int<128, Fixed128>',
    FixedI128: 'Int<128, FixedI128>',
    FixedU128: 'UInt<128, FixedU128>',
    I32F32: 'Int<64, I32F32>',
    U32F32: 'UInt<64, U32F32>',
    PerU16: 'UInt<16, PerU16>',
    Perbill: 'UInt<32, Perbill>',
    Percent: 'UInt<8, Percent>',
    Permill: 'UInt<32, Permill>',
    Perquintill: 'UInt<64, Perquintill>'
};
const knownOrigins = {
    //
    // (1) Defaults from Substrate
    //
    Council: 'CollectiveOrigin',
    System: 'SystemOrigin',
    TechnicalCommittee: 'CollectiveOrigin',
    //
    // (2) Defaults from Polkadot
    //
    Xcm: 'XcmOrigin',
    XcmPallet: 'XcmOrigin',
    //
    // (3) Defaults from Acala
    //
    Authority: 'AuthorityOrigin',
    GeneralCouncil: 'CollectiveOrigin'
};
var definitions$13 = {
    rpc: {},
    runtime: runtime$q,
    types: objectSpread({}, numberTypes, {
        AccountId: 'AccountId32',
        AccountId20: 'GenericEthereumAccountId',
        AccountId32: 'GenericAccountId32',
        AccountId33: 'GenericAccountId33',
        AccountIdOf: 'AccountId',
        AccountIndex: 'GenericAccountIndex',
        Address: 'MultiAddress',
        AssetId: 'u32',
        Balance: 'UInt<128, Balance>',
        BalanceOf: 'Balance',
        Block: 'GenericBlock',
        BlockNumber: 'u32',
        BlockNumberFor: 'BlockNumber',
        BlockNumberOf: 'BlockNumber',
        Call: 'GenericCall',
        CallHash: 'Hash',
        CallHashOf: 'CallHash',
        ChangesTrieConfiguration: {
            digestInterval: 'u32',
            digestLevels: 'u32'
        },
        ChangesTrieSignal: {
            _enum: {
                NewConfiguration: 'Option<ChangesTrieConfiguration>'
            }
        },
        ConsensusEngineId: 'GenericConsensusEngineId',
        CodecHash: 'Hash',
        CrateVersion: {
            major: 'u16',
            minor: 'u8',
            patch: 'u8'
        },
        Digest: {
            logs: 'Vec<DigestItem>'
        },
        DigestItem: {
            _enum: {
                Other: 'Bytes',
                AuthoritiesChange: 'Vec<AuthorityId>',
                ChangesTrieRoot: 'Hash',
                SealV0: 'SealV0',
                Consensus: 'Consensus',
                Seal: 'Seal',
                PreRuntime: 'PreRuntime',
                ChangesTrieSignal: 'ChangesTrieSignal',
                RuntimeEnvironmentUpdated: 'Null' // 8
            }
        },
        ExtrinsicsWeight: {
            normal: 'Weight',
            operational: 'Weight'
        },
        H32: '[u8; 4; H32]',
        H64: '[u8; 8; H64]',
        H128: '[u8; 16; H128]',
        H160: '[u8; 20; H160]',
        H256: '[u8; 32; H256]',
        H512: '[u8; 64; H512]',
        H1024: '[u8; 128; H1024]',
        H2048: '[u8; 256; H2048]',
        Hash: 'H256',
        Header: {
            parentHash: 'Hash',
            number: 'Compact<BlockNumber>',
            stateRoot: 'Hash',
            extrinsicsRoot: 'Hash',
            digest: 'Digest'
        },
        HeaderPartial: {
            parentHash: 'Hash',
            // since we only parse JSON with this, having non-compact works
            number: 'BlockNumber'
        },
        IndicesLookupSource: 'GenericLookupSource',
        Index: 'u32',
        Justification: '(ConsensusEngineId, EncodedJustification)',
        EncodedJustification: 'Bytes',
        Justifications: 'Vec<Justification>',
        KeyValue: '(StorageKey, StorageData)',
        KeyTypeId: 'u32',
        LockIdentifier: '[u8; 8]',
        LookupSource: 'MultiAddress',
        LookupTarget: 'AccountId',
        ModuleId: 'LockIdentifier',
        MultiAddress: 'GenericMultiAddress',
        MultiSigner: {
            _enum: {
                Ed25519: '[u8; 32]',
                Sr25519: '[u8; 32]',
                Ecdsa: '[u8; 33]'
            }
        },
        Moment: 'UInt<64, Moment>',
        OpaqueCall: 'Bytes',
        Origin: 'DoNotConstruct<Origin>',
        OriginCaller: {
            _enum: {
                // this should be dynamically built from the actual modules, based on index
                System: 'SystemOrigin'
            }
        },
        PalletId: 'LockIdentifier',
        PalletsOrigin: 'OriginCaller',
        PalletVersion: {
            major: 'u16',
            minor: 'u8',
            patch: 'u8'
        },
        Pays: {
            _enum: ['Yes', 'No']
        },
        Phantom: 'Null',
        PhantomData: 'Null',
        Releases: {
            _enum: ['V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10']
        },
        RuntimeCall: 'Call',
        RuntimeEvent: 'Event',
        RuntimeDbWeight: {
            read: 'Weight',
            write: 'Weight'
        },
        SignedBlock: 'SignedBlockWithJustifications',
        SignedBlockWithJustification: {
            block: 'Block',
            justification: 'Option<EncodedJustification>'
        },
        SignedBlockWithJustifications: {
            block: 'Block',
            justifications: 'Option<Justifications>'
        },
        Slot: 'u64',
        SlotDuration: 'u64',
        StorageData: 'Bytes',
        StorageInfo: {
            palletName: 'Bytes',
            storage_name: 'Bytes',
            prefix: 'Bytes',
            maxValues: 'Option<u32>',
            maxSize: 'Option<u32>'
        },
        StorageProof: {
            trieNodes: 'Vec<Bytes>'
        },
        TransactionPriority: 'u64',
        TransactionLongevity: 'u64',
        TransactionTag: 'Bytes',
        TransactionInfo: {
            _alias: {
                dataSize: 'size'
            },
            chunkRoot: 'H256',
            contentHash: 'H256',
            dataSize: 'u32',
            blockChunks: 'u32'
        },
        TransactionStorageProof: {
            chunk: 'Vec<u8>',
            proof: 'Vec<Vec<u8>>'
        },
        ValidatorId: 'AccountId',
        ValidatorIdOf: 'ValidatorId',
        WeightV0: 'u32',
        WeightV1: 'u64',
        WeightV2: {
            refTime: 'Compact<u64>',
            proofSize: 'Compact<u64>'
        },
        Weight: 'WeightV2',
        WeightMultiplier: 'Fixed64',
        // digest
        PreRuntime: '(ConsensusEngineId, Bytes)',
        SealV0: '(u64, Signature)',
        Seal: '(ConsensusEngineId, Bytes)',
        Consensus: '(ConsensusEngineId, Bytes)'
    })
};

/* eslint-disable sort-keys */
const v0$1 = {
    Si0Field: {
        name: 'Option<Text>',
        type: 'Si0LookupTypeId',
        typeName: 'Option<Text>',
        docs: 'Vec<Text>'
    },
    Si0LookupTypeId: 'u32',
    Si0Path: 'Vec<Text>',
    Si0Type: {
        path: 'Si0Path',
        params: 'Vec<Si0LookupTypeId>',
        def: 'Si0TypeDef'
    },
    Si0TypeDef: {
        _enum: {
            Composite: 'Si0TypeDefComposite',
            Variant: 'Si0TypeDefVariant',
            Sequence: 'Si0TypeDefSequence',
            Array: 'Si0TypeDefArray',
            Tuple: 'Si0TypeDefTuple',
            Primitive: 'Si0TypeDefPrimitive',
            Compact: 'Si0TypeDefCompact',
            Phantom: 'Si0TypeDefPhantom',
            BitSequence: 'Si0TypeDefBitSequence'
        }
    },
    Si0TypeDefArray: {
        len: 'u32',
        type: 'Si0LookupTypeId'
    },
    Si0TypeDefBitSequence: {
        bitStoreType: 'Si0LookupTypeId',
        bitOrderType: 'Si0LookupTypeId'
    },
    Si0TypeDefCompact: {
        type: 'Si0LookupTypeId'
    },
    Si0TypeDefComposite: {
        fields: 'Vec<Si0Field>'
    },
    Si0TypeDefPhantom: 'Null',
    Si0TypeDefVariant: {
        variants: 'Vec<Si0Variant>'
    },
    Si0TypeDefPrimitive: {
        _enum: ['Bool', 'Char', 'Str', 'U8', 'U16', 'U32', 'U64', 'U128', 'U256', 'I8', 'I16', 'I32', 'I64', 'I128', 'I256']
    },
    Si0TypeDefSequence: {
        type: 'Si0LookupTypeId'
    },
    Si0TypeDefTuple: 'Vec<Si0LookupTypeId>',
    Si0TypeParameter: {
        name: 'Text',
        type: 'Option<Si0LookupTypeId>'
    },
    Si0Variant: {
        name: 'Text',
        fields: 'Vec<Si0Field>',
        index: 'Option<u8>',
        discriminant: 'Option<u64>',
        docs: 'Vec<Text>'
    }
};

/* eslint-disable sort-keys */
var definitions$12 = {
    rpc: {},
    types: objectSpread({}, v0$1, v1$1, {
        // latest mappings
        SiField: 'Si1Field',
        SiLookupTypeId: 'Si1LookupTypeId',
        SiPath: 'Si1Path',
        SiType: 'Si1Type',
        SiTypeDef: 'Si1TypeDef',
        SiTypeDefArray: 'Si1TypeDefArray',
        SiTypeDefBitSequence: 'Si1TypeDefBitSequence',
        SiTypeDefCompact: 'Si1TypeDefCompact',
        SiTypeDefComposite: 'Si1TypeDefComposite',
        SiTypeDefPrimitive: 'Si1TypeDefPrimitive',
        SiTypeDefSequence: 'Si1TypeDefSequence',
        SiTypeDefTuple: 'Si1TypeDefTuple',
        SiTypeParameter: 'Si1TypeParameter',
        SiTypeDefVariant: 'Si1TypeDefVariant',
        SiVariant: 'Si1Variant'
    })
};

const runtime$p = {
    AssetsApi: [
        {
            methods: {
                account_balances: {
                    description: 'Return the current set of authorities.',
                    params: [
                        {
                            name: 'account',
                            type: 'AccountId'
                        }
                    ],
                    type: 'Vec<(u32, TAssetBalance)>'
                }
            },
            version: 1
        }
    ]
};

var definitions$11 = {
    rpc: {},
    runtime: runtime$p,
    types: {
        AssetApprovalKey: {
            owner: 'AccountId',
            delegate: 'AccountId'
        },
        AssetApproval: {
            amount: 'TAssetBalance',
            deposit: 'TAssetDepositBalance'
        },
        AssetBalance: {
            balance: 'TAssetBalance',
            isFrozen: 'bool',
            isSufficient: 'bool'
        },
        AssetDestroyWitness: {
            accounts: 'Compact<u32>',
            sufficients: 'Compact<u32>',
            approvals: 'Compact<u32>'
        },
        AssetDetails: {
            owner: 'AccountId',
            issuer: 'AccountId',
            admin: 'AccountId',
            freezer: 'AccountId',
            supply: 'TAssetBalance',
            deposit: 'TAssetDepositBalance',
            minBalance: 'TAssetBalance',
            isSufficient: 'bool',
            accounts: 'u32',
            sufficients: 'u32',
            approvals: 'u32',
            isFrozen: 'bool'
        },
        AssetMetadata: {
            deposit: 'TAssetDepositBalance',
            name: 'Vec<u8>',
            symbol: 'Vec<u8>',
            decimals: 'u8',
            isFrozen: 'bool'
        },
        TAssetBalance: 'u64',
        TAssetDepositBalance: 'BalanceOf'
    }
};

var definitions$10 = {
    rpc: {},
    types: {
        UncleEntryItem: {
            _enum: {
                InclusionHeight: 'BlockNumber',
                Uncle: '(Hash, Option<AccountId>)'
            }
        }
    }
};

const runtime$o = {
    AuraApi: [
        {
            methods: {
                authorities: {
                    description: 'Return the current set of authorities.',
                    params: [],
                    type: 'Vec<AuthorityId>'
                },
                slot_duration: {
                    description: 'Returns the slot duration for Aura.',
                    params: [],
                    type: 'SlotDuration'
                }
            },
            version: 1
        }
    ]
};

var definitions$$ = {
    rpc: {},
    runtime: runtime$o,
    types: {
        RawAuraPreDigest: {
            slotNumber: 'u64'
        }
    }
};

const rpc$g = {
    epochAuthorship: {
        description: 'Returns data about which slots (primary or secondary) can be claimed in the current epoch with the keys in the keystore',
        isUnsafe: true,
        params: [],
        type: 'HashMap<AuthorityId, EpochAuthorship>'
    }
};

const V1_V2_SHARED = {
    current_epoch: {
        description: 'Returns information regarding the current epoch.',
        params: [],
        type: 'Epoch'
    },
    current_epoch_start: {
        description: 'Returns the slot that started the current epoch.',
        params: [],
        type: 'Slot'
    },
    generate_key_ownership_proof: {
        description: 'Generates a proof of key ownership for the given authority in the current epoch.',
        params: [
            {
                name: 'slot',
                type: 'Slot'
            },
            {
                name: 'authorityId',
                type: 'AuthorityId'
            }
        ],
        type: 'Option<OpaqueKeyOwnershipProof>'
    },
    next_epoch: {
        description: 'Returns information regarding the next epoch (which was already previously announced).',
        params: [],
        type: 'Epoch'
    },
    submit_report_equivocation_unsigned_extrinsic: {
        description: 'Submits an unsigned extrinsic to report an equivocation.',
        params: [
            {
                name: 'equivocationProof',
                type: 'BabeEquivocationProof'
            },
            {
                name: 'keyOwnerProof',
                type: 'OpaqueKeyOwnershipProof'
            }
        ],
        type: 'Option<Null>'
    }
};
const runtime$n = {
    BabeApi: [
        {
            methods: objectSpread({
                configuration: {
                    description: 'Return the genesis configuration for BABE. The configuration is only read on genesis.',
                    params: [],
                    type: 'BabeGenesisConfiguration'
                }
            }, V1_V2_SHARED),
            version: 2
        },
        {
            methods: objectSpread({
                configuration: {
                    description: 'Return the configuration for BABE. Version 1.',
                    params: [],
                    type: 'BabeGenesisConfigurationV1'
                }
            }, V1_V2_SHARED),
            version: 1
        }
    ]
};

var definitions$_ = {
    rpc: rpc$g,
    runtime: runtime$n,
    types: {
        AllowedSlots: {
            _enum: ['PrimarySlots', 'PrimaryAndSecondaryPlainSlots', 'PrimaryAndSecondaryVRFSlots']
        },
        BabeAuthorityWeight: 'u64',
        BabeEpochConfiguration: {
            c: '(u64, u64)',
            allowedSlots: 'AllowedSlots'
        },
        BabeBlockWeight: 'u32',
        BabeEquivocationProof: {
            offender: 'AuthorityId',
            slotNumber: 'SlotNumber',
            firstHeader: 'Header',
            secondHeader: 'Header'
        },
        BabeGenesisConfiguration: {
            slotDuration: 'u64',
            epochLength: 'u64',
            c: '(u64, u64)',
            genesisAuthorities: 'Vec<(AuthorityId, BabeAuthorityWeight)>',
            randomness: 'Randomness',
            allowedSlots: 'AllowedSlots'
        },
        BabeGenesisConfigurationV1: {
            slotDuration: 'u64',
            epochLength: 'u64',
            c: '(u64, u64)',
            genesisAuthorities: 'Vec<(AuthorityId, BabeAuthorityWeight)>',
            randomness: 'Randomness',
            secondarySlots: 'bool'
        },
        BabeWeight: 'u64',
        MaybeRandomness: 'Option<Randomness>',
        MaybeVrf: 'Option<VrfData>',
        Epoch: {
            epochIndex: 'u64',
            startSlot: 'Slot',
            duration: 'u64',
            authorities: 'Vec<(AuthorityId, BabeAuthorityWeight)>',
            randomness: 'Hash',
            config: 'BabeEpochConfiguration'
        },
        EpochAuthorship: {
            primary: 'Vec<u64>',
            secondary: 'Vec<u64>',
            secondary_vrf: 'Vec<u64>'
        },
        NextConfigDescriptor: {
            _enum: {
                V0: 'Null',
                V1: 'NextConfigDescriptorV1'
            }
        },
        NextConfigDescriptorV1: {
            c: '(u64, u64)',
            allowedSlots: 'AllowedSlots'
        },
        OpaqueKeyOwnershipProof: 'Bytes',
        Randomness: 'Hash',
        RawBabePreDigest: {
            _enum: {
                Phantom: 'Null',
                Primary: 'RawBabePreDigestPrimary',
                SecondaryPlain: 'RawBabePreDigestSecondaryPlain',
                SecondaryVRF: 'RawBabePreDigestSecondaryVRF'
            }
        },
        RawBabePreDigestPrimary: {
            authorityIndex: 'u32',
            slotNumber: 'SlotNumber',
            vrfOutput: 'VrfOutput',
            vrfProof: 'VrfProof'
        },
        RawBabePreDigestSecondaryPlain: {
            authorityIndex: 'u32',
            slotNumber: 'SlotNumber'
        },
        RawBabePreDigestSecondaryVRF: {
            authorityIndex: 'u32',
            slotNumber: 'SlotNumber',
            vrfOutput: 'VrfOutput',
            vrfProof: 'VrfProof'
        },
        RawBabePreDigestTo159: {
            _enum: {
                Primary: 'RawBabePreDigestPrimaryTo159',
                Secondary: 'RawBabePreDigestSecondaryTo159'
            }
        },
        RawBabePreDigestPrimaryTo159: {
            authorityIndex: 'u32',
            slotNumber: 'SlotNumber',
            weight: 'BabeBlockWeight',
            vrfOutput: 'VrfOutput',
            vrfProof: 'VrfProof'
        },
        RawBabePreDigestSecondaryTo159: {
            authorityIndex: 'u32',
            slotNumber: 'SlotNumber',
            weight: 'BabeBlockWeight'
        },
        // a cross old/new compatible version of the digest, that is _only_ useful
        // for partial parsing and extraction of the author. This assumes that all
        // entries has the authorityIndex in the first position - and that it is all
        // we are interested in
        RawBabePreDigestCompat: {
            _enum: {
                Zero: 'u32',
                One: 'u32',
                Two: 'u32',
                Three: 'u32'
            }
        },
        SlotNumber: 'u64',
        VrfData: '[u8; 32]',
        VrfOutput: '[u8; 32]',
        VrfProof: '[u8; 64]'
    }
};

var definitions$Z = {
    rpc: {},
    types: {
        AccountData: {
            free: 'Balance',
            reserved: 'Balance',
            miscFrozen: 'Balance',
            feeFrozen: 'Balance'
        },
        BalanceLockTo212: {
            id: 'LockIdentifier',
            amount: 'Balance',
            until: 'BlockNumber',
            reasons: 'WithdrawReasons'
        },
        BalanceLock: {
            id: 'LockIdentifier',
            amount: 'Balance',
            reasons: 'Reasons'
        },
        BalanceStatus: {
            _enum: ['Free', 'Reserved']
        },
        Reasons: {
            _enum: ['Fee', 'Misc', 'All']
        },
        ReserveData: {
            id: 'ReserveIdentifier',
            amount: 'Balance'
        },
        ReserveIdentifier: '[u8; 8]',
        VestingSchedule: {
            offset: 'Balance',
            perBlock: 'Balance',
            startingBlock: 'BlockNumber'
        },
        WithdrawReasons: {
            _set: {
                TransactionPayment: 1,
                Transfer: 2,
                Reserve: 4,
                Fee: 8,
                Tip: 16
            }
        }
    }
};

const rpc$f = {
    getFinalizedHead: {
        description: 'Returns hash of the latest BEEFY finalized block as seen by this client.',
        params: [],
        type: 'H256'
    },
    subscribeJustifications: {
        description: 'Returns the block most recently finalized by BEEFY, alongside side its justification.',
        params: [],
        pubsub: [
            'justifications',
            'subscribeJustifications',
            'unsubscribeJustifications'
        ],
        type: 'BeefySignedCommitment'
    }
};

const BEEFY_V1_V2 = {
    beefy_genesis: {
        description: 'Return the block number where BEEFY consensus is enabled/started',
        params: [],
        type: 'Option<BlockNumber>'
    },
    generate_key_ownership_proof: {
        description: 'Generates a proof of key ownership for the given authority in the given set.',
        params: [
            {
                name: 'setId',
                type: 'ValidatorSetId'
            },
            {
                name: 'authorityId',
                type: 'AuthorityId'
            }
        ],
        type: 'Option<OpaqueKeyOwnershipProof>'
    },
    submit_report_equivocation_unsigned_extrinsic: {
        description: 'Submits an unsigned extrinsic to report an equivocation.',
        params: [
            {
                name: 'equivocationProof',
                type: 'BeefyEquivocationProof'
            },
            {
                name: 'keyOwnerProof',
                type: 'OpaqueKeyOwnershipProof'
            }
        ],
        type: 'Option<Null>'
    },
    validator_set: {
        description: 'Return the current active BEEFY validator set',
        params: [],
        type: 'Option<ValidatorSet>'
    }
};
const BEEFY_MMR_V1 = {
    authority_set_proof: {
        description: 'Return the currently active BEEFY authority set proof.',
        params: [],
        type: 'BeefyAuthoritySet'
    },
    next_authority_set_proof: {
        description: 'Return the next/queued BEEFY authority set proof.',
        params: [],
        type: 'BeefyNextAuthoritySet'
    }
};
const runtime$m = {
    BeefyApi: [
        {
            methods: BEEFY_V1_V2,
            version: 2
        },
        {
            methods: BEEFY_V1_V2,
            version: 1
        }
    ],
    BeefyMmrApi: [
        {
            methods: BEEFY_MMR_V1,
            version: 1
        }
    ]
};

var definitions$Y = {
    rpc: rpc$f,
    runtime: runtime$m,
    types: {
        BeefyAuthoritySet: {
            id: 'u64',
            len: 'u32',
            root: 'H256'
        },
        BeefyCommitment: {
            payload: 'BeefyPayload',
            blockNumber: 'BlockNumber',
            validatorSetId: 'ValidatorSetId'
        },
        BeefyId: '[u8; 33]',
        BeefyEquivocationProof: {
            first: 'BeefyVoteMessage',
            second: 'BeefyVoteMessage'
        },
        BeefySignedCommitment: {
            commitment: 'BeefyCommitment',
            signatures: 'Vec<Option<EcdsaSignature>>'
        },
        BeefyNextAuthoritySet: {
            id: 'u64',
            len: 'u32',
            root: 'H256'
        },
        BeefyPayload: 'Vec<(BeefyPayloadId, Bytes)>',
        BeefyPayloadId: '[u8;2]',
        BeefyVoteMessage: {
            commitment: 'BeefyCommitment',
            id: 'AuthorityId',
            signature: 'Signature'
        },
        MmrRootHash: 'H256',
        ValidatorSetId: 'u64',
        ValidatorSet: {
            validators: 'Vec<AuthorityId>',
            id: 'ValidatorSetId'
        }
    }
};

const runtime$l = {
    Benchmark: [
        {
            methods: {
                benchmark_metadata: {
                    description: 'Get the benchmark metadata available for this runtime.',
                    params: [
                        {
                            name: 'extra',
                            type: 'bool'
                        }
                    ],
                    type: '(Vec<BenchmarkList>, Vec<StorageInfo>)'
                },
                dispatch_benchmark: {
                    description: 'Dispatch the given benchmark.',
                    params: [
                        {
                            name: 'config',
                            type: 'BenchmarkConfig'
                        }
                    ],
                    type: 'Result<Vec<BenchmarkBatch>, Text>'
                }
            },
            version: 1
        }
    ]
};

var definitions$X = {
    rpc: {},
    runtime: runtime$l,
    types: {
        BenchmarkBatch: {
            pallet: 'Text',
            instance: 'Text',
            benchmark: 'Text',
            results: 'Vec<BenchmarkResult>'
        },
        BenchmarkConfig: {
            pallet: 'Bytes',
            benchmark: 'Bytes',
            selectedComponents: 'Vec<(BenchmarkParameter, u32)>',
            verify: 'bool',
            internalRepeats: 'u32'
        },
        BenchmarkList: {
            pallet: 'Bytes',
            instance: 'Bytes',
            benchmarks: 'Vec<BenchmarkMetadata>'
        },
        BenchmarkMetadata: {
            name: 'Bytes',
            components: 'Vec<(BenchmarkParameter, u32, u32)>'
        },
        BenchmarkParameter: {
            _enum: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
        },
        BenchmarkResult: {
            components: 'Vec<(BenchmarkParameter, u32)>',
            extrinsicTime: 'u128',
            storageRootTime: 'u128',
            reads: 'u32',
            repeatReads: 'u32',
            writes: 'u32',
            repeatWrites: 'u32',
            proofSize: 'u32',
            benchKeys: 'Vec<(Vec<u8>, u32, u32, bool)>'
        }
    }
};

const BB_V2_TO_V4 = {
    // this was removed after V4
    random_seed: {
        description: 'Generate a random seed.',
        params: [],
        type: 'Hash'
    }
};
const BB_V2_TO_V5 = {
    apply_extrinsic: {
        description: 'Apply the given extrinsic.',
        params: [
            {
                name: 'extrinsic',
                type: 'Extrinsic'
            }
        ],
        type: 'ApplyExtrinsicResultPre6'
    }
};
const BB_V2_TO_V6 = {
    check_inherents: {
        description: 'Check that the inherents are valid.',
        params: [
            {
                name: 'block',
                type: 'Block'
            },
            {
                name: 'data',
                type: 'InherentData'
            }
        ],
        type: 'CheckInherentsResult'
    },
    inherent_extrinsics: {
        description: 'Generate inherent extrinsics.',
        params: [
            {
                name: 'inherent',
                type: 'InherentData'
            }
        ],
        type: 'Vec<Extrinsic>'
    }
};
const BB_V3_TO_V6 = {
    // renamed in v3 from finalize_block
    finalize_block: {
        description: 'Finish the current block.',
        params: [],
        type: 'Header'
    }
};
const runtime$k = {
    BlockBuilder: [
        {
            methods: objectSpread({
                apply_extrinsic: {
                    description: 'Apply the given extrinsic.',
                    params: [
                        {
                            name: 'extrinsic',
                            type: 'Extrinsic'
                        }
                    ],
                    type: 'ApplyExtrinsicResult'
                }
            }, BB_V2_TO_V6, BB_V3_TO_V6),
            version: 6
        },
        {
            methods: objectSpread({
            // apply_extrinsic result changed in 6
            }, BB_V2_TO_V5, BB_V2_TO_V6, BB_V3_TO_V6),
            version: 5
        },
        {
            methods: objectSpread({
            // random_seed removed
            }, BB_V2_TO_V4, BB_V2_TO_V5, BB_V2_TO_V6, BB_V3_TO_V6),
            version: 4
        },
        {
            methods: objectSpread({
            // finalize_block renamed
            }, BB_V2_TO_V4, BB_V2_TO_V6, BB_V3_TO_V6),
            version: 3
        },
        {
            methods: objectSpread({
                finalise_block: {
                    description: 'Finish the current block.',
                    params: [],
                    type: 'Header'
                }
            }, BB_V2_TO_V4, BB_V2_TO_V6),
            version: 2
        }
    ]
};

var definitions$W = {
    rpc: {},
    runtime: runtime$k,
    types: {
        CheckInherentsResult: {
            okay: 'bool',
            fatalError: 'bool',
            errors: 'InherentData'
        },
        InherentData: {
            data: 'BTreeMap<InherentIdentifier, Bytes>'
        },
        InherentIdentifier: '[u8; 8]'
    }
};

var definitions$V = {
    rpc: {},
    types: {
        CollectiveOrigin: {
            _enum: {
                Members: '(MemberCount, MemberCount)',
                Member: 'AccountId'
            }
        },
        MemberCount: 'u32',
        ProposalIndex: 'u32',
        VotesTo230: {
            index: 'ProposalIndex',
            threshold: 'MemberCount',
            ayes: 'Vec<AccountId>',
            nays: 'Vec<AccountId>'
        },
        Votes: {
            index: 'ProposalIndex',
            threshold: 'MemberCount',
            ayes: 'Vec<AccountId>',
            nays: 'Vec<AccountId>',
            end: 'BlockNumber'
        }
    }
};

var definitions$U = {
    rpc: {},
    types: {
        AuthorityId: 'AccountId',
        RawVRFOutput: '[u8; 32]'
    }
};

const rpc$e = {
    call: {
        deprecated: 'Use the runtime interface `api.call.contractsApi.call` instead',
        description: 'Executes a call to a contract',
        params: [
            {
                name: 'callRequest',
                type: 'ContractCallRequest'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'ContractExecResult'
    },
    getStorage: {
        deprecated: 'Use the runtime interface `api.call.contractsApi.getStorage` instead',
        description: 'Returns the value under a specified storage key in a contract',
        params: [
            {
                name: 'address',
                type: 'AccountId'
            },
            {
                name: 'key',
                type: 'H256'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'Option<Bytes>'
    },
    instantiate: {
        deprecated: 'Use the runtime interface `api.call.contractsApi.instantiate` instead',
        description: 'Instantiate a new contract',
        params: [
            {
                name: 'request',
                type: 'InstantiateRequestV1'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'ContractInstantiateResult'
    },
    rentProjection: {
        deprecated: 'Not available in newer versions of the contracts interfaces',
        description: 'Returns the projected time a given contract will be able to sustain paying its rent',
        params: [
            {
                name: 'address',
                type: 'AccountId'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'Option<BlockNumber>'
    },
    uploadCode: {
        deprecated: 'Use the runtime interface `api.call.contractsApi.uploadCode` instead',
        description: 'Upload new code without instantiating a contract from it',
        // The RPC here is terribly misnamed - somebody forgot how the RPCs
        // are actually done, ie. <module>_<camelCasedMethod>
        endpoint: 'contracts_upload_code',
        params: [
            {
                name: 'uploadRequest',
                type: 'CodeUploadRequest'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'CodeUploadResult'
    }
};

const SHARED_V1_V2 = {
    get_storage: {
        description: 'Query a given storage key in a given contract.',
        params: [
            {
                name: 'address',
                type: 'AccountId'
            },
            {
                name: 'key',
                type: 'Bytes'
            }
        ],
        type: 'Option<Bytes>'
    },
    upload_code: {
        description: 'Upload new code without instantiating a contract from it.',
        params: [
            {
                name: 'origin',
                type: 'AccountId'
            },
            {
                name: 'code',
                type: 'Bytes'
            },
            {
                name: 'storageDepositLimit',
                type: 'Option<Balance>'
            }
        ],
        type: 'CodeUploadResult'
    }
};
const runtime$j = {
    ContractsApi: [
        {
            methods: objectSpread({
                call: {
                    description: 'Perform a call from a specified account to a given contract.',
                    params: [
                        {
                            name: 'origin',
                            type: 'AccountId'
                        },
                        {
                            name: 'dest',
                            type: 'AccountId'
                        },
                        {
                            name: 'value',
                            type: 'Balance'
                        },
                        {
                            name: 'gasLimit',
                            type: 'Option<WeightV2>'
                        },
                        {
                            name: 'storageDepositLimit',
                            type: 'Option<Balance>'
                        },
                        {
                            name: 'inputData',
                            type: 'Vec<u8>'
                        }
                    ],
                    type: 'ContractExecResult'
                },
                instantiate: {
                    description: 'Instantiate a new contract.',
                    params: [
                        {
                            name: 'origin',
                            type: 'AccountId'
                        },
                        {
                            name: 'value',
                            type: 'Balance'
                        },
                        {
                            name: 'gasLimit',
                            type: 'Option<WeightV2>'
                        },
                        {
                            name: 'storageDepositLimit',
                            type: 'Option<Balance>'
                        },
                        {
                            name: 'code',
                            type: 'CodeSource'
                        },
                        {
                            name: 'data',
                            type: 'Bytes'
                        },
                        {
                            name: 'salt',
                            type: 'Bytes'
                        }
                    ],
                    type: 'ContractInstantiateResult'
                }
            }, SHARED_V1_V2),
            version: 2
        },
        {
            methods: objectSpread({
                call: {
                    description: 'Perform a call from a specified account to a given contract.',
                    params: [
                        {
                            name: 'origin',
                            type: 'AccountId'
                        },
                        {
                            name: 'dest',
                            type: 'AccountId'
                        },
                        {
                            name: 'value',
                            type: 'Balance'
                        },
                        {
                            name: 'gasLimit',
                            type: 'u64'
                        },
                        {
                            name: 'storageDepositLimit',
                            type: 'Option<Balance>'
                        },
                        {
                            name: 'inputData',
                            type: 'Vec<u8>'
                        }
                    ],
                    type: 'ContractExecResultU64'
                },
                instantiate: {
                    description: 'Instantiate a new contract.',
                    params: [
                        {
                            name: 'origin',
                            type: 'AccountId'
                        },
                        {
                            name: 'value',
                            type: 'Balance'
                        },
                        {
                            name: 'gasLimit',
                            type: 'u64'
                        },
                        {
                            name: 'storageDepositLimit',
                            type: 'Option<Balance>'
                        },
                        {
                            name: 'code',
                            type: 'CodeSource'
                        },
                        {
                            name: 'data',
                            type: 'Bytes'
                        },
                        {
                            name: 'salt',
                            type: 'Bytes'
                        }
                    ],
                    type: 'ContractInstantiateResultU64'
                }
            }, SHARED_V1_V2),
            version: 1
        }
    ]
};

var definitions$T = {
    rpc: rpc$e,
    runtime: runtime$j,
    types: {
        AliveContractInfo: {
            trieId: 'TrieId',
            storageSize: 'u32',
            pairCount: 'u32',
            codeHash: 'CodeHash',
            rentAllowance: 'Balance',
            rentPaid: 'Balance',
            deductBlock: 'BlockNumber',
            lastWrite: 'Option<BlockNumber>',
            _reserved: 'Option<Null>'
        },
        CodeHash: 'Hash',
        CodeSource: {
            _enum: {
                Upload: 'Bytes',
                Existing: 'Hash'
            }
        },
        CodeUploadRequest: {
            origin: 'AccountId',
            code: 'Bytes',
            storageDepositLimit: 'Option<Balance>'
        },
        CodeUploadResult: 'Result<CodeUploadResultValue, DispatchError>',
        CodeUploadResultValue: {
            codeHash: 'CodeHash',
            deposit: 'Balance'
        },
        ContractCallRequest: {
            origin: 'AccountId',
            dest: 'AccountId',
            value: 'Balance',
            gasLimit: 'u64',
            storageDepositLimit: 'Option<Balance>',
            inputData: 'Bytes'
        },
        ContractExecResultSuccessTo255: {
            status: 'u8',
            data: 'Raw'
        },
        ContractExecResultTo255: {
            _enum: {
                Success: 'ContractExecResultSuccessTo255',
                Error: 'Null'
            }
        },
        ContractExecResultSuccessTo260: {
            flags: 'ContractReturnFlags',
            data: 'Bytes',
            gasConsumed: 'u64'
        },
        ContractExecResultTo260: {
            _enum: {
                Success: 'ContractExecResultSuccessTo260',
                Error: 'Null'
            }
        },
        ContractExecResultOk: {
            flags: 'ContractReturnFlags',
            data: 'Bytes'
        },
        ContractExecResultResult: 'Result<ContractExecResultOk, DispatchError>',
        ContractExecResultTo267: {
            gasConsumed: 'u64',
            debugMessage: 'Text',
            result: 'ContractExecResultResult'
        },
        ContractExecResult: {
            gasConsumed: 'Weight',
            gasRequired: 'Weight',
            storageDeposit: 'StorageDeposit',
            debugMessage: 'Text',
            result: 'ContractExecResultResult'
        },
        ContractExecResultU64: {
            gasConsumed: 'u64',
            gasRequired: 'u64',
            storageDeposit: 'StorageDeposit',
            debugMessage: 'Text',
            result: 'ContractExecResultResult'
        },
        ContractInfo: {
            _enum: {
                Alive: 'AliveContractInfo',
                Tombstone: 'TombstoneContractInfo'
            }
        },
        ContractCallFlags: {
            _set: {
                _bitLength: 32,
                ForwardInput: 1,
                CloneInput: 2,
                TailCall: 4,
                AllowReentry: 8
            }
        },
        ContractReturnFlags: {
            _set: {
                _bitLength: 32,
                Revert: 1
            }
        },
        ContractStorageKey: '[u8; 32]',
        DeletedContract: {
            pairCount: 'u32',
            trieId: 'TrieId'
        },
        ExecReturnValue: {
            flags: 'ContractReturnFlags',
            data: 'Bytes'
        },
        Gas: 'u64',
        HostFnWeightsTo264: {
            caller: 'Weight',
            address: 'Weight',
            gasLeft: 'Weight',
            balance: 'Weight',
            valueTransferred: 'Weight',
            minimumBalance: 'Weight',
            tombstoneDeposit: 'Weight',
            rentAllowance: 'Weight',
            blockNumber: 'Weight',
            now: 'Weight',
            weightToFee: 'Weight',
            gas: 'Weight',
            input: 'Weight',
            inputPerByte: 'Weight',
            return: 'Weight',
            returnPerByte: 'Weight',
            terminate: 'Weight',
            restoreTo: 'Weight',
            restoreToPerDelta: 'Weight',
            random: 'Weight',
            depositEvent: 'Weight',
            depositEventPerTopic: 'Weight',
            depositEventPerByte: 'Weight',
            setRentAllowance: 'Weight',
            setStorage: 'Weight',
            setStoragePerByte: 'Weight',
            clearStorage: 'Weight',
            getStorage: 'Weight',
            getStoragePerByte: 'Weight',
            transfer: 'Weight',
            call: 'Weight',
            callTransferSurcharge: 'Weight',
            callPerInputByte: 'Weight',
            callPerOutputByte: 'Weight',
            instantiate: 'Weight',
            instantiatePerInputByte: 'Weight',
            instantiatePerOutputByte: 'Weight',
            hashSha2256: 'Weight',
            hashSha2256PerByte: 'Weight',
            hashKeccak256: 'Weight',
            hashKeccak256PerByte: 'Weight',
            hashBlake2256: 'Weight',
            hashBlake2256PerByte: 'Weight',
            hashBlake2128: 'Weight',
            hashBlake2128PerByte: 'Weight'
        },
        HostFnWeights: {
            caller: 'Weight',
            address: 'Weight',
            gasLeft: 'Weight',
            balance: 'Weight',
            valueTransferred: 'Weight',
            minimumBalance: 'Weight',
            tombstoneDeposit: 'Weight',
            rentAllowance: 'Weight',
            blockNumber: 'Weight',
            now: 'Weight',
            weightToFee: 'Weight',
            gas: 'Weight',
            input: 'Weight',
            inputPerByte: 'Weight',
            return: 'Weight',
            returnPerByte: 'Weight',
            terminate: 'Weight',
            terminatePerCodeByte: 'Weight',
            restoreTo: 'Weight',
            restoreToPerCallerCodeByte: 'Weight',
            restoreToPerTombstoneCodeByte: 'Weight',
            restoreToPerDelta: 'Weight',
            random: 'Weight',
            depositEvent: 'Weight',
            depositEventPerTopic: 'Weight',
            depositEventPerByte: 'Weight',
            setRentAllowance: 'Weight',
            setStorage: 'Weight',
            setStoragePerByte: 'Weight',
            clearStorage: 'Weight',
            getStorage: 'Weight',
            getStoragePerByte: 'Weight',
            transfer: 'Weight',
            call: 'Weight',
            callPerCodeByte: 'Weight',
            callTransferSurcharge: 'Weight',
            callPerInputByte: 'Weight',
            callPerOutputByte: 'Weight',
            instantiate: 'Weight',
            instantiatePerCodeByte: 'Weight',
            instantiatePerInputByte: 'Weight',
            instantiatePerOutputByte: 'Weight',
            instantiatePerSaltByte: 'Weight',
            hashSha2256: 'Weight',
            hashSha2256PerByte: 'Weight',
            hashKeccak256: 'Weight',
            hashKeccak256PerByte: 'Weight',
            hashBlake2256: 'Weight',
            hashBlake2256PerByte: 'Weight',
            hashBlake2128: 'Weight',
            hashBlake2128PerByte: 'Weight',
            rentParams: 'Weight'
        },
        InstantiateRequestV1: {
            origin: 'AccountId',
            value: 'Balance',
            gasLimit: 'Gas',
            code: 'Bytes',
            data: 'Bytes',
            salt: 'Bytes'
        },
        InstantiateRequestV2: {
            _fallback: 'InstantiateRequestV1',
            origin: 'AccountId',
            value: 'Balance',
            gasLimit: 'Gas',
            storageDepositLimit: 'Option<Balance>',
            code: 'Bytes',
            data: 'Bytes',
            salt: 'Bytes'
        },
        InstantiateRequest: {
            _fallback: 'InstantiateRequestV2',
            origin: 'AccountId',
            value: 'Balance',
            gasLimit: 'Gas',
            storageDepositLimit: 'Option<Balance>',
            code: 'CodeSource',
            data: 'Bytes',
            salt: 'Bytes'
        },
        ContractInstantiateResultTo267: 'Result<InstantiateReturnValueTo267, Null>',
        ContractInstantiateResultTo299: 'Result<InstantiateReturnValueOk, Null>',
        ContractInstantiateResult: {
            gasConsumed: 'WeightV2',
            gasRequired: 'WeightV2',
            storageDeposit: 'StorageDeposit',
            debugMessage: 'Text',
            result: 'InstantiateReturnValue'
        },
        ContractInstantiateResultU64: {
            // only this one can fail, the current version (above) _should_ be correctly
            // versioned now, aka no more deprecated RPCs involved, only runtime calls
            _fallback: 'ContractInstantiateResultTo299',
            gasConsumed: 'u64',
            gasRequired: 'u64',
            storageDeposit: 'StorageDeposit',
            debugMessage: 'Text',
            result: 'InstantiateReturnValue'
        },
        InstantiateReturnValueTo267: {
            result: 'ExecReturnValue',
            accountId: 'AccountId',
            rentProjection: 'Option<RentProjection>'
        },
        InstantiateReturnValueOk: {
            result: 'ExecReturnValue',
            accountId: 'AccountId'
        },
        InstantiateReturnValue: 'Result<InstantiateReturnValueOk, DispatchError>',
        InstructionWeights: {
            i64const: 'u32',
            i64load: 'u32',
            i64store: 'u32',
            select: 'u32',
            rIf: 'u32',
            br: 'u32',
            brIf: 'u32',
            brIable: 'u32',
            brIablePerEntry: 'u32',
            call: 'u32',
            callIndirect: 'u32',
            callIndirectPerParam: 'u32',
            localGet: 'u32',
            localSet: 'u32',
            local_tee: 'u32',
            globalGet: 'u32',
            globalSet: 'u32',
            memoryCurrent: 'u32',
            memoryGrow: 'u32',
            i64clz: 'u32',
            i64ctz: 'u32',
            i64popcnt: 'u32',
            i64eqz: 'u32',
            i64extendsi32: 'u32',
            i64extendui32: 'u32',
            i32wrapi64: 'u32',
            i64eq: 'u32',
            i64ne: 'u32',
            i64lts: 'u32',
            i64ltu: 'u32',
            i64gts: 'u32',
            i64gtu: 'u32',
            i64les: 'u32',
            i64leu: 'u32',
            i64ges: 'u32',
            i64geu: 'u32',
            i64add: 'u32',
            i64sub: 'u32',
            i64mul: 'u32',
            i64divs: 'u32',
            i64divu: 'u32',
            i64rems: 'u32',
            i64remu: 'u32',
            i64and: 'u32',
            i64or: 'u32',
            i64xor: 'u32',
            i64shl: 'u32',
            i64shrs: 'u32',
            i64shru: 'u32',
            i64rotl: 'u32',
            i64rotr: 'u32'
        },
        LimitsTo264: {
            eventTopics: 'u32',
            stackHeight: 'u32',
            globals: 'u32',
            parameters: 'u32',
            memoryPages: 'u32',
            tableSize: 'u32',
            brTableSize: 'u32',
            subjectLen: 'u32',
            codeSize: 'u32'
        },
        Limits: {
            eventTopics: 'u32',
            stackHeight: 'u32',
            globals: 'u32',
            parameters: 'u32',
            memoryPages: 'u32',
            tableSize: 'u32',
            brTableSize: 'u32',
            subjectLen: 'u32'
        },
        PrefabWasmModule: {
            scheduleVersion: 'Compact<u32>',
            initial: 'Compact<u32>',
            maximum: 'Compact<u32>',
            refcount: 'Compact<u64>',
            _reserved: 'Option<Null>',
            code: 'Bytes',
            originalCodeLen: 'u32'
        },
        RentProjection: {
            _enum: {
                EvictionAt: 'BlockNumber',
                NoEviction: 'Null'
            }
        },
        ScheduleTo212: {
            version: 'u32',
            putCodePerByteCost: 'Gas',
            growMemCost: 'Gas',
            regularOpCost: 'Gas',
            returnDataPerByteCost: 'Gas',
            eventDataPerByteCost: 'Gas',
            eventPerTopicCost: 'Gas',
            eventBaseCost: 'Gas',
            sandboxDataReadCost: 'Gas',
            sandboxDataWriteCost: 'Gas',
            maxEventTopics: 'u32',
            maxStackHeight: 'u32',
            maxMemoryPages: 'u32',
            enablePrintln: 'bool',
            maxSubjectLen: 'u32'
        },
        ScheduleTo258: {
            version: 'u32',
            putCodePerByteCost: 'Gas',
            growMemCost: 'Gas',
            regularOpCost: 'Gas',
            returnDataPerByteCost: 'Gas',
            eventDataPerByteCost: 'Gas',
            eventPerTopicCost: 'Gas',
            eventBaseCost: 'Gas',
            sandboxDataReadCost: 'Gas',
            sandboxDataWriteCost: 'Gas',
            transferCost: 'Gas',
            maxEventTopics: 'u32',
            maxStackHeight: 'u32',
            maxMemoryPages: 'u32',
            enablePrintln: 'bool',
            maxSubjectLen: 'u32'
        },
        ScheduleTo264: {
            version: 'u32',
            enablePrintln: 'bool',
            limits: 'LimitsTo264',
            instructionWeights: 'InstructionWeights',
            hostFnWeights: 'HostFnWeightsTo264'
        },
        Schedule: {
            version: 'u32',
            enablePrintln: 'bool',
            limits: 'Limits',
            instructionWeights: 'InstructionWeights',
            hostFnWeights: 'HostFnWeights'
        },
        SeedOf: 'Hash',
        StorageDeposit: {
            _enum: {
                Refund: 'Balance',
                Charge: 'Balance'
            }
        },
        TombstoneContractInfo: 'Hash',
        TrieId: 'Bytes'
    }
};

const AllConvictions = [
    // 0.1x votes, unlocked.
    'None',
    // 1x votes, locked for an enactment period following a successful vote.
    'Locked1x',
    // 2x votes, locked for 2x enactment periods following a successful vote.
    'Locked2x',
    // 3x votes, locked for 4x...
    'Locked3x',
    // 4x votes, locked for 8x...
    'Locked4x',
    // 5x votes, locked for 16x...
    'Locked5x',
    // 6x votes, locked for 32x...
    'Locked6x'
];
var definitions$S = {
    rpc: {},
    types: {
        AccountVote: {
            _enum: {
                Standard: 'AccountVoteStandard',
                Split: 'AccountVoteSplit'
            }
        },
        AccountVoteSplit: {
            aye: 'Balance',
            nay: 'Balance'
        },
        AccountVoteStandard: {
            vote: 'Vote',
            balance: 'Balance'
        },
        Conviction: {
            _enum: AllConvictions
        },
        Delegations: {
            votes: 'Balance',
            capital: 'Balance'
        },
        PreimageStatus: {
            _enum: {
                Missing: 'BlockNumber',
                Available: 'PreimageStatusAvailable'
            }
        },
        PreimageStatusAvailable: {
            data: 'Bytes',
            provider: 'AccountId',
            deposit: 'Balance',
            since: 'BlockNumber',
            expiry: 'Option<BlockNumber>'
        },
        PriorLock: '(BlockNumber, Balance)',
        PropIndex: 'u32',
        Proposal: 'Call',
        ProxyState: {
            _enum: {
                Open: 'AccountId',
                Active: 'AccountId'
            }
        },
        ReferendumIndex: 'u32',
        ReferendumInfoTo239: {
            end: 'BlockNumber',
            proposalHash: 'Hash',
            threshold: 'VoteThreshold',
            delay: 'BlockNumber'
        },
        ReferendumInfo: {
            _enum: {
                Ongoing: 'ReferendumStatus',
                Finished: 'ReferendumInfoFinished'
            }
        },
        ReferendumInfoFinished: {
            approved: 'bool',
            end: 'BlockNumber'
        },
        ReferendumStatus: {
            end: 'BlockNumber',
            proposalHash: 'Hash',
            threshold: 'VoteThreshold',
            delay: 'BlockNumber',
            tally: 'Tally'
        },
        Tally: {
            ayes: 'Balance',
            nays: 'Balance',
            turnout: 'Balance'
        },
        Voting: {
            _enum: {
                Direct: 'VotingDirect',
                Delegating: 'VotingDelegating'
            }
        },
        VotingDirect: {
            votes: 'Vec<VotingDirectVote>',
            delegations: 'Delegations',
            prior: 'PriorLock'
        },
        VotingDirectVote: '(ReferendumIndex, AccountVote)',
        VotingDelegating: {
            balance: 'Balance',
            target: 'AccountId',
            conviction: 'Conviction',
            delegations: 'Delegations',
            prior: 'PriorLock'
        }
    }
};

const rpc$d = {
    getBlockStats: {
        description: 'Reexecute the specified `block_hash` and gather statistics while doing so',
        isUnsafe: true,
        params: [
            {
                isHistoric: true,
                name: 'at',
                type: 'Hash'
            }
        ],
        type: 'Option<BlockStats>'
    }
};

var definitions$R = {
    rpc: rpc$d,
    types: {
        BlockStats: {
            witnessLen: 'u64',
            witnessCompactLen: 'u64',
            blockLen: 'u64',
            blockNumExtrinsics: 'u64'
        }
    }
};

const runtime$i = {
    AuthorityDiscoveryApi: [
        {
            methods: {
                authorities: {
                    description: 'Retrieve authority identifiers of the current and next authority set.',
                    params: [],
                    type: 'Vec<AuthorityId>'
                }
            },
            version: 1
        }
    ]
};

var definitions$Q = {
    rpc: {},
    runtime: runtime$i,
    types: {}
};

var definitions$P = {
    rpc: {},
    types: {
        ApprovalFlag: 'u32',
        DefunctVoter: {
            who: 'AccountId',
            voteCount: 'Compact<u32>',
            candidateCount: 'Compact<u32>'
        },
        Renouncing: {
            _enum: {
                Member: 'Null',
                RunnerUp: 'Null',
                Candidate: 'Compact<u32>'
            }
        },
        SetIndex: 'u32',
        Vote: 'GenericVote',
        VoteIndex: 'u32',
        VoterInfo: {
            lastActive: 'VoteIndex',
            lastWin: 'VoteIndex',
            pot: 'Balance',
            stake: 'Balance'
        },
        VoteThreshold: {
            _enum: [
                'Super Majority Approve',
                'Super Majority Against',
                'Simple Majority'
            ]
        }
    }
};

const rpc$c = {
    createBlock: {
        description: 'Instructs the manual-seal authorship task to create a new block',
        params: [
            {
                name: 'createEmpty',
                type: 'bool'
            },
            {
                name: 'finalize',
                type: 'bool'
            },
            {
                isOptional: true,
                name: 'parentHash',
                type: 'BlockHash'
            }
        ],
        type: 'CreatedBlock'
    },
    finalizeBlock: {
        description: 'Instructs the manual-seal authorship task to finalize a block',
        params: [
            {
                name: 'hash',
                type: 'BlockHash'
            },
            {
                isOptional: true,
                name: 'justification',
                type: 'Justification'
            }
        ],
        type: 'bool'
    }
};

var definitions$O = {
    rpc: rpc$c,
    types: {
        CreatedBlock: {
            _alias: {
                blockHash: 'hash'
            },
            blockHash: 'BlockHash',
            aux: 'ImportedAux'
        },
        ImportedAux: {
            headerOnly: 'bool',
            clearJustificationRequests: 'bool',
            needsJustification: 'bool',
            badJustification: 'bool',
            needsFinalityProof: 'bool',
            isNewBest: 'bool'
        }
    }
};

var definitions$N = {
    rpc: {},
    types: {
        EvmAccount: {
            nonce: 'u256',
            balance: 'u256'
        },
        EvmCallInfo: {
            exitReason: 'ExitReason',
            value: 'Bytes',
            usedGas: 'U256',
            logs: 'Vec<EvmLog>'
        },
        EvmCreateInfo: {
            exitReason: 'ExitReason',
            value: 'H160',
            usedGas: 'U256',
            logs: 'Vec<EvmLog>'
        },
        EvmLog: {
            address: 'H160',
            topics: 'Vec<H256>',
            data: 'Bytes'
        },
        EvmVicinity: {
            gasPrice: 'u256',
            origin: 'H160'
        },
        ExitError: {
            _enum: {
                StackUnderflow: 'Null',
                StackOverflow: 'Null',
                InvalidJump: 'Null',
                InvalidRange: 'Null',
                DesignatedInvalid: 'Null',
                CallTooDeep: 'Null',
                CreateCollision: 'Null',
                CreateContractLimit: 'Null',
                OutOfOffset: 'Null',
                OutOfGas: 'Null',
                OutOfFund: 'Null',
                PCUnderflow: 'Null',
                CreateEmpty: 'Null',
                Other: 'Text'
            }
        },
        ExitFatal: {
            _enum: {
                NotSupported: 'Null',
                UnhandledInterrupt: 'Null',
                CallErrorAsFatal: 'ExitError',
                Other: 'Text'
            }
        },
        ExitReason: {
            _enum: {
                Succeed: 'ExitSucceed',
                Error: 'ExitError',
                Revert: 'ExitRevert',
                Fatal: 'ExitFatal'
            }
        },
        ExitRevert: {
            _enum: ['Reverted']
        },
        ExitSucceed: {
            _enum: ['Stopped', 'Returned', 'Suicided']
        }
    }
};

var definitions$M = {
    rpc: {},
    types: {
        Extrinsic: 'GenericExtrinsic',
        ExtrinsicEra: 'GenericExtrinsicEra',
        ExtrinsicPayload: 'GenericExtrinsicPayload',
        ExtrinsicSignature: 'MultiSignature',
        ExtrinsicV4: 'GenericExtrinsicV4',
        ExtrinsicPayloadV4: 'GenericExtrinsicPayloadV4',
        ExtrinsicSignatureV4: 'GenericExtrinsicSignatureV4',
        ExtrinsicUnknown: 'GenericExtrinsicUnknown',
        ExtrinsicPayloadUnknown: 'GenericExtrinsicPayloadUnknown',
        // eras
        Era: 'ExtrinsicEra',
        ImmortalEra: 'GenericImmortalEra',
        MortalEra: 'GenericMortalEra',
        // signatures & signer
        AnySignature: 'H512',
        MultiSignature: {
            _enum: {
                Ed25519: 'Ed25519Signature',
                Sr25519: 'Sr25519Signature',
                Ecdsa: 'EcdsaSignature'
            }
        },
        Signature: 'H512',
        SignerPayload: 'GenericSignerPayload',
        EcdsaSignature: '[u8; 65]',
        Ed25519Signature: 'H512',
        Sr25519Signature: 'H512'
    }
};

var definitions$L = {
    rpc: {},
    types: {
        AssetOptions: {
            initalIssuance: 'Compact<Balance>',
            permissions: 'PermissionLatest'
        },
        Owner: {
            _enum: {
                None: 'Null',
                Address: 'AccountId'
            }
        },
        PermissionsV1: {
            update: 'Owner',
            mint: 'Owner',
            burn: 'Owner'
        },
        PermissionVersions: {
            _enum: {
                V1: 'PermissionsV1'
            }
        },
        PermissionLatest: 'PermissionsV1'
    }
};

var definitions$K = {
    rpc: {},
    types: {
        ActiveGilt: {
            proportion: 'Perquintill',
            amount: 'Balance',
            who: 'AccountId',
            expiry: 'BlockNumber'
        },
        ActiveGiltsTotal: {
            frozen: 'Balance',
            proportion: 'Perquintill',
            index: 'ActiveIndex',
            target: 'Perquintill'
        },
        ActiveIndex: 'u32',
        GiltBid: {
            amount: 'Balance',
            who: 'AccountId'
        }
    }
};

const rpc$b = {
    proveFinality: {
        description: 'Prove finality for the given block number, returning the Justification for the last block in the set.',
        params: [
            {
                name: 'blockNumber',
                type: 'BlockNumber'
            }
        ],
        type: 'Option<EncodedFinalityProofs>'
    },
    roundState: {
        description: 'Returns the state of the current best round state as well as the ongoing background rounds',
        params: [],
        type: 'ReportedRoundStates'
    },
    subscribeJustifications: {
        description: 'Subscribes to grandpa justifications',
        params: [],
        pubsub: [
            'justifications',
            'subscribeJustifications',
            'unsubscribeJustifications'
        ],
        type: 'JustificationNotification'
    }
};

const GRANDPA_V2_V3 = {
    generate_key_ownership_proof: {
        description: 'Generates a proof of key ownership for the given authority in the given set.',
        params: [
            {
                name: 'setId',
                type: 'SetId'
            },
            {
                name: 'authorityId',
                type: 'AuthorityId'
            }
        ],
        type: 'Option<OpaqueKeyOwnershipProof>'
    },
    grandpa_authorities: {
        description: 'Get the current GRANDPA authorities and weights. This should not change except for when changes are scheduled and the corresponding delay has passed.',
        params: [],
        type: 'AuthorityList'
    },
    submit_report_equivocation_unsigned_extrinsic: {
        description: 'Submits an unsigned extrinsic to report an equivocation.',
        params: [
            {
                name: 'equivocationProof',
                type: 'GrandpaEquivocationProof'
            },
            {
                name: 'keyOwnerProof',
                type: 'OpaqueKeyOwnershipProof'
            }
        ],
        type: 'Option<Null>'
    }
};
const runtime$h = {
    GrandpaApi: [
        {
            methods: objectSpread({
                current_set_id: {
                    description: 'Get current GRANDPA authority set id.',
                    params: [],
                    type: 'SetId'
                }
            }, GRANDPA_V2_V3),
            version: 3
        },
        {
            methods: GRANDPA_V2_V3,
            version: 2
        }
    ]
};

var definitions$J = {
    rpc: rpc$b,
    runtime: runtime$h,
    types: {
        AuthorityIndex: 'u64',
        AuthorityList: 'Vec<NextAuthority>',
        AuthoritySet: {
            currentAuthorities: 'AuthorityList',
            setId: 'u64',
            pendingStandardChanges: 'ForkTreePendingChange',
            pendingForcedChanges: 'Vec<PendingChange>',
            authoritySetChanges: 'AuthoritySetChanges'
        },
        ForkTreePendingChange: {
            roots: 'Vec<ForkTreePendingChangeNode>',
            bestFinalizedNumber: 'Option<BlockNumber>'
        },
        ForkTreePendingChangeNode: {
            hash: 'BlockHash',
            number: 'BlockNumber',
            data: 'PendingChange',
            children: 'Vec<ForkTreePendingChangeNode>'
        },
        AuthoritySetChange: '(U64, BlockNumber)',
        AuthoritySetChanges: 'Vec<AuthoritySetChange>',
        AuthorityWeight: 'u64',
        DelayKind: {
            _enum: {
                Finalized: 'Null',
                Best: 'DelayKindBest'
            }
        },
        DelayKindBest: {
            medianLastFinalized: 'BlockNumber'
        },
        EncodedFinalityProofs: 'Bytes',
        GrandpaEquivocation: {
            _enum: {
                Prevote: 'GrandpaEquivocationValue',
                Precommit: 'GrandpaEquivocationValue'
            }
        },
        GrandpaEquivocationProof: {
            setId: 'SetId',
            equivocation: 'GrandpaEquivocation'
        },
        GrandpaEquivocationValue: {
            roundNumber: 'u64',
            identity: 'AuthorityId',
            first: '(GrandpaPrevote, AuthoritySignature)',
            second: '(GrandpaPrevote, AuthoritySignature)'
        },
        GrandpaPrevote: {
            targetHash: 'Hash',
            targetNumber: 'BlockNumber'
        },
        GrandpaCommit: {
            targetHash: 'BlockHash',
            targetNumber: 'BlockNumber',
            precommits: 'Vec<GrandpaSignedPrecommit>'
        },
        GrandpaPrecommit: {
            targetHash: 'BlockHash',
            targetNumber: 'BlockNumber'
        },
        GrandpaSignedPrecommit: {
            precommit: 'GrandpaPrecommit',
            signature: 'AuthoritySignature',
            id: 'AuthorityId'
        },
        GrandpaJustification: {
            round: 'u64',
            commit: 'GrandpaCommit',
            votesAncestries: 'Vec<Header>'
        },
        JustificationNotification: 'Bytes',
        KeyOwnerProof: 'MembershipProof',
        NextAuthority: '(AuthorityId, AuthorityWeight)',
        PendingChange: {
            nextAuthorities: 'AuthorityList',
            delay: 'BlockNumber',
            canonHeight: 'BlockNumber',
            canonHash: 'BlockHash',
            delayKind: 'DelayKind'
        },
        PendingPause: {
            scheduledAt: 'BlockNumber',
            delay: 'BlockNumber'
        },
        PendingResume: {
            scheduledAt: 'BlockNumber',
            delay: 'BlockNumber'
        },
        Precommits: {
            currentWeight: 'u32',
            missing: 'BTreeSet<AuthorityId>'
        },
        Prevotes: {
            currentWeight: 'u32',
            missing: 'BTreeSet<AuthorityId>'
        },
        ReportedRoundStates: {
            setId: 'u32',
            best: 'RoundState',
            background: 'Vec<RoundState>'
        },
        RoundState: {
            round: 'u32',
            totalWeight: 'u32',
            thresholdWeight: 'u32',
            prevotes: 'Prevotes',
            precommits: 'Precommits'
        },
        SetId: 'u64',
        StoredPendingChange: {
            scheduledAt: 'BlockNumber',
            delay: 'BlockNumber',
            nextAuthorities: 'AuthorityList'
        },
        StoredState: {
            _enum: {
                Live: 'Null',
                PendingPause: 'PendingPause',
                Paused: 'Null',
                PendingResume: 'PendingResume'
            }
        }
    }
};

var definitions$I = {
    rpc: {},
    types: {
        IdentityFields: {
            _set: {
                _bitLength: 64,
                // Mapped here to 32 bits, in Rust these are 64-bit values
                Display: 1,
                Legal: 2,
                Web: 4,
                Riot: 8,
                Email: 16,
                PgpFingerprint: 32,
                Image: 64,
                Twitter: 128
            }
        },
        IdentityInfoAdditional: '(Data, Data)',
        IdentityInfoTo198: {
            additional: 'Vec<IdentityInfoAdditional>',
            display: 'Data',
            legal: 'Data',
            web: 'Data',
            riot: 'Data',
            email: 'Data',
            pgpFingerprint: 'Option<H160>',
            image: 'Data'
        },
        IdentityInfo: {
            _fallback: 'IdentityInfoTo198',
            additional: 'Vec<IdentityInfoAdditional>',
            display: 'Data',
            legal: 'Data',
            web: 'Data',
            riot: 'Data',
            email: 'Data',
            pgpFingerprint: 'Option<H160>',
            image: 'Data',
            twitter: 'Data'
        },
        IdentityJudgement: {
            _enum: {
                Unknown: 'Null',
                FeePaid: 'Balance',
                Reasonable: 'Null',
                KnownGood: 'Null',
                OutOfDate: 'Null',
                LowQuality: 'Null',
                Erroneous: 'Null'
            }
        },
        RegistrationJudgement: '(RegistrarIndex, IdentityJudgement)',
        RegistrationTo198: {
            judgements: 'Vec<RegistrationJudgement>',
            deposit: 'Balance',
            info: 'IdentityInfoTo198'
        },
        Registration: {
            _fallback: 'RegistrationTo198',
            judgements: 'Vec<RegistrationJudgement>',
            deposit: 'Balance',
            info: 'IdentityInfo'
        },
        RegistrarIndex: 'u32',
        RegistrarInfo: {
            account: 'AccountId',
            fee: 'Balance',
            fields: 'IdentityFields'
        }
    }
};

var definitions$H = {
    rpc: {},
    types: {
        AuthIndex: 'u32',
        AuthoritySignature: 'Signature',
        Heartbeat: {
            blockNumber: 'BlockNumber',
            networkState: 'OpaqueNetworkState',
            sessionIndex: 'SessionIndex',
            authorityIndex: 'AuthIndex',
            validatorsLen: 'u32'
        },
        HeartbeatTo244: {
            blockNumber: 'BlockNumber',
            networkState: 'OpaqueNetworkState',
            sessionIndex: 'SessionIndex',
            authorityIndex: 'AuthIndex'
        },
        OpaqueMultiaddr: 'Opaque<Bytes>',
        OpaquePeerId: 'Opaque<Bytes>',
        OpaqueNetworkState: {
            peerId: 'OpaquePeerId',
            externalAddresses: 'Vec<OpaqueMultiaddr>'
        }
    }
};

var definitions$G = {
    rpc: {},
    types: {
        CallIndex: '(u8, u8)',
        LotteryConfig: {
            price: 'Balance',
            start: 'BlockNumber',
            length: 'BlockNumber',
            delay: 'BlockNumber',
            repeat: 'bool'
        }
    }
};

const rpc$a = {
    generateBatchProof: {
        description: 'Generate MMR proof for the given leaf indices.',
        params: [
            {
                name: 'leafIndices',
                type: 'Vec<u64>'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'MmrLeafProof'
    },
    generateProof: {
        description: 'Generate MMR proof for given leaf index.',
        params: [
            {
                name: 'leafIndex',
                type: 'u64'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'MmrLeafBatchProof'
    }
};

const MMR_V1_V2 = {
    generate_batch_proof: {
        description: 'Generate MMR proof for a series of leaves under given indices.',
        params: [
            {
                name: 'leafIndices',
                type: 'Vec<MmrLeafIndex>'
            }
        ],
        type: 'Result<(Vec<MmrEncodableOpaqueLeaf>, MmrBatchProof), MmrError>'
    },
    generate_proof: {
        description: 'Generate MMR proof for a leaf under given index.',
        params: [
            {
                name: 'leafIndex',
                type: 'MmrLeafIndex'
            }
        ],
        type: 'Result<(MmrEncodableOpaqueLeaf, MmrProof), MmrError>'
    },
    mmr_root: {
        description: 'Return the on-chain MMR root hash.',
        params: [],
        type: 'Result<Hash, MmrError>'
    },
    verify_batch_proof: {
        description: 'Verify MMR proof against on-chain MMR for a batch of leaves.',
        params: [
            {
                name: 'leaves',
                type: 'Vec<MmrEncodableOpaqueLeaf>'
            },
            {
                name: 'proof',
                type: 'MmrBatchProof'
            }
        ],
        type: 'Result<(), MmrError>'
    },
    verify_batch_proof_stateless: {
        description: 'Verify MMR proof against given root hash or a batch of leaves.',
        params: [
            {
                name: 'root',
                type: 'Hash'
            },
            {
                name: 'leaves',
                type: 'Vec<MmrEncodableOpaqueLeaf>'
            },
            {
                name: 'proof',
                type: 'MmrBatchProof'
            }
        ],
        type: 'Result<(), MmrError>'
    },
    verify_proof: {
        description: 'Verify MMR proof against on-chain MMR.',
        params: [
            {
                name: 'leaf',
                type: 'MmrEncodableOpaqueLeaf'
            },
            {
                name: 'proof',
                type: 'MmrProof'
            }
        ],
        type: 'Result<(), MmrError>'
    },
    verify_proof_stateless: {
        description: 'Verify MMR proof against given root hash.',
        params: [
            {
                name: 'root',
                type: 'Hash'
            },
            {
                name: 'leaf',
                type: 'MmrEncodableOpaqueLeaf'
            },
            {
                name: 'proof',
                type: 'MmrProof'
            }
        ],
        type: 'Result<(), MmrError>'
    }
};
const runtime$g = {
    MmrApi: [
        {
            methods: MMR_V1_V2,
            version: 2
        },
        {
            methods: MMR_V1_V2,
            version: 1
        }
    ]
};

var definitions$F = {
    rpc: rpc$a,
    runtime: runtime$g,
    types: {
        MmrBatchProof: {
            leafIndices: 'Vec<MmrLeafIndex>',
            leafCount: 'MmrNodeIndex',
            items: 'Vec<Hash>'
        },
        MmrEncodableOpaqueLeaf: 'Bytes',
        MmrError: {
            _enum: ['Push', 'GetRoot', 'Commit', 'GenerateProof', 'Verify', 'LeafNotFound', ' PalletNotIncluded', 'InvalidLeafIndex']
        },
        MmrLeafBatchProof: {
            blockHash: 'BlockHash',
            leaves: 'Bytes',
            proof: 'Bytes'
        },
        MmrLeafIndex: 'u64',
        MmrLeafProof: {
            blockHash: 'BlockHash',
            leaf: 'Bytes',
            proof: 'Bytes'
        },
        MmrNodeIndex: 'u64',
        MmrProof: {
            leafIndex: 'MmrLeafIndex',
            leafCount: 'MmrNodeIndex',
            items: 'Vec<Hash>'
        }
    }
};

const runtime$f = {
    NftsApi: [
        {
            methods: {
                attribute: {
                    description: 'An attribute',
                    params: [
                        {
                            name: 'collection',
                            type: 'NftCollectionId'
                        },
                        {
                            name: 'item',
                            type: 'NftItemId'
                        },
                        {
                            name: 'key',
                            type: 'Bytes'
                        }
                    ],
                    type: 'Option<Bytes>'
                },
                collection_attribute: {
                    description: 'A collection attribute',
                    params: [
                        {
                            name: 'collection',
                            type: 'NftCollectionId'
                        },
                        {
                            name: 'key',
                            type: 'Bytes'
                        }
                    ],
                    type: 'Option<Bytes>'
                },
                collection_owner: {
                    description: 'A collection owner',
                    params: [
                        {
                            name: 'collection',
                            type: 'NftCollectionId'
                        }
                    ],
                    type: 'Option<AccountId>'
                },
                custom_attribute: {
                    description: 'A custom attribute',
                    params: [
                        {
                            name: 'account',
                            type: 'AccountId'
                        },
                        {
                            name: 'collection',
                            type: 'NftCollectionId'
                        },
                        {
                            name: 'item',
                            type: 'NftItemId'
                        },
                        {
                            name: 'key',
                            type: 'Bytes'
                        }
                    ],
                    type: 'Option<Bytes>'
                },
                owner: {
                    description: 'Collection owner',
                    params: [
                        {
                            name: 'collection',
                            type: 'NftCollectionId'
                        },
                        {
                            name: 'item',
                            type: 'NftItemId'
                        }
                    ],
                    type: 'Option<AccountId>'
                },
                system_attribute: {
                    description: 'System attribute',
                    params: [
                        {
                            name: 'collection',
                            type: 'NftCollectionId'
                        },
                        {
                            name: 'item',
                            type: 'NftItemId'
                        },
                        {
                            name: 'key',
                            type: 'Bytes'
                        }
                    ],
                    type: 'Option<Bytes>'
                }
            },
            version: 1
        }
    ]
};

var definitions$E = {
    rpc: {},
    runtime: runtime$f,
    types: {
        NftCollectionId: 'u32',
        NftItemId: 'u32'
    }
};

const runtime$e = {
    NominationPoolsApi: [
        {
            methods: {
                balance_to_points: {
                    description: 'Returns the equivalent points of `new_funds` for a given pool.',
                    params: [
                        {
                            name: 'poolId',
                            type: 'NpPoolId'
                        },
                        {
                            name: 'newFunds',
                            type: 'Balance'
                        }
                    ],
                    type: 'Balance'
                },
                pending_rewards: {
                    description: 'Returns the pending rewards for the given member.',
                    params: [
                        {
                            name: 'member',
                            type: 'AccountId'
                        }
                    ],
                    type: 'Balance'
                },
                points_to_balance: {
                    description: 'Returns the equivalent balance of `points` for a given pool.',
                    params: [
                        {
                            name: 'poolId',
                            type: 'NpPoolId'
                        },
                        {
                            name: 'points',
                            type: 'Balance'
                        }
                    ],
                    type: 'Balance'
                }
            },
            version: 1
        }
    ]
};

var definitions$D = {
    rpc: {},
    runtime: runtime$e,
    types: {
        NpApiError: {
            _enum: ['MemberNotFound', 'OverflowInPendingRewards']
        },
        NpPoolId: 'u32'
    }
};

var definitions$C = {
    rpc: {},
    types: {
        DeferredOffenceOf: '(Vec<OffenceDetails>, Vec<Perbill>, SessionIndex)',
        Kind: '[u8; 16]',
        OffenceDetails: {
            offender: 'Offender',
            reporters: 'Vec<Reporter>'
        },
        Offender: 'IdentificationTuple',
        OpaqueTimeSlot: 'Bytes',
        ReportIdOf: 'Hash',
        Reporter: 'AccountId'
    }
};

const runtime$d = {
    DifficultyApi: [
        {
            methods: {
                difficulty: {
                    description: 'Return the target difficulty of the next block.',
                    params: [],
                    // This is Difficulty in the original, however this is chain-specific
                    type: 'Raw'
                }
            },
            version: 1
        }
    ],
    TimestampApi: [
        {
            methods: {
                timestamp: {
                    description: 'API necessary for timestamp-based difficulty adjustment algorithms.',
                    params: [],
                    type: 'Moment'
                }
            },
            version: 1
        }
    ]
};

var definitions$B = {
    rpc: {},
    runtime: runtime$d,
    types: {}
};

var definitions$A = {
    rpc: {},
    types: {
        ProxyDefinition: {
            delegate: 'AccountId',
            proxyType: 'ProxyType',
            delay: 'BlockNumber'
        },
        ProxyType: {
            _enum: ['Any', 'NonTransfer', 'Governance', 'Staking']
        },
        ProxyAnnouncement: {
            real: 'AccountId',
            callHash: 'Hash',
            height: 'BlockNumber'
        }
    }
};

var definitions$z = {
    rpc: {},
    types: {
        ActiveRecovery: {
            created: 'BlockNumber',
            deposit: 'Balance',
            friends: 'Vec<AccountId>'
        },
        RecoveryConfig: {
            delayPeriod: 'BlockNumber',
            deposit: 'Balance',
            friends: 'Vec<AccountId>',
            threshold: 'u16'
        }
    }
};

var definitions$y = {
    rpc: {},
    types: {
        Period: '(BlockNumber, u32)',
        Priority: 'u8',
        SchedulePeriod: 'Period',
        SchedulePriority: 'Priority',
        Scheduled: {
            maybeId: 'Option<Bytes>',
            priority: 'SchedulePriority',
            call: 'Call',
            maybePeriodic: 'Option<SchedulePeriod>',
            origin: 'PalletsOrigin'
        },
        ScheduledTo254: {
            maybeId: 'Option<Bytes>',
            priority: 'SchedulePriority',
            call: 'Call',
            maybePeriodic: 'Option<SchedulePeriod>'
        },
        TaskAddress: '(BlockNumber, u32)'
    }
};

const runtime$c = {
    SessionKeys: [
        {
            methods: {
                decode_session_keys: {
                    description: 'Decode the given public session keys.',
                    params: [
                        {
                            name: 'encoded',
                            type: 'Bytes'
                        }
                    ],
                    type: 'Option<Vec<(Bytes, KeyTypeId)>>'
                },
                generate_session_keys: {
                    description: 'Generate a set of session keys with optionally using the given seed.',
                    params: [
                        {
                            name: 'seed',
                            type: 'Option<Bytes>'
                        }
                    ],
                    type: 'Bytes'
                }
            },
            version: 1
        }
    ]
};

const keyTypes = {
    // key for beefy
    BeefyKey: '[u8; 33]',
    // default to Substrate master defaults, 4 keys (polkadot master, 5 keys)
    Keys: 'SessionKeys4',
    SessionKeys1: '(AccountId)',
    SessionKeys2: '(AccountId, AccountId)',
    SessionKeys3: '(AccountId, AccountId, AccountId)',
    SessionKeys4: '(AccountId, AccountId, AccountId, AccountId)',
    SessionKeys5: '(AccountId, AccountId, AccountId, AccountId, AccountId)',
    SessionKeys6: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
    SessionKeys6B: '(AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
    SessionKeys7: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
    SessionKeys7B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
    SessionKeys8: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
    SessionKeys8B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
    SessionKeys9: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
    SessionKeys9B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
    SessionKeys10: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
    SessionKeys10B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)'
};
var definitions$x = {
    rpc: {},
    runtime: runtime$c,
    types: objectSpread({}, keyTypes, {
        FullIdentification: 'Exposure',
        IdentificationTuple: '(ValidatorId, FullIdentification)',
        MembershipProof: {
            session: 'SessionIndex',
            trieNodes: 'Vec<Bytes>',
            validatorCount: 'ValidatorCount'
        },
        SessionIndex: 'u32',
        ValidatorCount: 'u32'
    })
};

var definitions$w = {
    rpc: {},
    types: {
        Bid: {
            who: 'AccountId',
            kind: 'BidKind',
            value: 'Balance'
        },
        BidKind: {
            _enum: {
                Deposit: 'Balance',
                Vouch: '(AccountId, Balance)'
            }
        },
        // a society-specific Judgement (not the same as identity Judgement)
        SocietyJudgement: {
            _enum: ['Rebid', 'Reject', 'Approve']
        },
        // a society-specific Vote
        SocietyVote: {
            _enum: ['Skeptic', 'Reject', 'Approve']
        },
        StrikeCount: 'u32',
        VouchingStatus: {
            _enum: ['Vouching', 'Banned']
        }
    }
};

const runtime$b = {
    StakingApi: [
        {
            methods: {
                nominations_quota: {
                    description: 'Returns the nominations quota for a nominator with a given balance.',
                    params: [
                        {
                            name: 'balance',
                            type: 'Balance'
                        }
                    ],
                    type: 'u32'
                }
            },
            version: 1
        }
    ]
};

const deprecated = {
    Points: 'u32',
    EraPoints: {
        total: 'Points',
        individual: 'Vec<Points>'
    }
};
const phragmen = {
    CompactAssignments: 'CompactAssignmentsWith16',
    CompactAssignmentsWith16: {
        votes1: 'Vec<(NominatorIndexCompact, ValidatorIndexCompact)>',
        votes2: 'Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>',
        votes3: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>',
        votes4: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>',
        votes5: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>',
        votes6: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>',
        votes7: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>',
        votes8: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>',
        votes9: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>',
        votes10: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>',
        votes11: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>',
        votes12: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>',
        votes13: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>',
        votes14: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>',
        votes15: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>',
        votes16: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>'
    },
    CompactAssignmentsWith24: {
        votes1: 'Vec<(NominatorIndexCompact, ValidatorIndexCompact)>',
        votes2: 'Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>',
        votes3: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>',
        votes4: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>',
        votes5: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>',
        votes6: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>',
        votes7: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>',
        votes8: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>',
        votes9: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>',
        votes10: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>',
        votes11: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>',
        votes12: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>',
        votes13: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>',
        votes14: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>',
        votes15: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>',
        votes16: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>',
        votes17: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 16], ValidatorIndexCompact)>',
        votes18: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 17], ValidatorIndexCompact)>',
        votes19: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 18], ValidatorIndexCompact)>',
        votes20: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 19], ValidatorIndexCompact)>',
        votes21: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 20], ValidatorIndexCompact)>',
        votes22: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 21], ValidatorIndexCompact)>',
        votes23: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 22], ValidatorIndexCompact)>',
        votes24: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 23], ValidatorIndexCompact)>'
    },
    CompactAssignmentsTo265: 'CompactAssignmentsWith16',
    CompactAssignmentsTo257: {
        votes1: 'Vec<(NominatorIndex, [CompactScore; 0], ValidatorIndex)>',
        votes2: 'Vec<(NominatorIndex, [CompactScore; 1], ValidatorIndex)>',
        votes3: 'Vec<(NominatorIndex, [CompactScore; 2], ValidatorIndex)>',
        votes4: 'Vec<(NominatorIndex, [CompactScore; 3], ValidatorIndex)>',
        votes5: 'Vec<(NominatorIndex, [CompactScore; 4], ValidatorIndex)>',
        votes6: 'Vec<(NominatorIndex, [CompactScore; 5], ValidatorIndex)>',
        votes7: 'Vec<(NominatorIndex, [CompactScore; 6], ValidatorIndex)>',
        votes8: 'Vec<(NominatorIndex, [CompactScore; 7], ValidatorIndex)>',
        votes9: 'Vec<(NominatorIndex, [CompactScore; 8], ValidatorIndex)>',
        votes10: 'Vec<(NominatorIndex, [CompactScore; 9], ValidatorIndex)>',
        votes11: 'Vec<(NominatorIndex, [CompactScore; 10], ValidatorIndex)>',
        votes12: 'Vec<(NominatorIndex, [CompactScore; 11], ValidatorIndex)>',
        votes13: 'Vec<(NominatorIndex, [CompactScore; 12], ValidatorIndex)>',
        votes14: 'Vec<(NominatorIndex, [CompactScore; 13], ValidatorIndex)>',
        votes15: 'Vec<(NominatorIndex, [CompactScore; 14], ValidatorIndex)>',
        votes16: 'Vec<(NominatorIndex, [CompactScore; 15], ValidatorIndex)>'
    },
    CompactScore: '(ValidatorIndex, OffchainAccuracy)',
    CompactScoreCompact: '(ValidatorIndexCompact, OffchainAccuracyCompact)',
    ElectionCompute: {
        // in previous versions the last entry was "AuthorityId"
        // (since no data attached, and it is via SCALE can rename)
        _enum: ['OnChain', 'Signed', 'Unsigned']
    },
    ElectionPhase: {
        _enum: {
            Off: null,
            Signed: null,
            Unsigned: '(bool, BlockNumber)',
            Emergency: null
        }
    },
    ElectionResult: {
        compute: 'ElectionCompute',
        slotStake: 'Balance',
        electedStashes: 'Vec<AccountId>',
        exposures: 'Vec<(AccountId, Exposure)>'
    },
    ElectionScore: '[u128; 3]',
    ElectionSize: {
        validators: 'Compact<ValidatorIndex>',
        nominators: 'Compact<NominatorIndex>'
    },
    ElectionStatus: {
        _enum: {
            Close: 'Null',
            Open: 'BlockNumber'
        }
    },
    ExtendedBalance: 'u128',
    RawSolution: 'RawSolutionWith16',
    RawSolutionWith16: {
        compact: 'CompactAssignmentsWith16',
        score: 'ElectionScore',
        round: 'u32'
    },
    RawSolutionWith24: {
        compact: 'CompactAssignmentsWith24',
        score: 'ElectionScore',
        round: 'u32'
    },
    RawSolutionTo265: 'RawSolutionWith16',
    ReadySolution: {
        supports: 'SolutionSupports',
        score: 'ElectionScore',
        compute: 'ElectionCompute'
    },
    RoundSnapshot: {
        voters: 'Vec<(AccountId, VoteWeight, Vec<AccountId>)>',
        targets: 'Vec<AccountId>'
    },
    SeatHolder: {
        who: 'AccountId',
        stake: 'Balance',
        deposit: 'Balance'
    },
    SignedSubmission: {
        _fallback: 'SignedSubmissionTo276',
        who: 'AccountId',
        deposit: 'Balance',
        solution: 'RawSolution',
        reward: 'Balance'
    },
    SignedSubmissionTo276: {
        who: 'AccountId',
        deposit: 'Balance',
        solution: 'RawSolution'
    },
    SignedSubmissionOf: 'SignedSubmission',
    SolutionOrSnapshotSize: {
        voters: 'Compact<u32>',
        targets: 'Compact<u32>'
    },
    SolutionSupport: {
        total: 'ExtendedBalance',
        voters: 'Vec<(AccountId, ExtendedBalance)>'
    },
    SolutionSupports: 'Vec<(AccountId, SolutionSupport)>',
    Supports: 'SolutionSupports',
    SubmissionIndicesOf: 'BTreeMap<ElectionScore, u32>',
    Voter: {
        votes: 'Vec<AccountId>',
        stake: 'Balance',
        deposit: 'Balance'
    },
    VoteWeight: 'u64'
};
var definitions$v = {
    rpc: {},
    runtime: runtime$b,
    types: objectSpread({}, deprecated, phragmen, {
        ActiveEraInfo: {
            index: 'EraIndex',
            start: 'Option<Moment>'
        },
        EraIndex: 'u32',
        EraRewardPoints: {
            total: 'RewardPoint',
            individual: 'BTreeMap<AccountId, RewardPoint>'
        },
        EraRewards: {
            total: 'u32',
            rewards: 'Vec<u32>'
        },
        Exposure: {
            total: 'Compact<Balance>',
            own: 'Compact<Balance>',
            others: 'Vec<IndividualExposure>'
        },
        Forcing: {
            _enum: [
                'NotForcing',
                'ForceNew',
                'ForceNone',
                'ForceAlways'
            ]
        },
        IndividualExposure: {
            who: 'AccountId',
            value: 'Compact<Balance>'
        },
        KeyType: 'AccountId',
        MomentOf: 'Moment',
        Nominations: {
            targets: 'Vec<AccountId>',
            submittedIn: 'EraIndex',
            suppressed: 'bool'
        },
        NominatorIndex: 'u32',
        NominatorIndexCompact: 'Compact<NominatorIndex>',
        OffchainAccuracy: 'PerU16',
        OffchainAccuracyCompact: 'Compact<OffchainAccuracy>',
        PhragmenScore: '[u128; 3]',
        Points: 'u32',
        RewardDestination: {
            _enum: {
                Staked: 'Null',
                Stash: 'Null',
                Controller: 'Null',
                Account: 'AccountId',
                None: 'Null'
            }
        },
        RewardPoint: 'u32',
        SlashJournalEntry: {
            who: 'AccountId',
            amount: 'Balance',
            ownSlash: 'Balance'
        },
        SlashingSpansTo204: {
            spanIndex: 'SpanIndex',
            lastStart: 'EraIndex',
            prior: 'Vec<EraIndex>'
        },
        SlashingSpans: {
            spanIndex: 'SpanIndex',
            lastStart: 'EraIndex',
            lastNonzeroSlash: 'EraIndex',
            prior: 'Vec<EraIndex>'
        },
        SpanIndex: 'u32',
        SpanRecord: {
            slashed: 'Balance',
            paidOut: 'Balance'
        },
        StakingLedgerTo223: {
            stash: 'AccountId',
            total: 'Compact<Balance>',
            active: 'Compact<Balance>',
            unlocking: 'Vec<UnlockChunk>'
        },
        StakingLedgerTo240: {
            _fallback: 'StakingLedgerTo223',
            stash: 'AccountId',
            total: 'Compact<Balance>',
            active: 'Compact<Balance>',
            unlocking: 'Vec<UnlockChunk>',
            lastReward: 'Option<EraIndex>'
        },
        StakingLedger: {
            stash: 'AccountId',
            total: 'Compact<Balance>',
            active: 'Compact<Balance>',
            unlocking: 'Vec<UnlockChunk>',
            claimedRewards: 'Vec<EraIndex>'
        },
        UnappliedSlashOther: '(AccountId, Balance)',
        UnappliedSlash: {
            validator: 'AccountId',
            own: 'Balance',
            others: 'Vec<UnappliedSlashOther>',
            reporters: 'Vec<AccountId>',
            payout: 'Balance'
        },
        UnlockChunk: {
            value: 'Compact<Balance>',
            era: 'Compact<BlockNumber>'
        },
        ValidatorIndex: 'u16',
        ValidatorIndexCompact: 'Compact<ValidatorIndex>',
        ValidatorPrefs: 'ValidatorPrefsWithBlocked',
        ValidatorPrefsWithCommission: {
            commission: 'Compact<Perbill>'
        },
        ValidatorPrefsWithBlocked: {
            commission: 'Compact<Perbill>',
            blocked: 'bool'
        },
        ValidatorPrefsTo196: {
            validatorPayment: 'Compact<Balance>'
        },
        ValidatorPrefsTo145: {
            unstakeThreshold: 'Compact<u32>',
            validatorPayment: 'Compact<Balance>'
        }
    })
};

var definitions$u = {
    rpc: {},
    types: {
        WeightToFeeCoefficient: {
            coeffInteger: 'Balance',
            coeffFrac: 'Perbill',
            negative: 'bool',
            degree: 'u8'
        }
    }
};

const rpc$9 = {
    genSyncSpec: {
        description: 'Returns the json-serialized chainspec running the node, with a sync state.',
        endpoint: 'sync_state_genSyncSpec',
        params: [
            {
                name: 'raw',
                type: 'bool'
            }
        ],
        type: 'Json'
    }
};

var definitions$t = {
    rpc: rpc$9,
    types: {}
};

const rpc$8 = {
    accountNextIndex: {
        alias: ['account_nextIndex'],
        description: 'Retrieves the next accountIndex as available on the node',
        params: [
            {
                name: 'accountId',
                type: 'AccountId'
            }
        ],
        type: 'Index'
    },
    addLogFilter: {
        description: 'Adds the supplied directives to the current log filter',
        isUnsafe: true,
        params: [
            {
                name: 'directives',
                type: 'Text'
            }
        ],
        type: 'Null'
    },
    addReservedPeer: {
        description: 'Adds a reserved peer',
        isUnsafe: true,
        params: [
            {
                name: 'peer',
                type: 'Text'
            }
        ],
        type: 'Text'
    },
    chain: {
        description: 'Retrieves the chain',
        params: [],
        type: 'Text'
    },
    chainType: {
        description: 'Retrieves the chain type',
        params: [],
        type: 'ChainType'
    },
    dryRun: {
        alias: ['system_dryRunAt'],
        description: 'Dry run an extrinsic at a given block',
        isUnsafe: true,
        params: [
            {
                name: 'extrinsic',
                type: 'Bytes'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'ApplyExtrinsicResult'
    },
    health: {
        description: 'Return health status of the node',
        noErrorLog: true,
        params: [],
        type: 'Health'
    },
    localListenAddresses: {
        description: 'The addresses include a trailing /p2p/ with the local PeerId, and are thus suitable to be passed to addReservedPeer or as a bootnode address for example',
        params: [],
        type: 'Vec<Text>'
    },
    localPeerId: {
        description: 'Returns the base58-encoded PeerId of the node',
        params: [],
        type: 'Text'
    },
    name: {
        description: 'Retrieves the node name',
        params: [],
        type: 'Text'
    },
    networkState: {
        alias: ['system_unstable_networkState'],
        description: 'Returns current state of the network',
        isUnsafe: true,
        params: [],
        type: 'NetworkState'
    },
    nodeRoles: {
        description: 'Returns the roles the node is running as',
        params: [],
        type: 'Vec<NodeRole>'
    },
    peers: {
        description: 'Returns the currently connected peers',
        isUnsafe: true,
        params: [],
        type: 'Vec<PeerInfo>'
    },
    properties: {
        description: 'Get a custom set of properties as a JSON object, defined in the chain spec',
        params: [],
        type: 'ChainProperties'
    },
    removeReservedPeer: {
        description: 'Remove a reserved peer',
        isUnsafe: true,
        params: [
            {
                name: 'peerId',
                type: 'Text'
            }
        ],
        type: 'Text'
    },
    reservedPeers: {
        description: 'Returns the list of reserved peers',
        params: [],
        type: 'Vec<Text>'
    },
    resetLogFilter: {
        description: 'Resets the log filter to Substrate defaults',
        isUnsafe: true,
        params: [],
        type: 'Null'
    },
    syncState: {
        description: 'Returns the state of the syncing of the node',
        params: [],
        type: 'SyncState'
    },
    version: {
        description: 'Retrieves the version of the node',
        params: [],
        type: 'Text'
    }
};

const runtime$a = {
    AccountNonceApi: [
        {
            methods: {
                account_nonce: {
                    description: 'The API to query account nonce (aka transaction index)',
                    params: [
                        {
                            name: 'accountId',
                            type: 'AccountId'
                        }
                    ],
                    type: 'Index'
                }
            },
            version: 1
        }
    ]
};

var definitions$s = {
    rpc: rpc$8,
    runtime: runtime$a,
    types: {
        AccountInfo: 'AccountInfoWithTripleRefCount',
        AccountInfoWithRefCountU8: {
            nonce: 'Index',
            refcount: 'u8',
            data: 'AccountData'
        },
        AccountInfoWithRefCount: {
            _fallback: 'AccountInfoWithRefCountU8',
            nonce: 'Index',
            refcount: 'RefCount',
            data: 'AccountData'
        },
        AccountInfoWithDualRefCount: {
            _fallback: 'AccountInfoWithRefCount',
            nonce: 'Index',
            consumers: 'RefCount',
            providers: 'RefCount',
            data: 'AccountData'
        },
        // original naming
        AccountInfoWithProviders: 'AccountInfoWithDualRefCount',
        AccountInfoWithTripleRefCount: {
            _fallback: 'AccountInfoWithDualRefCount',
            nonce: 'Index',
            consumers: 'RefCount',
            providers: 'RefCount',
            sufficients: 'RefCount',
            data: 'AccountData'
        },
        ApplyExtrinsicResult: 'Result<DispatchOutcome, TransactionValidityError>',
        ApplyExtrinsicResultPre6: 'Result<DispatchOutcomePre6, TransactionValidityError>',
        ArithmeticError: {
            _enum: [
                'Underflow',
                'Overflow',
                'DivisionByZero'
            ]
        },
        BlockLength: {
            max: 'PerDispatchClassU32'
        },
        BlockWeights: {
            baseBlock: 'Weight',
            maxBlock: 'Weight',
            perClass: 'PerDispatchClassWeightsPerClass'
        },
        ChainProperties: 'GenericChainProperties',
        ChainType: {
            _enum: {
                Development: 'Null',
                Local: 'Null',
                Live: 'Null',
                Custom: 'Text'
            }
        },
        ConsumedWeight: 'PerDispatchClassWeight',
        DigestOf: 'Digest',
        DispatchClass: {
            _enum: ['Normal', 'Operational', 'Mandatory']
        },
        DispatchError: {
            _enum: {
                Other: 'Null',
                CannotLookup: 'Null',
                BadOrigin: 'Null',
                Module: 'DispatchErrorModule',
                ConsumerRemaining: 'Null',
                NoProviders: 'Null',
                TooManyConsumers: 'Null',
                Token: 'TokenError',
                Arithmetic: 'ArithmeticError',
                Transactional: 'TransactionalError',
                Exhausted: 'Null',
                Corruption: 'Null',
                Unavailable: 'Null'
            }
        },
        DispatchErrorPre6: {
            _enum: {
                Other: 'Null',
                CannotLookup: 'Null',
                BadOrigin: 'Null',
                Module: 'DispatchErrorModulePre6',
                ConsumerRemaining: 'Null',
                NoProviders: 'Null',
                TooManyConsumers: 'Null',
                Token: 'TokenError',
                Arithmetic: 'ArithmeticError',
                Transactional: 'TransactionalError'
            }
        },
        DispatchErrorPre6First: {
            // The enum was modified mid-flight, affecting asset chains -
            // https://github.com/paritytech/substrate/pull/10382/files#diff-e4e016b33a82268b6208dc974eea841bad47597865a749fee2f937eb6fdf67b4R498
            _enum: {
                Other: 'Null',
                CannotLookup: 'Null',
                BadOrigin: 'Null',
                Module: 'DispatchErrorModulePre6',
                ConsumerRemaining: 'Null',
                NoProviders: 'Null',
                Token: 'TokenError',
                Arithmetic: 'ArithmeticError',
                Transactional: 'TransactionalError'
            }
        },
        DispatchErrorModuleU8: {
            index: 'u8',
            error: 'u8'
        },
        DispatchErrorModuleU8a: {
            index: 'u8',
            error: '[u8; 4]'
        },
        DispatchErrorModule: 'DispatchErrorModuleU8a',
        DispatchErrorModulePre6: 'DispatchErrorModuleU8',
        DispatchErrorTo198: {
            module: 'Option<u8>',
            error: 'u8'
        },
        DispatchInfo: {
            weight: 'Weight',
            class: 'DispatchClass',
            paysFee: 'Pays'
        },
        DispatchInfoTo190: {
            weight: 'Weight',
            class: 'DispatchClass'
        },
        DispatchInfoTo244: {
            weight: 'Weight',
            class: 'DispatchClass',
            paysFee: 'bool'
        },
        DispatchOutcome: 'Result<(), DispatchError>',
        DispatchOutcomePre6: 'Result<(), DispatchErrorPre6>',
        DispatchResult: 'Result<(), DispatchError>',
        DispatchResultOf: 'DispatchResult',
        DispatchResultTo198: 'Result<(), Text>',
        Event: 'GenericEvent',
        EventId: '[u8; 2]',
        EventIndex: 'u32',
        EventRecord: {
            phase: 'Phase',
            event: 'Event',
            topics: 'Vec<Hash>'
        },
        Health: {
            peers: 'u64',
            isSyncing: 'bool',
            shouldHavePeers: 'bool'
        },
        InvalidTransaction: {
            _enum: {
                Call: 'Null',
                Payment: 'Null',
                Future: 'Null',
                Stale: 'Null',
                BadProof: 'Null',
                AncientBirthBlock: 'Null',
                ExhaustsResources: 'Null',
                Custom: 'u8',
                BadMandatory: 'Null',
                MandatoryDispatch: 'Null',
                BadSigner: 'Null'
            }
        },
        Key: 'Bytes',
        LastRuntimeUpgradeInfo: {
            specVersion: 'Compact<u32>',
            specName: 'Text'
        },
        NetworkState: {
            peerId: 'Text',
            listenedAddresses: 'Vec<Text>',
            externalAddresses: 'Vec<Text>',
            connectedPeers: 'HashMap<Text, Peer>',
            notConnectedPeers: 'HashMap<Text, NotConnectedPeer>',
            averageDownloadPerSec: 'u64',
            averageUploadPerSec: 'u64',
            peerset: 'NetworkStatePeerset'
        },
        NetworkStatePeerset: {
            messageQueue: 'u64',
            nodes: 'HashMap<Text, NetworkStatePeersetInfo>'
        },
        NetworkStatePeersetInfo: {
            connected: 'bool',
            reputation: 'i32'
        },
        NodeRole: {
            _enum: {
                Full: 'Null',
                LightClient: 'Null',
                Authority: 'Null',
                UnknownRole: 'u8'
            }
        },
        NotConnectedPeer: {
            knownAddresses: 'Vec<Text>',
            latestPingTime: 'Option<PeerPing>',
            versionString: 'Option<Text>'
        },
        Peer: {
            enabled: 'bool',
            endpoint: 'PeerEndpoint',
            knownAddresses: 'Vec<Text>',
            latestPingTime: 'PeerPing',
            open: 'bool',
            versionString: 'Text'
        },
        PeerEndpoint: {
            listening: 'PeerEndpointAddr'
        },
        PeerEndpointAddr: {
            _alias: {
                localAddr: 'local_addr',
                sendBackAddr: 'send_back_addr'
            },
            localAddr: 'Text',
            sendBackAddr: 'Text'
        },
        PeerPing: {
            nanos: 'u64',
            secs: 'u64'
        },
        PeerInfo: {
            peerId: 'Text',
            roles: 'Text',
            protocolVersion: 'u32',
            bestHash: 'Hash',
            bestNumber: 'BlockNumber'
        },
        PerDispatchClassU32: {
            normal: 'u32',
            operational: 'u32',
            mandatory: 'u32'
        },
        PerDispatchClassWeight: {
            normal: 'Weight',
            operational: 'Weight',
            mandatory: 'Weight'
        },
        PerDispatchClassWeightsPerClass: {
            normal: 'WeightPerClass',
            operational: 'WeightPerClass',
            mandatory: 'WeightPerClass'
        },
        Phase: {
            _enum: {
                ApplyExtrinsic: 'u32',
                Finalization: 'Null',
                Initialization: 'Null'
            }
        },
        RawOrigin: {
            _enum: {
                Root: 'Null',
                Signed: 'AccountId',
                None: 'Null'
            }
        },
        RefCount: 'u32',
        RefCountTo259: 'u8',
        SyncState: {
            startingBlock: 'BlockNumber',
            currentBlock: 'BlockNumber',
            highestBlock: 'Option<BlockNumber>'
        },
        SystemOrigin: 'RawOrigin',
        TokenError: {
            _enum: [
                'NoFunds',
                'WouldDie',
                'BelowMinimum',
                'CannotCreate',
                'UnknownAsset',
                'Frozen',
                'Unsupported',
                // these are dropped, but still in older versions
                // (if this adjusts, will need to take a re-look)
                'Underflow',
                'Overflow'
            ]
        },
        TransactionValidityError: {
            _enum: {
                Invalid: 'InvalidTransaction',
                Unknown: 'UnknownTransaction'
            }
        },
        TransactionalError: {
            _enum: [
                'LimitReached',
                'NoLayer'
            ]
        },
        UnknownTransaction: {
            _enum: {
                CannotLookup: 'Null',
                NoUnsignedValidator: 'Null',
                Custom: 'u8'
            }
        },
        WeightPerClass: {
            baseExtrinsic: 'Weight',
            maxExtrinsic: 'Option<Weight>',
            maxTotal: 'Option<Weight>',
            reserved: 'Option<Weight>'
        }
    }
};

var definitions$r = {
    rpc: {},
    types: {
        Bounty: {
            proposer: 'AccountId',
            value: 'Balance',
            fee: 'Balance',
            curatorDeposit: 'Balance',
            bond: 'Balance',
            status: 'BountyStatus'
        },
        BountyIndex: 'u32',
        BountyStatus: {
            _enum: {
                Proposed: 'Null',
                Approved: 'Null',
                Funded: 'Null',
                CuratorProposed: 'BountyStatusCuratorProposed',
                Active: 'BountyStatusActive',
                PendingPayout: 'BountyStatusPendingPayout'
            }
        },
        BountyStatusActive: {
            curator: 'AccountId',
            updateDue: 'BlockNumber'
        },
        BountyStatusCuratorProposed: {
            curator: 'AccountId'
        },
        BountyStatusPendingPayout: {
            curator: 'AccountId',
            beneficiary: 'AccountId',
            unlockAt: 'BlockNumber'
        },
        OpenTip: {
            reason: 'Hash',
            who: 'AccountId',
            finder: 'AccountId',
            deposit: 'Balance',
            closes: 'Option<BlockNumber>',
            tips: 'Vec<OpenTipTip>',
            findersFee: 'bool'
        },
        OpenTipTo225: {
            reason: 'Hash',
            who: 'AccountId',
            finder: 'Option<OpenTipFinderTo225>',
            closes: 'Option<BlockNumber>',
            tips: 'Vec<OpenTipTip>'
        },
        OpenTipFinderTo225: '(AccountId, Balance)',
        OpenTipTip: '(AccountId, Balance)',
        TreasuryProposal: {
            proposer: 'AccountId',
            value: 'Balance',
            beneficiary: 'AccountId',
            bond: 'Balance'
        }
    }
};

var definitions$q = {
    rpc: {},
    types: {
        Multiplier: 'Fixed128'
    }
};

const runtime$9 = {
    TaggedTransactionQueue: [
        {
            methods: {
                validate_transaction: {
                    description: 'Validate the transaction.',
                    params: [
                        {
                            name: 'source',
                            type: 'TransactionSource'
                        },
                        {
                            name: 'tx',
                            type: 'Extrinsic'
                        },
                        {
                            name: 'blockHash',
                            type: 'BlockHash'
                        }
                    ],
                    type: 'TransactionValidity'
                }
            },
            version: 3
        },
        {
            methods: {
                validate_transaction: {
                    description: 'Validate the transaction.',
                    params: [
                        {
                            name: 'source',
                            type: 'TransactionSource'
                        },
                        {
                            name: 'tx',
                            type: 'Extrinsic'
                        }
                    ],
                    type: 'TransactionValidity'
                }
            },
            version: 2
        },
        {
            methods: {
                validate_transaction: {
                    description: 'Validate the transaction.',
                    params: [
                        {
                            name: 'tx',
                            type: 'Extrinsic'
                        }
                    ],
                    type: 'TransactionValidity'
                }
            },
            version: 1
        }
    ]
};

var definitions$p = {
    rpc: {},
    runtime: runtime$9,
    types: {
        TransactionSource: {
            _enum: ['InBlock', 'Local', 'External']
        },
        TransactionValidity: 'Result<ValidTransaction, TransactionValidityError>',
        ValidTransaction: {
            priority: 'TransactionPriority',
            requires: 'Vec<TransactionTag>',
            provides: 'Vec<TransactionTag>',
            longevity: 'TransactionLongevity',
            propagate: 'bool'
        }
    }
};

var definitions$o = {
    rpc: {},
    types: {
        ClassId: 'u32',
        InstanceId: 'u32',
        DepositBalance: 'Balance',
        DepositBalanceOf: 'Balance',
        ClassDetails: {
            owner: 'AccountId',
            issuer: 'AccountId',
            admin: 'AccountId',
            freezer: 'AccountId',
            totalDeposit: 'DepositBalance',
            freeHolding: 'bool',
            instances: 'u32',
            instanceMetadatas: 'u32',
            attributes: 'u32',
            isFrozen: 'bool'
        },
        DestroyWitness: {
            instances: 'Compact<u32>',
            instanceMetadatas: 'Compact<u32>',
            attributes: 'Compact<u32>'
        },
        InstanceDetails: {
            owner: 'AccountId',
            approved: 'Option<AccountId>',
            isFrozen: 'bool',
            deposit: 'DepositBalance'
        },
        ClassMetadata: {
            deposit: 'DepositBalance',
            data: 'Vec<u8>',
            isFrozen: 'bool'
        },
        InstanceMetadata: {
            deposit: 'DepositBalance',
            data: 'Vec<u8>',
            isFrozen: 'bool'
        }
    }
};

var definitions$n = {
    rpc: {},
    types: {
        Multisig: {
            when: 'Timepoint',
            deposit: 'Balance',
            depositor: 'AccountId',
            approvals: 'Vec<AccountId>'
        },
        Timepoint: {
            height: 'BlockNumber',
            index: 'u32'
        }
    }
};

var definitions$m = {
    rpc: {},
    types: {
        VestingInfo: {
            locked: 'Balance',
            perBlock: 'Balance',
            startingBlock: 'BlockNumber'
        }
    }
};

var definitions$l = {
    rpc: {},
    types: {
        BlockAttestations: {
            receipt: 'CandidateReceipt',
            valid: 'Vec<AccountId>',
            invalid: 'Vec<AccountId>'
        },
        IncludedBlocks: {
            actualNumber: 'BlockNumber',
            session: 'SessionIndex',
            randomSeed: 'H256',
            activeParachains: 'Vec<ParaId>',
            paraBlocks: 'Vec<Hash>'
        },
        MoreAttestations: {}
    }
};

var definitions$k = {
    rpc: {},
    types: {
        BridgedBlockHash: 'H256',
        BridgedBlockNumber: 'BlockNumber',
        BridgedHeader: 'Header',
        BridgeMessageId: '(LaneId, MessageNonce)',
        CallOrigin: {
            _enum: {
                SourceRoot: 'Null',
                TargetAccount: '(AccountId, MultiSigner, MultiSignature)',
                SourceAccount: 'AccountId'
            }
        },
        ChainId: '[u8; 4]',
        DeliveredMessages: {
            begin: 'MessageNonce',
            end: 'MessageNonce',
            // pub type DispatchResultsBitVec = BitVec<Msb0, u8>;
            dispatchResults: 'BitVec'
        },
        DispatchFeePayment: {
            _enum: ['AtSourceChain', 'AtTargetChain']
        },
        InboundLaneData: {
            relayers: 'Vec<UnrewardedRelayer>',
            lastConfirmedNonce: 'MessageNonce'
        },
        InboundRelayer: 'AccountId',
        InitializationData: {
            header: 'Header',
            authorityList: 'AuthorityList',
            setId: 'SetId',
            isHalted: 'bool'
        },
        LaneId: '[u8; 4]',
        MessageData: {
            payload: 'Bytes',
            fee: 'Balance'
        },
        MessagesDeliveryProofOf: {
            bridgedHeaderHash: 'BlockHash',
            storageProof: 'Vec<Bytes>',
            lane: 'LaneId'
        },
        MessageKey: {
            laneId: 'LaneId',
            nonce: 'MessageNonce'
        },
        MessageNonce: 'u64',
        MessagesProofOf: {
            bridgedHeaderHash: 'BridgedBlockHash',
            storageProof: 'Vec<Bytes>',
            lane: 'LaneId',
            noncesStart: 'MessageNonce',
            noncesEnd: 'MessageNonce'
        },
        OperatingMode: {
            _enum: ['Normal', 'RejectingOutboundMessages', 'Halted']
        },
        OutboundLaneData: {
            oldestUnprunedNonce: 'MessageNonce',
            latestReceivedNonce: 'MessageNonce',
            latestGeneratedNonce: 'MessageNonce'
        },
        OutboundMessageFee: 'Balance',
        OutboundPayload: {
            specVersion: 'u32',
            weight: 'Weight',
            origin: 'CallOrigin',
            dispatchFeePayment: 'DispatchFeePayment',
            call: 'Bytes'
        },
        Parameter: 'Null',
        RelayerId: 'AccountId',
        UnrewardedRelayer: {
            relayer: 'RelayerId',
            messages: 'DeliveredMessages'
        },
        UnrewardedRelayersState: {
            unrewardedRelayer_Entries: 'MessageNonce',
            messagesInOldestEntry: 'MessageNonce',
            totalMessages: 'MessageNonce'
        }
    }
};

var definitions$j = {
    rpc: {},
    types: {
        StatementKind: {
            _enum: ['Regular', 'Saft']
        }
    }
};

var definitions$i = {
    rpc: {},
    types: {
        FundIndex: 'u32',
        LastContribution: {
            _enum: {
                Never: 'Null',
                PreEnding: 'u32',
                Ending: 'BlockNumber'
            }
        },
        FundInfo: {
            depositor: 'AccountId',
            verifier: 'Option<MultiSigner>',
            deposit: 'Balance',
            raised: 'Balance',
            end: 'BlockNumber',
            cap: 'Balance',
            lastContribution: 'LastContribution',
            firstPeriod: 'LeasePeriod',
            lastPeriod: 'LeasePeriod',
            trieIndex: 'TrieIndex'
        },
        TrieIndex: 'u32'
    }
};

const runtime$8 = {
    CollectCollationInfo: [
        {
            methods: {
                collect_collation_info: {
                    description: 'Collect information about a collation.',
                    params: [
                        {
                            name: 'header',
                            type: 'Header'
                        }
                    ],
                    type: 'CollationInfo'
                }
            },
            version: 2
        },
        {
            methods: {
                collect_collation_info: {
                    description: 'Collect information about a collation.',
                    params: [],
                    type: 'CollationInfoV1'
                }
            },
            version: 1
        }
    ]
};

const dmpQueue = {
    CollationInfo: {
        upwardMessages: 'Vec<UpwardMessage>',
        horizontalMessages: 'Vec<OutboundHrmpMessage>',
        newValidationCode: 'Option<ValidationCode>',
        processedDownwardMessages: 'u32',
        hrmpWatermark: 'RelayBlockNumber',
        headData: 'HeadData'
    },
    CollationInfoV1: {
        upwardMessages: 'Vec<UpwardMessage>',
        horizontalMessages: 'Vec<OutboundHrmpMessage>',
        newValidationCode: 'Option<ValidationCode>',
        processedDownwardMessages: 'u32',
        hrmpWatermark: 'RelayBlockNumber'
    },
    ConfigData: {
        maxIndividual: 'Weight'
    },
    MessageId: '[u8; 32]',
    OverweightIndex: 'u64',
    PageCounter: 'u32',
    PageIndexData: {
        beginUsed: 'PageCounter',
        endUsed: 'PageCounter',
        overweightCount: 'OverweightIndex'
    }
};
var definitions$h = {
    rpc: {},
    runtime: runtime$8,
    types: dmpQueue
};

const finalityV1 = {
    methods: {
        best_finalized: {
            description: 'Returns number and hash of the best finalized header known to the bridge module.',
            params: [],
            type: '(BlockNumber, Hash)'
        }
    },
    version: 1
};
const runtime$7 = {
    KusamaFinalityApi: [finalityV1],
    PolkadotFinalityApi: [finalityV1],
    RococoFinalityApi: [finalityV1],
    WestendFinalityApi: [finalityV1]
};

var definitions$g = {
    rpc: {},
    runtime: runtime$7,
    types: {}
};

/* eslint-disable sort-keys */
var hrmpTypes = {
    HrmpChannel: {
        maxCapacity: 'u32',
        maxTotalSize: 'u32',
        maxMessageSize: 'u32',
        msgCount: 'u32',
        totalSize: 'u32',
        mqcHead: 'Option<Hash>',
        senderDeposit: 'Balance',
        recipientDeposit: 'Balance'
    },
    HrmpChannelId: {
        sender: 'u32',
        receiver: 'u32'
    },
    HrmpOpenChannelRequest: {
        confirmed: 'bool',
        age: 'SessionIndex',
        senderDeposit: 'Balance',
        maxMessageSize: 'u32',
        maxCapacity: 'u32',
        maxTotalSize: 'u32'
    }
};

const PH_V1_TO_V2 = {
    assumed_validation_data: {
        description: 'Returns the persisted validation data for the given `ParaId` along with the corresponding validation code hash.',
        params: [
            {
                name: 'paraId',
                type: 'ParaId'
            },
            {
                name: 'hash',
                type: 'Hash'
            }
        ],
        type: 'Option<(PersistedValidationData, ValidationCodeHash)>'
    },
    availability_cores: {
        description: 'Yields information on all availability cores as relevant to the child block.',
        params: [],
        type: 'Vec<CoreState>'
    },
    candidate_events: {
        description: 'Get a vector of events concerning candidates that occurred within a block.',
        params: [],
        type: 'Vec<CandidateEvent>'
    },
    candidate_pending_availability: {
        description: 'Get the receipt of a candidate pending availability.',
        params: [
            {
                name: 'paraId',
                type: 'ParaId'
            }
        ],
        type: 'Option<CommittedCandidateReceipt>'
    },
    check_validation_outputs: {
        description: 'Checks if the given validation outputs pass the acceptance criteria.',
        params: [
            {
                name: 'paraId',
                type: 'ParaId'
            },
            {
                name: 'outputs',
                type: 'CandidateCommitments'
            }
        ],
        type: 'bool'
    },
    dmq_contents: {
        description: 'Get all the pending inbound messages in the downward message queue for a para.',
        params: [
            {
                name: 'paraId',
                type: 'ParaId'
            }
        ],
        type: 'Vec<InboundDownwardMessage>'
    },
    inbound_hrmp_channels_contents: {
        description: 'Get the contents of all channels addressed to the given recipient.',
        params: [
            {
                name: 'paraId',
                type: 'ParaId'
            }
        ],
        type: 'Vec<InboundHrmpMessage>'
    },
    on_chain_votes: {
        description: 'Scrape dispute relevant from on-chain, backing votes and resolved disputes.',
        params: [],
        type: 'Option<ScrapedOnChainVotes>'
    },
    persisted_validation_data: {
        description: 'Yields the persisted validation data for the given `ParaId` along with an assumption that should be used if the para currently occupies a core.',
        params: [
            {
                name: 'paraId',
                type: 'ParaId'
            },
            {
                name: 'assumption',
                type: 'OccupiedCoreAssumption'
            }
        ],
        type: 'Option<PersistedValidationData>'
    },
    session_index_for_child: {
        description: 'Returns the session index expected at a child of the block.',
        params: [],
        type: 'SessionIndex'
    },
    validation_code: {
        description: 'Fetch the validation code used by a para, making the given `OccupiedCoreAssumption`.',
        params: [
            {
                name: 'paraId',
                type: 'ParaId'
            },
            {
                name: 'assumption',
                type: 'OccupiedCoreAssumption'
            }
        ],
        type: 'ValidationCode'
    },
    validation_code_by_hash: {
        description: 'Get the validation code from its hash.',
        params: [
            {
                name: 'hash',
                type: 'ValidationCodeHash'
            }
        ],
        type: 'Option<ValidationCode>'
    },
    validator_groups: {
        description: 'Returns the validator groups and rotation info localized based on the hypothetical child of a block whose state  this is invoked on',
        params: [],
        type: '(Vec<Vec<ParaValidatorIndex>>, GroupRotationInfo)'
    },
    validators: {
        description: 'Get the current validators.',
        params: [],
        type: 'Vec<ValidatorId>'
    }
};
const PH_V2_TO_V3 = {
    pvfs_require_precheck: {
        description: 'Returns code hashes of PVFs that require pre-checking by validators in the active set.',
        params: [],
        type: 'Vec<ValidationCodeHash>'
    },
    session_info: {
        description: 'Get the session info for the given session, if stored.',
        params: [
            {
                name: 'index',
                type: 'SessionIndex'
            }
        ],
        type: 'Option<SessionInfo>'
    },
    submit_pvf_check_statement: {
        description: 'Submits a PVF pre-checking statement into the transaction pool.',
        params: [
            {
                name: 'stmt',
                type: 'PvfCheckStatement'
            },
            {
                name: 'signature',
                type: 'ValidatorSignature'
            }
        ],
        type: 'Null'
    },
    validation_code_hash: {
        description: 'Fetch the hash of the validation code used by a para, making the given `OccupiedCoreAssumption`.',
        params: [
            {
                name: 'paraId',
                type: 'ParaId'
            },
            {
                name: 'assumption',
                type: 'OccupiedCoreAssumption'
            }
        ],
        type: 'Option<ValidationCodeHash>'
    }
};
const runtime$6 = {
    ParachainHost: [
        {
            methods: objectSpread({
                disputes: {
                    description: 'Returns all onchain disputes.',
                    params: [],
                    type: 'Vec<(SessionIndex, CandidateHash, DisputeState)>'
                }
            }, PH_V1_TO_V2, PH_V2_TO_V3),
            version: 3
        },
        {
            methods: objectSpread({}, PH_V1_TO_V2, PH_V2_TO_V3),
            version: 2
        },
        {
            methods: objectSpread({
                session_info: {
                    description: 'Get the session info for the given session, if stored.',
                    params: [
                        {
                            name: 'index',
                            type: 'SessionIndex'
                        }
                    ],
                    type: 'Option<OldV1SessionInfo>'
                }
            }, PH_V1_TO_V2),
            version: 1
        }
    ]
};

/* eslint-disable sort-keys */
const SlotRange10 = {
    _enum: ['ZeroZero', 'ZeroOne', 'ZeroTwo', 'ZeroThree', 'OneOne', 'OneTwo', 'OneThree', 'TwoTwo', 'TwoThree', 'ThreeThree']
};
const SlotRange = {
    _enum: ['ZeroZero', 'ZeroOne', 'ZeroTwo', 'ZeroThree', 'ZeroFour', 'ZeroFive', 'ZeroSix', 'ZeroSeven', 'OneOne', 'OneTwo', 'OneThree', 'OneFour', 'OneFive', 'OneSix', 'OneSeven', 'TwoTwo', 'TwoThree', 'TwoFour', 'TwoFive', 'TwoSix', 'TwoSeven', 'ThreeThree', 'ThreeFour', 'ThreeFive', 'ThreeSix', 'ThreeSeven', 'FourFour', 'FourFive', 'FourSix', 'FourSeven', 'FiveFive', 'FiveSix', 'FiveSeven', 'SixSix', 'SixSeven', 'SevenSeven']
};
const oldTypes = {
    Bidder: {
        _enum: {
            New: 'NewBidder',
            Existing: 'ParaId'
        }
    },
    IncomingParachain: {
        _enum: {
            Unset: 'NewBidder',
            Fixed: 'IncomingParachainFixed',
            Deploy: 'IncomingParachainDeploy'
        }
    },
    IncomingParachainDeploy: {
        code: 'ValidationCode',
        initialHeadData: 'HeadData'
    },
    IncomingParachainFixed: {
        codeHash: 'Hash',
        codeSize: 'u32',
        initialHeadData: 'HeadData'
    },
    NewBidder: {
        who: 'AccountId',
        sub: 'SubId'
    },
    SubId: 'u32'
};
var slotTypes = objectSpread({}, oldTypes, {
    AuctionIndex: 'u32',
    LeasePeriod: 'BlockNumber',
    LeasePeriodOf: 'BlockNumber',
    SlotRange10,
    SlotRange,
    WinningData10: `[WinningDataEntry; ${SlotRange10._enum.length}]`,
    WinningData: `[WinningDataEntry; ${SlotRange._enum.length}]`,
    WinningDataEntry: 'Option<(AccountId, ParaId, BalanceOf)>',
    WinnersData10: 'Vec<WinnersDataTuple10>',
    WinnersData: 'Vec<WinnersDataTuple>',
    WinnersDataTuple10: '(AccountId, ParaId, BalanceOf, SlotRange10)',
    WinnersDataTuple: '(AccountId, ParaId, BalanceOf, SlotRange)'
});

const proposeTypes = {
    ParachainProposal: {
        proposer: 'AccountId',
        genesisHead: 'HeadData',
        validators: 'Vec<ValidatorId>',
        name: 'Bytes',
        balance: 'Balance'
    },
    RegisteredParachainInfo: {
        validators: 'Vec<ValidatorId>',
        proposer: 'AccountId'
    }
};
const cumulusTypes = {
    ServiceQuality: {
        _enum: ['Ordered', 'Fast']
    }
};
const disputeTypes = {
    DisputeLocation: {
        _enum: ['Local', 'Remote']
    },
    DisputeResult: {
        _enum: ['Valid', 'Invalid']
    },
    DisputeState: {
        validatorsFor: 'BitVec',
        validatorsAgainst: 'BitVec',
        start: 'BlockNumber',
        concludedAt: 'Option<BlockNumber>'
    },
    DisputeStatement: {
        _enum: {
            Valid: 'ValidDisputeStatementKind',
            Invalid: 'InvalidDisputeStatementKind'
        }
    },
    DisputeStatementSet: {
        candidateHash: 'CandidateHash',
        session: 'SessionIndex',
        statements: 'Vec<(DisputeStatement, ParaValidatorIndex, ValidatorSignature)>'
    },
    ExplicitDisputeStatement: {
        valid: 'bool',
        candidateHash: 'CandidateHash',
        session: 'SessionIndex'
    },
    InvalidDisputeStatementKind: {
        _enum: ['Explicit']
    },
    MultiDisputeStatementSet: 'Vec<DisputeStatementSet>',
    ValidDisputeStatementKind: {
        _enum: {
            Explicit: 'Null',
            BackingSeconded: 'Hash',
            BackingValid: 'Hash',
            ApprovalChecking: 'Null'
        }
    }
};
var definitions$f = {
    rpc: {},
    runtime: runtime$6,
    types: objectSpread({}, cumulusTypes, disputeTypes, hrmpTypes, proposeTypes, slotTypes, {
        AbridgedCandidateReceipt: {
            parachainIndex: 'ParaId',
            relayParent: 'Hash',
            headData: 'HeadData',
            collator: 'CollatorId',
            signature: 'CollatorSignature',
            povBlockHash: 'Hash',
            commitments: 'CandidateCommitments'
        },
        AbridgedHostConfiguration: {
            maxCodeSize: 'u32',
            maxHeadDataSize: 'u32',
            maxUpwardQueueCount: 'u32',
            maxUpwardQueueSize: 'u32',
            maxUpwardMessageSize: 'u32',
            maxUpwardMessageNumPerCandidate: 'u32',
            hrmpMaxMessageNumPerCandidate: 'u32',
            validationUpgradeFrequency: 'BlockNumber',
            validationUpgradeDelay: 'BlockNumber'
        },
        AbridgedHrmpChannel: {
            maxCapacity: 'u32',
            maxTotalSize: 'u32',
            maxMessageSize: 'u32',
            msgCount: 'u32',
            totalSize: 'u32',
            mqcHead: 'Option<Hash>'
        },
        AssignmentId: 'AccountId',
        AssignmentKind: {
            _enum: {
                Parachain: 'Null',
                Parathread: '(CollatorId, u32)'
            }
        },
        AttestedCandidate: {
            candidate: 'AbridgedCandidateReceipt',
            validityVotes: 'Vec<ValidityAttestation>',
            validatorIndices: 'BitVec'
        },
        AuthorityDiscoveryId: 'AccountId',
        AvailabilityBitfield: 'BitVec',
        AvailabilityBitfieldRecord: {
            bitfield: 'AvailabilityBitfield',
            submittedTt: 'BlockNumber'
        },
        BackedCandidate: {
            candidate: 'CommittedCandidateReceipt',
            validityVotes: 'Vec<ValidityAttestation>',
            validatorIndices: 'BitVec'
        },
        BufferedSessionChange: {
            applyAt: 'BlockNumber',
            validators: 'Vec<ValidatorId>',
            queued: 'Vec<ValidatorId>',
            sessionIndex: 'SessionIndex'
        },
        CandidateCommitments: {
            upwardMessages: 'Vec<UpwardMessage>',
            horizontalMessages: 'Vec<OutboundHrmpMessage>',
            newValidationCode: 'Option<ValidationCode>',
            headData: 'HeadData',
            processedDownwardMessages: 'u32',
            hrmpWatermark: 'BlockNumber'
        },
        CandidateDescriptor: {
            paraId: 'ParaId',
            relayParent: 'RelayChainHash',
            collatorId: 'CollatorId',
            persistedValidationDataHash: 'Hash',
            povHash: 'Hash',
            erasureRoot: 'Hash',
            signature: 'CollatorSignature',
            paraHead: 'Hash',
            validationCodeHash: 'ValidationCodeHash'
        },
        CandidateEvent: {
            _enum: {
                CandidateBacked: '(CandidateReceipt, HeadData, CoreIndex, GroupIndex)',
                CandidateIncluded: '(CandidateReceipt, HeadData, CoreIndex, GroupIndex)',
                CandidateTimedOut: '(CandidateReceipt, HeadData, CoreIndex)'
            }
        },
        CandidateHash: 'Hash',
        CandidateInfo: {
            who: 'AccountId',
            deposit: 'Balance'
        },
        CandidatePendingAvailability: {
            core: 'CoreIndex',
            hash: 'CandidateHash',
            descriptor: 'CandidateDescriptor',
            availabilityVotes: 'BitVec',
            backers: 'BitVec',
            relayParentNumber: 'BlockNumber',
            backedInNumber: 'BlockNumber',
            backingGroup: 'GroupIndex'
        },
        CandidateReceipt: {
            descriptor: 'CandidateDescriptor',
            commitmentsHash: 'Hash'
        },
        GlobalValidationData: {
            maxCodeSize: 'u32',
            maxHeadDataSize: 'u32',
            blockNumber: 'BlockNumber'
        },
        CollatorId: 'H256',
        CollatorSignature: 'Signature',
        CommittedCandidateReceipt: {
            descriptor: 'CandidateDescriptor',
            commitments: 'CandidateCommitments'
        },
        CoreAssignment: {
            core: 'CoreIndex',
            paraId: 'ParaId',
            kind: 'AssignmentKind',
            groupIdx: 'GroupIndex'
        },
        CoreIndex: 'u32',
        CoreOccupied: {
            _enum: {
                Parathread: 'ParathreadEntry',
                Parachain: 'Null'
            }
        },
        CoreState: {
            _enum: {
                Occupied: 'OccupiedCore',
                Scheduled: 'ScheduledCore',
                Free: 'Null'
            }
        },
        DoubleVoteReport: {
            identity: 'ValidatorId',
            first: '(Statement, ValidatorSignature)',
            second: '(Statement, ValidatorSignature)',
            proof: 'MembershipProof',
            signingContext: 'SigningContext'
        },
        DownwardMessage: 'Bytes',
        GroupIndex: 'u32',
        GroupRotationInfo: {
            sessionStartBlock: 'BlockNumber',
            groupRotationFrequency: 'BlockNumber',
            now: 'BlockNumber'
        },
        GlobalValidationSchedule: {
            maxCodeSize: 'u32',
            maxHeadDataSize: 'u32',
            blockNumber: 'BlockNumber'
        },
        HeadData: 'Bytes',
        HostConfiguration: {
            maxCodeSize: 'u32',
            maxHeadDataSize: 'u32',
            maxUpwardQueueCount: 'u32',
            maxUpwardQueueSize: 'u32',
            maxUpwardMessageSize: 'u32',
            maxUpwardMessageNumPerCandidate: 'u32',
            hrmpMaxMessageNumPerCandidate: 'u32',
            validationUpgradeFrequency: 'BlockNumber',
            validationUpgradeDelay: 'BlockNumber',
            maxPovSize: 'u32',
            maxDownwardMessageSize: 'u32',
            preferredDispatchableUpwardMessagesStepWeight: 'Weight',
            hrmpMaxParachainOutboundChannels: 'u32',
            hrmpMaxParathreadOutboundChannels: 'u32',
            hrmpOpenRequestTtl: 'u32',
            hrmpSenderDeposit: 'Balance',
            hrmpRecipientDeposit: 'Balance',
            hrmpChannelMaxCapacity: 'u32',
            hrmpChannelMaxTotalSize: 'u32',
            hrmpMaxParachainInboundChannels: 'u32',
            hrmpMaxParathreadInboundChannels: 'u32',
            hrmpChannelMaxMessageSize: 'u32',
            codeRetentionPeriod: 'BlockNumber',
            parathreadCores: 'u32',
            parathreadRetries: 'u32',
            groupRotationFrequency: 'BlockNumber',
            chainAvailabilityPeriod: 'BlockNumber',
            threadAvailabilityPeriod: 'BlockNumber',
            schedulingLookahead: 'u32',
            maxValidatorsPerCore: 'Option<u32>',
            maxValidators: 'Option<u32>',
            disputePeriod: 'SessionIndex',
            disputePostConclusionAcceptancePeriod: 'BlockNumber',
            disputeMaxSpamSlots: 'u32',
            disputeConclusionByTimeOutPeriod: 'BlockNumber',
            noShowSlots: 'u32',
            nDelayTranches: 'u32',
            zerothDelayTrancheWidth: 'u32',
            neededApprovals: 'u32',
            relayVrfModuloSamples: 'u32'
        },
        InboundDownwardMessage: {
            pubSentAt: 'BlockNumber',
            pubMsg: 'DownwardMessage'
        },
        InboundHrmpMessage: {
            sentAt: 'BlockNumber',
            data: 'Bytes'
        },
        InboundHrmpMessages: 'Vec<InboundHrmpMessage>',
        LocalValidationData: {
            parentHead: 'HeadData',
            balance: 'Balance',
            codeUpgradeAllowed: 'Option<BlockNumber>'
        },
        MessageIngestionType: {
            downwardMessages: 'Vec<InboundDownwardMessage>',
            horizontalMessages: 'BTreeMap<ParaId, InboundHrmpMessages>'
        },
        MessageQueueChain: 'RelayChainHash',
        OccupiedCore: {
            nextUpOnAvailable: 'Option<ScheduledCore>',
            occupiedSince: 'BlockNumber',
            timeOutAt: 'BlockNumber',
            nextUpOnTimeOut: 'Option<ScheduledCore>',
            availability: 'BitVec',
            groupResponsible: 'GroupIndex',
            candidateHash: 'CandidateHash',
            candidateDescriptor: 'CandidateDescriptor'
        },
        OccupiedCoreAssumption: {
            _enum: ['Included,', 'TimedOut', 'Free']
        },
        OutboundHrmpMessage: {
            recipient: 'u32',
            data: 'Bytes'
        },
        ParachainDispatchOrigin: {
            _enum: ['Signed', 'Parachain', 'Root']
        },
        ParachainInherentData: {
            validationData: 'PersistedValidationData',
            relayChainState: 'StorageProof',
            downwardMessages: 'Vec<InboundDownwardMessage>',
            horizontalMessages: 'BTreeMap<ParaId, VecInboundHrmpMessage>'
        },
        ParachainsInherentData: {
            bitfields: 'SignedAvailabilityBitfields',
            backedCandidates: 'Vec<BackedCandidate>',
            disputes: 'MultiDisputeStatementSet',
            parentHeader: 'Header'
        },
        ParaGenesisArgs: {
            genesisHead: 'Bytes',
            validationCode: 'Bytes',
            parachain: 'bool'
        },
        ParaId: 'u32',
        ParaInfo: {
            manager: 'AccountId',
            deposit: 'Balance',
            locked: 'bool'
        },
        ParaLifecycle: {
            _enum: ['Onboarding', 'Parathread', 'Parachain', 'UpgradingToParachain', 'DowngradingToParathread', 'OutgoingParathread', 'OutgoingParachain']
        },
        ParaPastCodeMeta: {
            upgradeTimes: 'Vec<ReplacementTimes>',
            lastPruned: 'Option<BlockNumber>'
        },
        ParaScheduling: {
            _enum: ['Always', 'Dynamic']
        },
        ParathreadClaim: '(ParaId, CollatorId)',
        ParathreadClaimQueue: {
            queue: 'Vec<QueuedParathread>',
            nextCoreOffset: 'u32'
        },
        ParathreadEntry: {
            claim: 'ParathreadClaim',
            retries: 'u32'
        },
        ParaValidatorIndex: 'u32',
        PersistedValidationData: {
            parentHead: 'HeadData',
            relayParentNumber: 'RelayChainBlockNumber',
            relayParentStorageRoot: 'Hash',
            maxPovSize: 'u32'
        },
        PvfCheckStatement: {
            accept: 'bool',
            subject: 'ValidationCodeHash',
            sessionIndex: 'SessionIndex',
            validatorIndex: 'ParaValidatorIndex'
        },
        QueuedParathread: {
            claim: 'ParathreadEntry',
            coreOffset: 'u32'
        },
        RelayBlockNumber: 'u32',
        RelayChainBlockNumber: 'RelayBlockNumber',
        RelayHash: 'Hash',
        RelayChainHash: 'RelayHash',
        Remark: '[u8; 32]',
        ReplacementTimes: {
            expectedAt: 'BlockNumber',
            activatedAt: 'BlockNumber'
        },
        Retriable: {
            _enum: {
                Never: 'Null',
                WithRetries: 'u32'
            }
        },
        ScheduledCore: {
            paraId: 'ParaId',
            collator: 'Option<CollatorId>'
        },
        Scheduling: {
            _enum: ['Always', 'Dynamic']
        },
        ScrapedOnChainVotes: {
            session: 'SessionIndex',
            backingValidatorsPerCandidate: 'Vec<(CandidateReceipt, Vec<(ParaValidatorIndex, ValidityAttestation)>)>',
            disputes: 'MultiDisputeStatementSet'
        },
        SessionInfo: {
            activeValidatorIndices: 'Vec<ParaValidatorIndex>',
            randomSeed: '[u8; 32]',
            disputePeriod: 'SessionIndex',
            validators: 'Vec<ValidatorId>',
            discoveryKeys: 'Vec<AuthorityDiscoveryId>',
            assignmentKeys: 'Vec<AssignmentId>',
            validatorGroups: 'Vec<Vec<ValidatorIndex>>',
            nCores: 'u32',
            zerothDelayTrancheWidth: 'u32',
            relayVrfModuloSamples: 'u32',
            nDelayTranches: 'u32',
            noShowSlots: 'u32',
            neededApprovals: 'u32'
        },
        OldV1SessionInfo: {
            validators: 'Vec<ValidatorId>',
            discoveryKeys: 'Vec<AuthorityDiscoveryId>',
            assignmentKeys: 'Vec<AssignmentId>',
            validatorGroups: 'Vec<Vec<ParaValidatorIndex>>',
            nCores: 'u32',
            zerothDelayTrancheWidth: 'u32',
            relayVrfModuloSamples: 'u32',
            nDelayTranches: 'u32',
            noShowSlots: 'u32',
            neededApprovals: 'u32'
        },
        SessionInfoValidatorGroup: 'Vec<ParaValidatorIndex>',
        SignedAvailabilityBitfield: {
            payload: 'BitVec',
            validatorIndex: 'ParaValidatorIndex',
            signature: 'ValidatorSignature'
        },
        SignedAvailabilityBitfields: 'Vec<SignedAvailabilityBitfield>',
        SigningContext: {
            sessionIndex: 'SessionIndex',
            parentHash: 'Hash'
        },
        Statement: {
            _enum: {
                Never: 'Null',
                Candidate: 'Hash',
                Valid: 'Hash',
                Invalid: 'Hash'
            }
        },
        TransientValidationData: {
            maxCodeSize: 'u32',
            maxHeadDataSize: 'u32',
            balance: 'Balance',
            codeUpgradeAllowed: 'Option<BlockNumber>',
            dmqLength: 'u32'
        },
        UpgradeGoAhead: {
            _enum: ['Abort', 'GoAhead']
        },
        UpgradeRestriction: {
            _enum: ['Present']
        },
        UpwardMessage: 'Bytes',
        ValidationFunctionParams: {
            maxCodeSize: 'u32',
            relayChainHeight: 'RelayChainBlockNumber',
            codeUpgradeAllowed: 'Option<RelayChainBlockNumber>'
        },
        ValidationCode: 'Bytes',
        ValidationCodeHash: 'Hash',
        ValidationData: {
            persisted: 'PersistedValidationData',
            transient: 'TransientValidationData'
        },
        ValidationDataType: {
            validationData: 'ValidationData',
            relayChainState: 'Vec<Bytes>'
        },
        ValidatorSignature: 'Signature',
        ValidityAttestation: {
            _enum: {
                Never: 'Null',
                Implicit: 'ValidatorSignature',
                Explicit: 'ValidatorSignature'
            }
        },
        MessagingStateSnapshot: {
            relayDispatchQueueSize: '(u32, u32)',
            egressChannels: 'Vec<MessagingStateSnapshotEgressEntry>'
        },
        MessagingStateSnapshotEgressEntry: '(ParaId, AbridgedHrmpChannel)',
        SystemInherentData: 'ParachainInherentData',
        VecInboundHrmpMessage: 'Vec<InboundHrmpMessage>'
    })
};

var definitions$e = {
    rpc: {},
    types: {
        Approvals: '[bool; 4]'
    }
};

var definitions$d = {
    rpc: {},
    types: {
        AccountStatus: {
            validity: 'AccountValidity',
            freeBalance: 'Balance',
            lockedBalance: 'Balance',
            signature: 'Vec<u8>',
            vat: 'Permill'
        },
        AccountValidity: {
            _enum: ['Invalid', 'Initiated', 'Pending', 'ValidLow', 'ValidHigh', 'Completed']
        }
    }
};

var TypeDefInfo;
(function (TypeDefInfo) {
    TypeDefInfo[TypeDefInfo["BTreeMap"] = 0] = "BTreeMap";
    TypeDefInfo[TypeDefInfo["BTreeSet"] = 1] = "BTreeSet";
    TypeDefInfo[TypeDefInfo["Compact"] = 2] = "Compact";
    TypeDefInfo[TypeDefInfo["DoNotConstruct"] = 3] = "DoNotConstruct";
    TypeDefInfo[TypeDefInfo["Enum"] = 4] = "Enum";
    TypeDefInfo[TypeDefInfo["HashMap"] = 5] = "HashMap";
    TypeDefInfo[TypeDefInfo["Int"] = 6] = "Int";
    TypeDefInfo[TypeDefInfo["Linkage"] = 7] = "Linkage";
    TypeDefInfo[TypeDefInfo["Null"] = 8] = "Null";
    TypeDefInfo[TypeDefInfo["Option"] = 9] = "Option";
    TypeDefInfo[TypeDefInfo["Plain"] = 10] = "Plain";
    TypeDefInfo[TypeDefInfo["Range"] = 11] = "Range";
    TypeDefInfo[TypeDefInfo["RangeInclusive"] = 12] = "RangeInclusive";
    TypeDefInfo[TypeDefInfo["Result"] = 13] = "Result";
    TypeDefInfo[TypeDefInfo["Set"] = 14] = "Set";
    TypeDefInfo[TypeDefInfo["Si"] = 15] = "Si";
    TypeDefInfo[TypeDefInfo["Struct"] = 16] = "Struct";
    TypeDefInfo[TypeDefInfo["Tuple"] = 17] = "Tuple";
    TypeDefInfo[TypeDefInfo["UInt"] = 18] = "UInt";
    TypeDefInfo[TypeDefInfo["Vec"] = 19] = "Vec";
    TypeDefInfo[TypeDefInfo["VecFixed"] = 20] = "VecFixed";
    TypeDefInfo[TypeDefInfo["WrapperKeepOpaque"] = 21] = "WrapperKeepOpaque";
    TypeDefInfo[TypeDefInfo["WrapperOpaque"] = 22] = "WrapperOpaque";
})(TypeDefInfo || (TypeDefInfo = {}));

function hasEq(o) {
    return isFunction$1(o.eq);
}

function compareArray(a, b) {
    if (Array.isArray(b)) {
        return (a.length === b.length) && isUndefined(a.find((v, index) => hasEq(v)
            ? !v.eq(b[index])
            : v !== b[index]));
    }
    return false;
}

/**
 * @name AbstractArray
 * @description
 * This manages codec arrays. It is an extension to Array, providing
 * specific encoding/decoding on top of the base type.
 * @noInheritDoc
 */
class AbstractArray extends Array {
    /**
     * @description This ensures that operators such as clice, filter, map, etc. return
     * new Array instances (without this we need to apply overrides)
     */
    static get [Symbol.species]() {
        return Array;
    }
    constructor(registry, length) {
        super(length);
        this.registry = registry;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        // We need to loop through all entries since they may have a variable length themselves,
        // e.g. when a Vec or Compact is contained withing, it has a variable length based on data
        let total = compactToU8a(this.length).length;
        for (let i = 0; i < this.length; i++) {
            total += this[i].encodedLength;
        }
        return total;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */
    get isEmpty() {
        return this.length === 0;
    }
    /**
     * @description The length of the value
     */
    get length() {
        // only included here since we ignore inherited docs
        return super.length;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        return compareArray(this, other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return {
            inner: this.inspectInner(),
            outer: [compactToU8a(this.length)]
        };
    }
    inspectInner() {
        const inner = new Array(this.length);
        for (let i = 0; i < this.length; i++) {
            inner[i] = this[i].inspect();
        }
        return inner;
    }
    /**
     * @description Converts the Object to an standard JavaScript Array
     */
    toArray() {
        return Array.from(this);
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
        return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
        const result = new Array(this.length);
        for (let i = 0; i < this.length; i++) {
            result[i] = this[i] && this[i].toHuman(isExtended);
        }
        return result;
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        const result = new Array(this.length);
        for (let i = 0; i < this.length; i++) {
            // We actually log inside the U8a decoding and use JSON.stringify(...), which
            // means that the Vec may be partially populated (same applies to toHuman, same check)
            result[i] = this[i] && this[i].toJSON();
        }
        return result;
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        const result = new Array(this.length);
        for (let i = 0; i < this.length; i++) {
            result[i] = this[i] && this[i].toPrimitive();
        }
        return result;
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        const result = new Array(this.length);
        for (let i = 0; i < this.length; i++) {
            result[i] = this[i].toString();
        }
        return `[${result.join(', ')}]`;
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        const encoded = this.toU8aInner();
        return isBare
            ? u8aConcatStrict(encoded)
            : u8aConcatStrict([compactToU8a(this.length), ...encoded]);
    }
    toU8aInner(isBare) {
        const encoded = new Array(this.length);
        for (let i = 0; i < this.length; i++) {
            encoded[i] = this[i].toU8a(isBare);
        }
        return encoded;
    }
}

var _AbstractBase_raw;
/**
 * @name Base
 * @description A type extends the Base class, when it holds a value
 */
class AbstractBase {
    constructor(registry, value, initialU8aLength) {
        _AbstractBase_raw.set(this, void 0);
        this.initialU8aLength = initialU8aLength;
        __classPrivateFieldSet(this, _AbstractBase_raw, value, "f");
        this.registry = registry;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        return this.toU8a().length;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description returns the inner (wrapped value)
     */
    get inner() {
        return __classPrivateFieldGet(this, _AbstractBase_raw, "f");
    }
    /**
     * @description Checks if the value is an empty value
     */
    get isEmpty() {
        return __classPrivateFieldGet(this, _AbstractBase_raw, "f").isEmpty;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        return __classPrivateFieldGet(this, _AbstractBase_raw, "f").eq(other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return __classPrivateFieldGet(this, _AbstractBase_raw, "f").inspect();
    }
    /**
     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
     */
    toHex(isLe) {
        return __classPrivateFieldGet(this, _AbstractBase_raw, "f").toHex(isLe);
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
        return __classPrivateFieldGet(this, _AbstractBase_raw, "f").toHuman(isExtended);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return __classPrivateFieldGet(this, _AbstractBase_raw, "f").toJSON();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return __classPrivateFieldGet(this, _AbstractBase_raw, "f").toPrimitive();
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return __classPrivateFieldGet(this, _AbstractBase_raw, "f").toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        return __classPrivateFieldGet(this, _AbstractBase_raw, "f").toU8a(isBare);
    }
    /**
     * @description Returns the inner wrapped value (equivalent to valueOf)
     */
    unwrap() {
        return __classPrivateFieldGet(this, _AbstractBase_raw, "f");
    }
    /**
     * @description Returns the inner wrapped value
     */
    valueOf() {
        return __classPrivateFieldGet(this, _AbstractBase_raw, "f");
    }
}
_AbstractBase_raw = new WeakMap();

var _AbstractInt_bitLength;
const DEFAULT_UINT_BITS = 64;
const MAX_NUMBER_BITS = 52;
const MUL_P = new BN(10000);
const FORMATTERS = [
    ['Perquintill', BN_QUINTILL],
    ['Perbill', BN_BILLION],
    ['Permill', BN_MILLION],
    ['Percent', BN_HUNDRED]
];
function isToBn(value) {
    return isFunction$1(value.toBn);
}
function toPercentage(value, divisor) {
    return `${(value.mul(MUL_P).div(divisor).toNumber() / 100).toFixed(2)}%`;
}
/** @internal */
function decodeAbstractInt(value, isNegative) {
    if (isNumber(value)) {
        if (!Number.isInteger(value) || value > Number.MAX_SAFE_INTEGER || value < Number.MIN_SAFE_INTEGER) {
            throw new Error('Number needs to be an integer <= Number.MAX_SAFE_INTEGER, i.e. 2 ^ 53 - 1');
        }
        return value;
    }
    else if (isString(value)) {
        if (isHex(value, -1, true)) {
            return hexToBn(value, { isLe: false, isNegative }).toString();
        }
        if (value.includes('.') || value.includes(',') || value.includes('e')) {
            throw new Error('String should not contain decimal points or scientific notation');
        }
        return value;
    }
    else if (isBn(value) || isBigInt(value)) {
        return value.toString();
    }
    else if (isObject(value)) {
        if (isToBn(value)) {
            return value.toBn().toString();
        }
        // Allow the construction from an object with a single top-level key. This means that
        // single key objects can be treated equivalently to numbers, assuming they meet the
        // specific requirements. (This is useful in Weights 1.5 where Objects are compact)
        const keys = Object.keys(value);
        if (keys.length !== 1) {
            throw new Error('Unable to construct number from multi-key object');
        }
        return decodeAbstractInt(value[keys[0]], isNegative);
    }
    else if (!value) {
        return 0;
    }
    throw new Error(`Unable to create BN from unknown type ${typeof value}`);
}
/**
 * @name AbstractInt
 * @ignore
 * @noInheritDoc
 */
class AbstractInt extends BN {
    constructor(registry, value = 0, bitLength = DEFAULT_UINT_BITS, isSigned = false) {
        // Construct via a string/number, which will be passed in the BN constructor.
        // It would be ideal to actually return a BN, but there is an issue:
        // https://github.com/indutny/bn.js/issues/206
        super(
        // shortcut isU8a as used in SCALE decoding
        isU8a(value)
            ? bitLength <= 48
                ? u8aToNumber(value.subarray(0, bitLength / 8), { isNegative: isSigned })
                : u8aToBn(value.subarray(0, bitLength / 8), { isLe: true, isNegative: isSigned }).toString()
            : decodeAbstractInt(value, isSigned));
        _AbstractInt_bitLength.set(this, void 0);
        this.registry = registry;
        __classPrivateFieldSet(this, _AbstractInt_bitLength, bitLength, "f");
        this.encodedLength = __classPrivateFieldGet(this, _AbstractInt_bitLength, "f") / 8;
        this.initialU8aLength = __classPrivateFieldGet(this, _AbstractInt_bitLength, "f") / 8;
        this.isUnsigned = !isSigned;
        const isNegative = this.isNeg();
        const maxBits = bitLength - (isSigned && !isNegative ? 1 : 0);
        if (isNegative && !isSigned) {
            throw new Error(`${this.toRawType()}: Negative number passed to unsigned type`);
        }
        else if (super.bitLength() > maxBits) {
            throw new Error(`${this.toRawType()}: Input too large. Found input with ${super.bitLength()} bits, expected ${maxBits}`);
        }
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is a zero value (align elsewhere)
     */
    get isEmpty() {
        return this.isZero();
    }
    /**
     * @description Returns the number of bits in the value
     */
    bitLength() {
        return __classPrivateFieldGet(this, _AbstractInt_bitLength, "f");
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    eq(other) {
        // Here we are actually overriding the built-in .eq to take care of both
        // number and BN inputs (no `.eqn` needed) - numbers will be converted
        return super.eq(isHex(other)
            ? hexToBn(other.toString(), { isLe: false, isNegative: !this.isUnsigned })
            : bnToBn(other));
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return {
            outer: [this.toU8a()]
        };
    }
    /**
     * @description True if this value is the max of the type
     */
    isMax() {
        const u8a = this.toU8a().filter((b) => b === 0xff);
        return u8a.length === (__classPrivateFieldGet(this, _AbstractInt_bitLength, "f") / 8);
    }
    /**
     * @description Returns a BigInt representation of the number
     */
    toBigInt() {
        return BigInt(this.toString());
    }
    /**
     * @description Returns the BN representation of the number. (Compatibility)
     */
    toBn() {
        return this;
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex(isLe = false) {
        // For display/JSON, this is BE, for compare, use isLe
        return bnToHex(this, {
            bitLength: this.bitLength(),
            isLe,
            isNegative: !this.isUnsigned
        });
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    toHuman(isExpanded) {
        const rawType = this.toRawType();
        if (rawType === 'Balance') {
            return this.isMax()
                ? 'everything'
                // FIXME In the case of multiples we need some way of detecting which instance this belongs
                // to. as it stands we will always format (incorrectly) against the first token defined
                : formatBalance(this, { decimals: this.registry.chainDecimals[0], withSi: true, withUnit: this.registry.chainTokens[0] });
        }
        const [, divisor] = FORMATTERS.find(([type]) => type === rawType) || [];
        return divisor
            ? toPercentage(this, divisor)
            : formatNumber(this);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON(onlyHex = false) {
        // FIXME this return type should by string | number, however BN returns string
        // Options here are
        //   - super.bitLength() - the actual used bits
        //   - this.#bitLength - the type bits (this should be used, however contracts RPC is problematic)
        return onlyHex || (super.bitLength() > MAX_NUMBER_BITS)
            ? this.toHex()
            : this.toNumber();
    }
    /**
     * @description Returns the value in a primitive form, either number when <= 52 bits, or string otherwise
     */
    toPrimitive() {
        return super.bitLength() > MAX_NUMBER_BITS
            ? this.toString()
            : this.toNumber();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        // NOTE In the case of balances, which have a special meaning on the UI
        // and can be interpreted differently, return a specific value for it so
        // underlying it always matches (no matter which length it actually is)
        return this instanceof this.registry.createClassUnsafe('Balance')
            ? 'Balance'
            : `${this.isUnsigned ? 'u' : 'i'}${this.bitLength()}`;
    }
    /**
     * @description Returns the string representation of the value
     * @param base The base to use for the conversion
     */
    toString(base) {
        // only included here since we do not inherit docs
        return super.toString(base);
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    toU8a(isBare) {
        return bnToU8a(this, {
            bitLength: this.bitLength(),
            isLe: true,
            isNegative: !this.isUnsigned
        });
    }
}
_AbstractInt_bitLength = new WeakMap();

function hasMismatch(a, b) {
    return isUndefined(a) || (hasEq(a)
        ? !a.eq(b)
        : a !== b);
}
function notEntry(value) {
    return !Array.isArray(value) || value.length !== 2;
}
function compareMapArray(a, b) {
    // equal number of entries and each entry in the array should match
    return (a.size === b.length) && !b.some((e) => notEntry(e) ||
        hasMismatch(a.get(e[0]), e[1]));
}
function compareMap(a, b) {
    if (Array.isArray(b)) {
        return compareMapArray(a, b);
    }
    else if (b instanceof Map) {
        return compareMapArray(a, [...b.entries()]);
    }
    else if (isObject(b)) {
        return compareMapArray(a, Object.entries(b));
    }
    return false;
}

function compareSetArray(a, b) {
    // equal number of entries and each entry in the array should match
    return (a.size === b.length) && !b.some((e) => !a.has(e));
}
function compareSet(a, b) {
    if (Array.isArray(b)) {
        return compareSetArray(a, b);
    }
    else if (b instanceof Set) {
        return compareSetArray(a, [...b.values()]);
    }
    else if (isObject(b)) {
        return compareSetArray(a, Object.values(b));
    }
    return false;
}

/** @internal */
function formatFailure(registry, fn, result, { message }, u8a, i, count, Type, key) {
    let type = '';
    try {
        type = `: ${new Type(registry).toRawType()}`;
    }
    catch {
        // ignore
    }
    // This is extra debugging info (we most-probably want this in in some way, shape or form,
    // but at this point not quite sure how to include and format it (it can be quite massive)
    // console.error(JSON.stringify(result, null, 2));
    return `${fn}: failed at ${u8aToHex(u8a.subarray(0, 16))}…${key ? ` on ${key}` : ''} (index ${i + 1}/${count})${type}:: ${message}`;
}
/**
 * @internal
 *
 * Given an u8a, and an array of Type constructors, decode the u8a against the
 * types, and return an array of decoded values.
 *
 * @param u8a - The u8a to decode.
 * @param result - The result array (will be returned with values pushed)
 * @param types - The array of CodecClass to decode the U8a against.
 */
function decodeU8a$6(registry, result, u8a, [Types, keys]) {
    const count = result.length;
    let offset = 0;
    let i = 0;
    try {
        while (i < count) {
            const value = new Types[i](registry, u8a.subarray(offset));
            offset += value.initialU8aLength || value.encodedLength;
            result[i] = value;
            i++;
        }
    }
    catch (error) {
        throw new Error(formatFailure(registry, 'decodeU8a', result, error, u8a.subarray(offset), i, count, Types[i], keys[i]));
    }
    return [result, offset];
}
/**
 * @internal
 *
 * Split from decodeU8a since this is specialized to zip returns ... while we duplicate, this
 * is all on the hot-path, so it is not great, however there is (some) method behind the madness
 */
function decodeU8aStruct(registry, result, u8a, [Types, keys]) {
    const count = result.length;
    let offset = 0;
    let i = 0;
    try {
        while (i < count) {
            const value = new Types[i](registry, u8a.subarray(offset));
            offset += value.initialU8aLength || value.encodedLength;
            result[i] = [keys[i], value];
            i++;
        }
    }
    catch (error) {
        throw new Error(formatFailure(registry, 'decodeU8aStruct', result, error, u8a.subarray(offset), i, count, Types[i], keys[i]));
    }
    return [result, offset];
}
/**
 * @internal
 *
 * Split from decodeU8a since this is specialized to 1 instance ... while we duplicate, this
 * is all on the hot-path, so it is not great, however there is (some) method behind the madness
 */
function decodeU8aVec(registry, result, u8a, startAt, Type) {
    const count = result.length;
    let offset = startAt;
    let i = 0;
    try {
        while (i < count) {
            const value = new Type(registry, u8a.subarray(offset));
            offset += value.initialU8aLength || value.encodedLength;
            result[i] = value;
            i++;
        }
    }
    catch (error) {
        throw new Error(formatFailure(registry, 'decodeU8aVec', result, error, u8a.subarray(offset), i, count, Type));
    }
    return [offset, offset - startAt];
}

function typeToConstructor(registry, type) {
    return (isString(type)
        ? registry.createClassUnsafe(type)
        : type);
}

/**
 * @description takes an input map of the form `{ [string]: string | CodecClass }` and returns a map of `{ [string]: CodecClass }`
 */
function mapToTypeMap(registry, input) {
    const entries = Object.entries(input);
    const count = entries.length;
    const output = [new Array(count), new Array(count)];
    for (let i = 0; i < count; i++) {
        output[1][i] = entries[i][0];
        output[0][i] = typeToConstructor(registry, entries[i][1]);
    }
    return output;
}

const BOUNDED = ['BTreeMap', 'BTreeSet', 'HashMap', 'Vec'];
const ALLOWED_BOXES = BOUNDED.concat(['Compact', 'DoNotConstruct', 'Int', 'Linkage', 'Range', 'RangeInclusive', 'Result', 'Opaque', 'Option', 'UInt', 'WrapperKeepOpaque', 'WrapperOpaque']);
const BOX_PRECEDING = ['<', '(', '[', '"', ',', ' ']; // start of vec, tuple, fixed array, part of struct def or in tuple
const mappings = [
    // alias <T::InherentOfflineReport as InherentOfflineReport>::Inherent -> InherentOfflineReport
    alias('<T::InherentOfflineReport as InherentOfflineReport>::Inherent', 'InherentOfflineReport', false),
    alias('VecDeque<', 'Vec<', false),
    // <T::Balance as HasCompact>
    cleanupCompact(),
    // Change BoundedVec<Type, Size> to Vec<Type>
    removeExtensions('Bounded', true),
    // Change WeakVec<Type> to Vec<Type>
    removeExtensions('Weak', false),
    // Remove all the trait prefixes
    removeTraits(),
    // remove PairOf<T> -> (T, T)
    removePairOf(),
    // remove boxing, `Box<Proposal>` -> `Proposal`
    removeWrap('Box<'),
    // remove generics, `MisbehaviorReport<Hash, BlockNumber>` -> `MisbehaviorReport`
    removeGenerics(),
    // alias String -> Text (compat with jsonrpc methods)
    alias('String', 'Text'),
    // alias Vec<u8> -> Bytes
    alias('Vec<u8>', 'Bytes'),
    alias('&\\[u8\\]', 'Bytes'),
    alias("&'static\\[u8\\]", 'Bytes'),
    // alias RawAddress -> Address
    alias('RawAddress', 'Address'),
    // lookups, mapped to Address/AccountId as appropriate in runtime
    alias('Lookup::Source', 'LookupSource'),
    alias('Lookup::Target', 'LookupTarget'),
    // HACK duplication between contracts & primitives, however contracts prefixed with exec
    alias('exec::StorageKey', 'ContractStorageKey'),
    // flattens tuples with one value, `(AccountId)` -> `AccountId`
    flattenSingleTuple(),
    // converts ::Type to Type, <T as Trait<I>>::Proposal -> Proposal
    removeColons(),
    // remove all trailing spaces - this should always be the last
    trim()
];
function trim() {
    return (value) => value.trim();
}
function findClosing(value, start) {
    let depth = 0;
    for (let index = start; index < value.length; index++) {
        if (value[index] === '>') {
            if (!depth) {
                return index;
            }
            depth--;
        }
        else if (value[index] === '<') {
            depth++;
        }
    }
    throw new Error(`Unable to find closing matching <> on '${value}' (start ${start})`);
}
function alias(src, dest, withChecks = true) {
    const from = new RegExp(`(^${src}|${BOX_PRECEDING.map((box) => `\\${box}${src}`).join('|')})`, 'g');
    const to = (src) => {
        from.lastIndex = 0;
        return withChecks && BOX_PRECEDING.includes(src[0])
            ? `${src[0]}${dest}`
            : dest;
    };
    return (value) => value.replace(from, to);
}
function cleanupCompact() {
    return (value) => {
        if (value.includes(' as HasCompact')) {
            for (let index = 0; index < value.length; index++) {
                if (value[index] === '<') {
                    const end = findClosing(value, index + 1) - 14;
                    if (value.substring(end, end + 14) === ' as HasCompact') {
                        value = `Compact<${value.substring(index + 1, end)}>`;
                    }
                }
            }
        }
        return value;
    };
}
function flattenSingleTuple() {
    const from1 = /,\)/g;
    const from2 = /\(([^,]+)\)/;
    return (value) => {
        from1.lastIndex = 0;
        return value
            // tuples may have trailing commas, e.g. (u32, BlockNumber, )
            .replace(from1, ')')
            // change (u32) -> u32
            .replace(from2, '$1');
    };
}
function replaceTagWith(value, matcher, replacer) {
    let index = -1;
    while (true) {
        index = value.indexOf(matcher, index + 1);
        if (index === -1) {
            return value;
        }
        const start = index + matcher.length;
        const end = findClosing(value, start);
        value = `${value.substring(0, index)}${replacer(value.substring(start, end))}${value.substring(end + 1)}`;
    }
}
function removeExtensions(type, isSized) {
    return (value) => {
        for (let i = 0; i < BOUNDED.length; i++) {
            const tag = BOUNDED[i];
            value = replaceTagWith(value, `${type}${tag}<`, (v) => {
                const parts = v
                    .split(',')
                    .map((s) => s.trim())
                    .filter((s) => s);
                if (isSized) {
                    parts.pop();
                }
                return `${tag}<${parts.join(',')}>`;
            });
        }
        return value;
    };
}
function removeColons() {
    return (value) => {
        let index = 0;
        while (index !== -1) {
            index = value.indexOf('::');
            if (index === 0) {
                value = value.substring(2);
            }
            else if (index !== -1) {
                let start = index;
                while (start !== -1 && !BOX_PRECEDING.includes(value[start])) {
                    start--;
                }
                value = `${value.substring(0, start + 1)}${value.substring(index + 2)}`;
            }
        }
        return value;
    };
}
function removeGenerics() {
    return (value) => {
        for (let index = 0; index < value.length; index++) {
            if (value[index] === '<') {
                // check against the allowed wrappers, be it Vec<..>, Option<...> ...
                const box = ALLOWED_BOXES.find((box) => {
                    const start = index - box.length;
                    return ((start >= 0 &&
                        value.substring(start, index) === box) && (
                    // make sure it is stand-alone, i.e. don't catch ElectionResult<...> as Result<...>
                    start === 0 ||
                        BOX_PRECEDING.includes(value[start - 1])));
                });
                // we have not found anything, unwrap generic innards
                if (!box) {
                    const end = findClosing(value, index + 1);
                    value = `${value.substring(0, index)}${value.substring(end + 1)}`;
                }
            }
        }
        return value;
    };
}
function removePairOf() {
    const replacer = (v) => `(${v},${v})`;
    return (value) => replaceTagWith(value, 'PairOf<', replacer);
}
function removeTraits() {
    const from1 = /\s/g;
    const from2 = /(T|Self)::/g;
    const from3 = /<(T|Self)asTrait>::/g;
    const from4 = /<Tas[a-z]+::Trait>::/g;
    const from5 = /<LookupasStaticLookup>/g;
    const from6 = /::Type/g;
    return (value) => {
        from1.lastIndex = 0;
        from2.lastIndex = 0;
        from3.lastIndex = 0;
        from4.lastIndex = 0;
        from5.lastIndex = 0;
        from6.lastIndex = 0;
        return value
            // remove all whitespaces
            .replace(from1, '')
            // anything `T::<type>` to end up as `<type>`
            .replace(from2, '')
            // replace `<T as Trait>::` (whitespaces were removed above)
            .replace(from3, '')
            // replace `<T as something::Trait>::` (whitespaces were removed above)
            .replace(from4, '')
            // replace <Lookup as StaticLookup>
            .replace(from5, 'Lookup')
            // replace `<...>::Type`
            .replace(from6, '');
    };
}
function removeWrap(check) {
    const replacer = (v) => v;
    return (value) => replaceTagWith(value, check, replacer);
}
const sanitizeMap = new Map();
function sanitize(value) {
    const startValue = value.toString();
    const memoized = sanitizeMap.get(startValue);
    if (memoized) {
        return memoized;
    }
    let result = startValue;
    for (let i = 0; i < mappings.length; i++) {
        result = mappings[i](result);
    }
    sanitizeMap.set(startValue, result);
    return result;
}

/** @internal **/
function isArrayLike(arg) {
    return arg instanceof Uint8Array || Array.isArray(arg);
}
/** @internal **/
function isCodec(arg) {
    return isFunction$1(arg && arg.toU8a);
}
/** @internal **/
function isEnum(arg) {
    return isCodec(arg) && isNumber(arg.index) && isCodec(arg.value);
}
/** @internal */
function isNumberLike(arg) {
    return isNumber(arg) || isBn(arg) || isBigInt(arg);
}
/** @internal */
function sortArray(a, b) {
    // Vec, Tuple, Bytes etc.
    let sortRes = 0;
    const minLen = Math.min(a.length, b.length);
    for (let i = 0; i < minLen; ++i) {
        sortRes = sortAsc(a[i], b[i]);
        if (sortRes !== 0) {
            return sortRes;
        }
    }
    return a.length - b.length;
}
/**
* Sort keys/values of BTreeSet/BTreeMap in ascending order for encoding compatibility with Rust's BTreeSet/BTreeMap
* (https://doc.rust-lang.org/stable/std/collections/struct.BTreeSet.html)
* (https://doc.rust-lang.org/stable/std/collections/struct.BTreeMap.html)
*/
function sortAsc(a, b) {
    if (isNumberLike(a) && isNumberLike(b)) {
        return bnToBn(a).cmp(bnToBn(b));
    }
    else if (a instanceof Map && b instanceof Map) {
        return sortAsc(Array.from(a.values()), Array.from(b.values()));
    }
    else if (isEnum(a) && isEnum(b)) {
        return sortAsc(a.index, b.index) || sortAsc(a.value, b.value);
    }
    else if (isArrayLike(a) && isArrayLike(b)) {
        return sortArray(a, b);
    }
    else if (isCodec(a) && isCodec(b)) {
        // Text, Bool etc.
        return sortAsc(a.toU8a(true), b.toU8a(true));
    }
    throw new Error(`Attempting to sort unrecognized values: ${stringify(a)} (typeof ${typeof a}) <-> ${stringify(b)} (typeof ${typeof b})`);
}
function sortSet(set) {
    return new Set(Array.from(set).sort(sortAsc));
}
function sortMap(map) {
    return new Map(Array.from(map.entries()).sort(([keyA], [keyB]) => sortAsc(keyA, keyB)));
}

function typesToMap(registry, [Types, keys]) {
    const result = {};
    for (let i = 0; i < keys.length; i++) {
        result[keys[i]] = registry.getClassName(Types[i]) || new Types[i](registry).toRawType();
    }
    return result;
}

var _Compact_Type, _Compact_raw;
function noopSetDefinition$6(d) {
    return d;
}
function decodeCompact(registry, Type, value) {
    if (isU8a(value)) {
        const [decodedLength, bn] = (value[0] & 0b11) < 0b11
            ? compactFromU8aLim(value)
            : compactFromU8a(value);
        return [new Type(registry, bn), decodedLength];
    }
    else if (value instanceof Compact) {
        const raw = value.unwrap();
        return raw instanceof Type
            ? [raw, 0]
            : [new Type(registry, raw), 0];
    }
    else if (value instanceof Type) {
        return [value, 0];
    }
    return [new Type(registry, value), 0];
}
/**
 * @name Compact
 * @description
 * A compact length-encoding codec wrapper. It performs the same function as Length, however
 * differs in that it uses a variable number of bytes to do the actual encoding. This is mostly
 * used by other types to add length-prefixed encoding, or in the case of wrapped types, taking
 * a number and making the compact representation thereof
 */
class Compact {
    constructor(registry, Type, value = 0, { definition, setDefinition = noopSetDefinition$6 } = {}) {
        _Compact_Type.set(this, void 0);
        _Compact_raw.set(this, void 0);
        this.registry = registry;
        __classPrivateFieldSet(this, _Compact_Type, definition || setDefinition(typeToConstructor(registry, Type)), "f");
        const [raw, decodedLength] = decodeCompact(registry, __classPrivateFieldGet(this, _Compact_Type, "f"), value);
        this.initialU8aLength = decodedLength;
        __classPrivateFieldSet(this, _Compact_raw, raw, "f");
    }
    static with(Type) {
        let definition;
        // eslint-disable-next-line no-return-assign
        const setDefinition = (d) => (definition = d);
        return class extends Compact {
            constructor(registry, value) {
                super(registry, Type, value, { definition, setDefinition });
            }
        };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        return this.toU8a().length;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */
    get isEmpty() {
        return __classPrivateFieldGet(this, _Compact_raw, "f").isEmpty;
    }
    /**
     * @description Returns the number of bits in the value
     */
    bitLength() {
        return __classPrivateFieldGet(this, _Compact_raw, "f").bitLength();
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        return __classPrivateFieldGet(this, _Compact_raw, "f").eq(other instanceof Compact
            ? __classPrivateFieldGet(other, _Compact_raw, "f")
            : other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return {
            outer: [this.toU8a()]
        };
    }
    /**
     * @description Returns a BigInt representation of the number
     */
    toBigInt() {
        return __classPrivateFieldGet(this, _Compact_raw, "f").toBigInt();
    }
    /**
     * @description Returns the BN representation of the number
     */
    toBn() {
        return __classPrivateFieldGet(this, _Compact_raw, "f").toBn();
    }
    /**
     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
     */
    toHex(isLe) {
        return __classPrivateFieldGet(this, _Compact_raw, "f").toHex(isLe);
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
        return __classPrivateFieldGet(this, _Compact_raw, "f").toHuman(isExtended);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return __classPrivateFieldGet(this, _Compact_raw, "f").toJSON();
    }
    /**
     * @description Returns the number representation for the value
     */
    toNumber() {
        return __classPrivateFieldGet(this, _Compact_raw, "f").toNumber();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return __classPrivateFieldGet(this, _Compact_raw, "f").toPrimitive();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return `Compact<${this.registry.getClassName(__classPrivateFieldGet(this, _Compact_Type, "f")) || __classPrivateFieldGet(this, _Compact_raw, "f").toRawType()}>`;
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return __classPrivateFieldGet(this, _Compact_raw, "f").toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    toU8a(isBare) {
        return compactToU8a(__classPrivateFieldGet(this, _Compact_raw, "f").toBn());
    }
    /**
     * @description Returns the embedded [[UInt]] or [[Moment]] value
     */
    unwrap() {
        return __classPrivateFieldGet(this, _Compact_raw, "f");
    }
}
_Compact_Type = new WeakMap(), _Compact_raw = new WeakMap();

var _DoNotConstruct_neverError;
/**
 * @name DoNotConstruct
 * @description
 * An unknown type that fails on construction with the type info
 */
class DoNotConstruct {
    constructor(registry, typeName = 'DoNotConstruct') {
        _DoNotConstruct_neverError.set(this, void 0);
        this.registry = registry;
        __classPrivateFieldSet(this, _DoNotConstruct_neverError, new Error(`DoNotConstruct: Cannot construct unknown type ${typeName}`), "f");
        throw __classPrivateFieldGet(this, _DoNotConstruct_neverError, "f");
    }
    static with(typeName) {
        return class extends DoNotConstruct {
            constructor(registry) {
                super(registry, typeName);
            }
        };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        throw __classPrivateFieldGet(this, _DoNotConstruct_neverError, "f");
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        throw __classPrivateFieldGet(this, _DoNotConstruct_neverError, "f");
    }
    /**
     * @description Checks if the value is an empty value (always true)
     */
    get isEmpty() {
        throw __classPrivateFieldGet(this, _DoNotConstruct_neverError, "f");
    }
    eq() {
        throw __classPrivateFieldGet(this, _DoNotConstruct_neverError, "f");
    }
    inspect() {
        throw __classPrivateFieldGet(this, _DoNotConstruct_neverError, "f");
    }
    toHex() {
        throw __classPrivateFieldGet(this, _DoNotConstruct_neverError, "f");
    }
    toHuman() {
        throw __classPrivateFieldGet(this, _DoNotConstruct_neverError, "f");
    }
    toJSON() {
        throw __classPrivateFieldGet(this, _DoNotConstruct_neverError, "f");
    }
    toPrimitive() {
        throw __classPrivateFieldGet(this, _DoNotConstruct_neverError, "f");
    }
    toRawType() {
        throw __classPrivateFieldGet(this, _DoNotConstruct_neverError, "f");
    }
    toString() {
        throw __classPrivateFieldGet(this, _DoNotConstruct_neverError, "f");
    }
    toU8a() {
        throw __classPrivateFieldGet(this, _DoNotConstruct_neverError, "f");
    }
}
_DoNotConstruct_neverError = new WeakMap();

/**
 * @name Null
 * @description
 * Implements a type that does not contain anything (apart from `null`)
 */
class Null {
    constructor(registry) {
        this.encodedLength = 0;
        this.isEmpty = true;
        this.initialU8aLength = 0;
        this.registry = registry;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        throw new Error('.hash is not implemented on Null');
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        return other instanceof Null || isNull(other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return {};
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
        return '0x';
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
        return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return null;
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return null;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'Null';
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return '';
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    toU8a(isBare) {
        return new Uint8Array();
    }
}

var _Enum_def, _Enum_entryIndex, _Enum_indexes, _Enum_isBasic, _Enum_isIndexed, _Enum_raw;
function noopSetDefinition$5(d) {
    return d;
}
function isRustEnum$1(def) {
    const defValues = Object.values(def);
    if (defValues.some((v) => isNumber(v))) {
        if (!defValues.every((v) => isNumber(v) && v >= 0 && v <= 255)) {
            throw new Error('Invalid number-indexed enum definition');
        }
        return false;
    }
    return true;
}
function extractDef(registry, _def) {
    const def = {};
    let isBasic;
    let isIndexed;
    if (Array.isArray(_def)) {
        for (let i = 0; i < _def.length; i++) {
            def[_def[i]] = { Type: Null, index: i };
        }
        isBasic = true;
        isIndexed = false;
    }
    else if (isRustEnum$1(_def)) {
        const [Types, keys] = mapToTypeMap(registry, _def);
        for (let i = 0; i < keys.length; i++) {
            def[keys[i]] = { Type: Types[i], index: i };
        }
        isBasic = !Object.values(def).some(({ Type }) => Type !== Null);
        isIndexed = false;
    }
    else {
        const entries = Object.entries(_def);
        for (let i = 0; i < entries.length; i++) {
            const [key, index] = entries[i];
            def[key] = { Type: Null, index };
        }
        isBasic = true;
        isIndexed = true;
    }
    return {
        def,
        isBasic,
        isIndexed
    };
}
function getEntryType(def, checkIdx) {
    const values = Object.values(def);
    for (let i = 0; i < values.length; i++) {
        const { Type, index } = values[i];
        if (index === checkIdx) {
            return Type;
        }
    }
    throw new Error(`Unable to create Enum via index ${checkIdx}, in ${Object.keys(def).join(', ')}`);
}
function createFromU8a(registry, def, index, value) {
    const Type = getEntryType(def, index);
    return {
        index,
        value: new Type(registry, value)
    };
}
function createFromValue(registry, def, index = 0, value) {
    const Type = getEntryType(def, index);
    return {
        index,
        value: value instanceof Type
            ? value
            : new Type(registry, value)
    };
}
function decodeFromJSON(registry, def, key, value) {
    // JSON comes in the form of { "<type (camelCase)>": "<value for type>" }, here we
    // additionally force to lower to ensure forward compat
    const keys = Object.keys(def).map((k) => k.toLowerCase());
    const keyLower = key.toLowerCase();
    const index = keys.indexOf(keyLower);
    if (index === -1) {
        throw new Error(`Cannot map Enum JSON, unable to find '${key}' in ${keys.join(', ')}`);
    }
    try {
        return createFromValue(registry, def, Object.values(def)[index].index, value);
    }
    catch (error) {
        throw new Error(`Enum(${key}):: ${error.message}`);
    }
}
function decodeEnum(registry, def, value, index) {
    // NOTE We check the index path first, before looking at values - this allows treating
    // the optional indexes before anything else, more-specific > less-specific
    if (isNumber(index)) {
        return createFromValue(registry, def, index, value);
    }
    else if (isU8a(value) || isHex(value)) {
        const u8a = u8aToU8a(value);
        // nested, we don't want to match isObject below
        if (u8a.length) {
            return createFromU8a(registry, def, u8a[0], u8a.subarray(1));
        }
    }
    else if (value instanceof Enum) {
        return createFromValue(registry, def, value.index, value.value);
    }
    else if (isNumber(value)) {
        return createFromValue(registry, def, value);
    }
    else if (isString(value)) {
        return decodeFromJSON(registry, def, value.toString());
    }
    else if (isObject(value)) {
        const key = Object.keys(value)[0];
        return decodeFromJSON(registry, def, key, value[key]);
    }
    // Worst-case scenario, return the first with default
    return createFromValue(registry, def, Object.values(def)[0].index);
}
/**
 * @name Enum
 * @description
 * This implements an enum, that based on the value wraps a different type. It is effectively
 * an extension to enum where the value type is determined by the actual index.
 */
class Enum {
    constructor(registry, Types, value, index, { definition, setDefinition = noopSetDefinition$5 } = {}) {
        _Enum_def.set(this, void 0);
        _Enum_entryIndex.set(this, void 0);
        _Enum_indexes.set(this, void 0);
        _Enum_isBasic.set(this, void 0);
        _Enum_isIndexed.set(this, void 0);
        _Enum_raw.set(this, void 0);
        const { def, isBasic, isIndexed } = definition || setDefinition(extractDef(registry, Types));
        // shortcut isU8a as used in SCALE decoding
        const decoded = isU8a(value) && value.length && !isNumber(index)
            ? createFromU8a(registry, def, value[0], value.subarray(1))
            : decodeEnum(registry, def, value, index);
        this.registry = registry;
        __classPrivateFieldSet(this, _Enum_def, def, "f");
        __classPrivateFieldSet(this, _Enum_isBasic, isBasic, "f");
        __classPrivateFieldSet(this, _Enum_isIndexed, isIndexed, "f");
        __classPrivateFieldSet(this, _Enum_indexes, Object.values(def).map(({ index }) => index), "f");
        __classPrivateFieldSet(this, _Enum_entryIndex, __classPrivateFieldGet(this, _Enum_indexes, "f").indexOf(decoded.index), "f");
        __classPrivateFieldSet(this, _Enum_raw, decoded.value, "f");
        if (__classPrivateFieldGet(this, _Enum_raw, "f").initialU8aLength) {
            this.initialU8aLength = 1 + __classPrivateFieldGet(this, _Enum_raw, "f").initialU8aLength;
        }
    }
    static with(Types) {
        var _a;
        let definition;
        // eslint-disable-next-line no-return-assign
        const setDefinition = (d) => definition = d;
        return _a = class extends Enum {
                constructor(registry, value, index) {
                    super(registry, Types, value, index, { definition, setDefinition });
                }
            },
            (() => {
                const keys = Array.isArray(Types)
                    ? Types
                    : Object.keys(Types);
                const asKeys = new Array(keys.length);
                const isKeys = new Array(keys.length);
                for (let i = 0; i < keys.length; i++) {
                    const name = stringPascalCase(keys[i]);
                    asKeys[i] = `as${name}`;
                    isKeys[i] = `is${name}`;
                }
                objectProperties(_a.prototype, isKeys, (_, i, self) => self.type === keys[i]);
                objectProperties(_a.prototype, asKeys, (k, i, self) => {
                    if (self.type !== keys[i]) {
                        throw new Error(`Cannot convert '${self.type}' via ${k}`);
                    }
                    return self.value;
                });
            })(),
            _a;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        return 1 + __classPrivateFieldGet(this, _Enum_raw, "f").encodedLength;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description The index of the enum value
     */
    get index() {
        return __classPrivateFieldGet(this, _Enum_indexes, "f")[__classPrivateFieldGet(this, _Enum_entryIndex, "f")];
    }
    /**
     * @description The value of the enum
     */
    get inner() {
        return __classPrivateFieldGet(this, _Enum_raw, "f");
    }
    /**
     * @description true if this is a basic enum (no values)
     */
    get isBasic() {
        return __classPrivateFieldGet(this, _Enum_isBasic, "f");
    }
    /**
     * @description Checks if the value is an empty value
     */
    get isEmpty() {
        return __classPrivateFieldGet(this, _Enum_raw, "f").isEmpty;
    }
    /**
     * @description Checks if the Enum points to a [[Null]] type
     */
    get isNone() {
        return __classPrivateFieldGet(this, _Enum_raw, "f") instanceof Null;
    }
    /**
     * @description The available keys for this enum
     */
    get defIndexes() {
        return __classPrivateFieldGet(this, _Enum_indexes, "f");
    }
    /**
     * @description The available keys for this enum
     */
    get defKeys() {
        return Object.keys(__classPrivateFieldGet(this, _Enum_def, "f"));
    }
    /**
     * @description The name of the type this enum value represents
     */
    get type() {
        return this.defKeys[__classPrivateFieldGet(this, _Enum_entryIndex, "f")];
    }
    /**
     * @description The value of the enum
     */
    get value() {
        return __classPrivateFieldGet(this, _Enum_raw, "f");
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        // cater for the case where we only pass the enum index
        if (isU8a(other)) {
            return !this.toU8a().some((entry, index) => entry !== other[index]);
        }
        else if (isNumber(other)) {
            return this.toNumber() === other;
        }
        else if (__classPrivateFieldGet(this, _Enum_isBasic, "f") && isString(other)) {
            return this.type === other;
        }
        else if (isHex(other)) {
            return this.toHex() === other;
        }
        else if (other instanceof Enum) {
            return this.index === other.index && this.value.eq(other.value);
        }
        else if (isObject(other)) {
            return this.value.eq(other[this.type]);
        }
        // compare the actual wrapper value
        return this.value.eq(other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        if (__classPrivateFieldGet(this, _Enum_isBasic, "f")) {
            return { outer: [new Uint8Array([this.index])] };
        }
        const { inner, outer = [] } = __classPrivateFieldGet(this, _Enum_raw, "f").inspect();
        return {
            inner,
            outer: [new Uint8Array([this.index]), ...outer]
        };
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
        return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
        return __classPrivateFieldGet(this, _Enum_isBasic, "f") || this.isNone
            ? this.type
            : { [this.type]: __classPrivateFieldGet(this, _Enum_raw, "f").toHuman(isExtended) };
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return __classPrivateFieldGet(this, _Enum_isBasic, "f")
            ? this.type
            : { [stringCamelCase(this.type)]: __classPrivateFieldGet(this, _Enum_raw, "f").toJSON() };
    }
    /**
     * @description Returns the number representation for the value
     */
    toNumber() {
        return this.index;
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return __classPrivateFieldGet(this, _Enum_isBasic, "f")
            ? this.type
            : { [stringCamelCase(this.type)]: __classPrivateFieldGet(this, _Enum_raw, "f").toPrimitive() };
    }
    /**
     * @description Returns a raw struct representation of the enum types
     */
    _toRawStruct() {
        if (__classPrivateFieldGet(this, _Enum_isBasic, "f")) {
            return __classPrivateFieldGet(this, _Enum_isIndexed, "f")
                ? this.defKeys.reduce((out, key, index) => {
                    out[key] = __classPrivateFieldGet(this, _Enum_indexes, "f")[index];
                    return out;
                }, {})
                : this.defKeys;
        }
        const entries = Object.entries(__classPrivateFieldGet(this, _Enum_def, "f"));
        return typesToMap(this.registry, entries.reduce((out, [key, { Type }], i) => {
            out[0][i] = Type;
            out[1][i] = key;
            return out;
        }, [new Array(entries.length), new Array(entries.length)]));
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return stringify({ _enum: this._toRawStruct() });
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return this.isNone
            ? this.type
            : stringify(this.toJSON());
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        return isBare
            ? __classPrivateFieldGet(this, _Enum_raw, "f").toU8a(isBare)
            : u8aConcatStrict([
                new Uint8Array([this.index]),
                __classPrivateFieldGet(this, _Enum_raw, "f").toU8a(isBare)
            ]);
    }
}
_Enum_def = new WeakMap(), _Enum_entryIndex = new WeakMap(), _Enum_indexes = new WeakMap(), _Enum_isBasic = new WeakMap(), _Enum_isIndexed = new WeakMap(), _Enum_raw = new WeakMap();

/**
 * @name Int
 * @description
 * A generic signed integer codec. For Substrate all numbers are Little Endian encoded,
 * this handles the encoding and decoding of those numbers. Upon construction
 * the bitLength is provided and any additional use keeps the number to this
 * length. This extends `BN`, so all methods available on a normal `BN` object
 * is available here.
 * @noInheritDoc
 */
class Int extends AbstractInt {
    constructor(registry, value = 0, bitLength) {
        super(registry, value, bitLength, true);
    }
    static with(bitLength, typeName) {
        return class extends Int {
            constructor(registry, value) {
                super(registry, value, bitLength);
            }
            toRawType() {
                return typeName || super.toRawType();
            }
        };
    }
}

var _Option_Type, _Option_raw;
function noopSetDefinition$4(d) {
    return d;
}
class None extends Null {
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'None';
    }
}
/** @internal */
function decodeOption(registry, Type, value) {
    if (value instanceof Type) {
        // don't re-create, use as it (which also caters for derived types)
        return value;
    }
    else if (value instanceof Option) {
        if (value.value instanceof Type) {
            // same instance, return it
            return value.value;
        }
        else if (value.isNone) {
            // internal is None, we are also none
            return new None(registry);
        }
        // convert the actual value into known
        return new Type(registry, value.value);
    }
    else if (isNull(value) || isUndefined(value) || value === '0x' || value instanceof None) {
        // anyhting empty we pass as-is
        return new None(registry);
    }
    else if (isU8a(value)) {
        // the isU8a check happens last in the if-tree - since the wrapped value
        // may be an instance of it, so Type and Option checks go in first
        return !value.length || value[0] === 0
            ? new None(registry)
            : new Type(registry, value.subarray(1));
    }
    return new Type(registry, value);
}
/**
 * @name Option
 * @description
 * An Option is an optional field. Basically the first byte indicates that there is
 * is value to follow. If the byte is `1` there is an actual value. So the Option
 * implements that - decodes, checks for optionality and wraps the required structure
 * with a value if/as required/found.
 */
class Option {
    constructor(registry, typeName, value, { definition, setDefinition = noopSetDefinition$4 } = {}) {
        _Option_Type.set(this, void 0);
        _Option_raw.set(this, void 0);
        const Type = definition || setDefinition(typeToConstructor(registry, typeName));
        const decoded = isU8a(value) && value.length && !isCodec$1(value)
            ? value[0] === 0
                ? new None(registry)
                : new Type(registry, value.subarray(1))
            : decodeOption(registry, Type, value);
        this.registry = registry;
        __classPrivateFieldSet(this, _Option_Type, Type, "f");
        __classPrivateFieldSet(this, _Option_raw, decoded, "f");
        if (decoded?.initialU8aLength) {
            this.initialU8aLength = 1 + decoded.initialU8aLength;
        }
    }
    static with(Type) {
        let definition;
        const setDefinition = (d) => {
            definition = d;
            return d;
        };
        return class extends Option {
            constructor(registry, value) {
                super(registry, Type, value, { definition, setDefinition });
            }
        };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        // boolean byte (has value, doesn't have) along with wrapped length
        return 1 + __classPrivateFieldGet(this, _Option_raw, "f").encodedLength;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the Option has no value
     */
    get isEmpty() {
        return this.isNone;
    }
    /**
     * @description Checks if the Option has no value
     */
    get isNone() {
        return __classPrivateFieldGet(this, _Option_raw, "f") instanceof None;
    }
    /**
     * @description Checks if the Option has a value
     */
    get isSome() {
        return !this.isNone;
    }
    /**
     * @description The actual value for the Option
     */
    get value() {
        return __classPrivateFieldGet(this, _Option_raw, "f");
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        if (other instanceof Option) {
            return (this.isSome === other.isSome) && this.value.eq(other.value);
        }
        return this.value.eq(other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        if (this.isNone) {
            return { outer: [new Uint8Array([0])] };
        }
        const { inner, outer = [] } = __classPrivateFieldGet(this, _Option_raw, "f").inspect();
        return {
            inner,
            outer: [new Uint8Array([1]), ...outer]
        };
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
        // This attempts to align with the JSON encoding - actually in this case
        // the isSome value is correct, however the `isNone` may be problematic
        return this.isNone
            ? '0x'
            : u8aToHex(this.toU8a().subarray(1));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
        return __classPrivateFieldGet(this, _Option_raw, "f").toHuman(isExtended);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return this.isNone
            ? null
            : __classPrivateFieldGet(this, _Option_raw, "f").toJSON();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return this.isNone
            ? null
            : __classPrivateFieldGet(this, _Option_raw, "f").toPrimitive();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType(isBare) {
        const wrapped = this.registry.getClassName(__classPrivateFieldGet(this, _Option_Type, "f")) || new (__classPrivateFieldGet(this, _Option_Type, "f"))(this.registry).toRawType();
        return isBare
            ? wrapped
            : `Option<${wrapped}>`;
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return __classPrivateFieldGet(this, _Option_raw, "f").toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        if (isBare) {
            return __classPrivateFieldGet(this, _Option_raw, "f").toU8a(true);
        }
        const u8a = new Uint8Array(this.encodedLength);
        if (this.isSome) {
            u8a.set([1]);
            u8a.set(__classPrivateFieldGet(this, _Option_raw, "f").toU8a(), 1);
        }
        return u8a;
    }
    /**
     * @description Returns the value that the Option represents (if available), throws if null
     */
    unwrap() {
        if (this.isNone) {
            throw new Error('Option: unwrapping a None value');
        }
        return __classPrivateFieldGet(this, _Option_raw, "f");
    }
    /**
     * @description Returns the value that the Option represents (if available) or defaultValue if none
     * @param defaultValue The value to return if the option isNone
     */
    unwrapOr(defaultValue) {
        return this.isSome
            ? this.unwrap()
            : defaultValue;
    }
    /**
     * @description Returns the value that the Option represents (if available) or defaultValue if none
     * @param defaultValue The value to return if the option isNone
     */
    unwrapOrDefault() {
        return this.isSome
            ? this.unwrap()
            : new (__classPrivateFieldGet(this, _Option_Type, "f"))(this.registry);
    }
}
_Option_Type = new WeakMap(), _Option_raw = new WeakMap();

/**
 * @name Result
 * @description
 * A Result maps to the Rust Result type, that can either wrap a success or error value
 */
class Result extends Enum {
    constructor(registry, Ok, Err, value) {
        // NOTE This is order-dependent, Ok (with index 0) needs to be first
        // eslint-disable-next-line sort-keys
        super(registry, { Ok, Err }, value);
    }
    static with(Types) {
        return class extends Result {
            constructor(registry, value) {
                super(registry, Types.Ok, Types.Err, value);
            }
        };
    }
    /**
     * @description Returns the wrapper Err value (if isErr)
     */
    get asErr() {
        if (!this.isErr) {
            throw new Error('Cannot extract Err value from Ok result, check isErr first');
        }
        return this.value;
    }
    /**
     * @description Returns the wrapper Ok value (if isOk)
     */
    get asOk() {
        if (!this.isOk) {
            throw new Error('Cannot extract Ok value from Err result, check isOk first');
        }
        return this.value;
    }
    /**
     * @description Checks if the Result has no value
     */
    get isEmpty() {
        return this.isOk && this.value.isEmpty;
    }
    /**
     * @description Checks if the Result wraps an Err value
     */
    get isErr() {
        return !this.isOk;
    }
    /**
     * @description Checks if the Result wraps an Ok value
     */
    get isOk() {
        return this.index === 0;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        const Types = this._toRawStruct();
        return `Result<${Types.Ok},${Types.Err}>`;
    }
}

var _Tuple_Types;
function noopSetDefinition$3(d) {
    return d;
}
/** @internal */
function decodeTuple(registry, result, value, Classes) {
    if (Array.isArray(value)) {
        const Types = Classes[0];
        for (let i = 0; i < Types.length; i++) {
            try {
                const entry = value?.[i];
                result[i] = entry instanceof Types[i]
                    ? entry
                    : new Types[i](registry, entry);
            }
            catch (error) {
                throw new Error(`Tuple: failed on ${i}:: ${error.message}`);
            }
        }
        return [result, 0];
    }
    else if (isHex(value)) {
        return decodeU8a$6(registry, result, u8aToU8a(value), Classes);
    }
    else if (!value || !result.length) {
        const Types = Classes[0];
        for (let i = 0; i < Types.length; i++) {
            result[i] = new Types[i](registry);
        }
        return [result, 0];
    }
    throw new Error(`Expected array input to Tuple decoding, found ${typeof value}: ${stringify(value)}`);
}
/**
 * @name Tuple
 * @description
 * A Tuple defines an anonymous fixed-length array, where each element has its
 * own type. It extends the base JS `Array` object.
 */
class Tuple extends AbstractArray {
    constructor(registry, Types, value, { definition, setDefinition = noopSetDefinition$3 } = {}) {
        const Classes = definition || setDefinition(Array.isArray(Types)
            ? [Types.map((t) => typeToConstructor(registry, t)), []]
            : isFunction$1(Types) || isString(Types)
                ? [[typeToConstructor(registry, Types)], []]
                : mapToTypeMap(registry, Types));
        super(registry, Classes[0].length);
        _Tuple_Types.set(this, void 0);
        this.initialU8aLength = (isU8a(value)
            ? decodeU8a$6(registry, this, value, Classes)
            : decodeTuple(registry, this, value, Classes))[1];
        __classPrivateFieldSet(this, _Tuple_Types, Classes, "f");
    }
    static with(Types) {
        let definition;
        // eslint-disable-next-line no-return-assign
        const setDefinition = (d) => definition = d;
        return class extends Tuple {
            constructor(registry, value) {
                super(registry, Types, value, { definition, setDefinition });
            }
        };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        let total = 0;
        for (let i = 0; i < this.length; i++) {
            total += this[i].encodedLength;
        }
        return total;
    }
    /**
     * @description The types definition of the tuple
     */
    get Types() {
        return __classPrivateFieldGet(this, _Tuple_Types, "f")[1].length
            ? __classPrivateFieldGet(this, _Tuple_Types, "f")[1]
            : __classPrivateFieldGet(this, _Tuple_Types, "f")[0].map((T) => new T(this.registry).toRawType());
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return {
            inner: this.inspectInner()
        };
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        const types = __classPrivateFieldGet(this, _Tuple_Types, "f")[0].map((T) => this.registry.getClassName(T) || new T(this.registry).toRawType());
        return `(${types.join(',')})`;
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        // Overwrite the default toString representation of Array.
        return stringify(this.toJSON());
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        return u8aConcatStrict(this.toU8aInner(isBare));
    }
}
_Tuple_Types = new WeakMap();

/**
 * @name UInt
 * @description
 * A generic unsigned integer codec. For Substrate all numbers are Little Endian encoded,
 * this handles the encoding and decoding of those numbers. Upon construction
 * the bitLength is provided and any additional use keeps the number to this
 * length. This extends `BN`, so all methods available on a normal `BN` object
 * is available here.
 * @noInheritDoc
 */
class UInt extends AbstractInt {
    static with(bitLength, typeName) {
        return class extends UInt {
            constructor(registry, value) {
                super(registry, value, bitLength);
            }
            toRawType() {
                return typeName || super.toRawType();
            }
        };
    }
}

var _Vec_Type;
const MAX_LENGTH$2 = 64 * 1024;
const l$a = logger('Vec');
function noopSetDefinition$2(d) {
    return d;
}
function decodeVecLength(value) {
    if (Array.isArray(value)) {
        return [value, value.length, 0];
    }
    else if (isU8a(value) || isHex(value)) {
        const u8a = u8aToU8a(value);
        const [startAt, length] = compactFromU8aLim(u8a);
        if (length > MAX_LENGTH$2) {
            throw new Error(`Vec length ${length.toString()} exceeds ${MAX_LENGTH$2}`);
        }
        return [u8a, length, startAt];
    }
    else if (!value) {
        return [null, 0, 0];
    }
    throw new Error(`Expected array/hex input to Vec<*> decoding, found ${typeof value}: ${stringify(value)}`);
}
function decodeVec(registry, result, value, startAt, Type) {
    if (Array.isArray(value)) {
        const count = result.length;
        for (let i = 0; i < count; i++) {
            // 26/08/2022 this is actually a false positive - after recent eslint upgdates
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            const entry = value[i];
            try {
                result[i] = entry instanceof Type
                    ? entry
                    : new Type(registry, entry);
            }
            catch (error) {
                l$a.error(`Unable to decode on index ${i}`, error.message);
                throw error;
            }
        }
        return [0, 0];
    }
    else if (!value) {
        return [0, 0];
    }
    // we don't need more checks, we already limited it via the length decoding
    return decodeU8aVec(registry, result, u8aToU8a(value), startAt, Type);
}
/**
 * @name Vec
 * @description
 * This manages codec arrays. Internally it keeps track of the length (as decoded) and allows
 * construction with the passed `Type` in the constructor. It is an extension to Array, providing
 * specific encoding/decoding on top of the base type.
 */
class Vec extends AbstractArray {
    constructor(registry, Type, value = [], { definition, setDefinition = noopSetDefinition$2 } = {}) {
        const [decodeFrom, length, startAt] = decodeVecLength(value);
        super(registry, length);
        _Vec_Type.set(this, void 0);
        __classPrivateFieldSet(this, _Vec_Type, definition || setDefinition(typeToConstructor(registry, Type)), "f");
        this.initialU8aLength = (isU8a(decodeFrom)
            ? decodeU8aVec(registry, this, decodeFrom, startAt, __classPrivateFieldGet(this, _Vec_Type, "f"))
            : decodeVec(registry, this, decodeFrom, startAt, __classPrivateFieldGet(this, _Vec_Type, "f")))[0];
    }
    static with(Type) {
        let definition;
        // eslint-disable-next-line no-return-assign
        const setDefinition = (d) => (definition = d);
        return class extends Vec {
            constructor(registry, value) {
                super(registry, Type, value, { definition, setDefinition });
            }
        };
    }
    /**
     * @description The type for the items
     */
    get Type() {
        return __classPrivateFieldGet(this, _Vec_Type, "f").name;
    }
    /**
     * @description Finds the index of the value in the array
     */
    indexOf(_other) {
        // convert type first, this removes overhead from the eq
        const other = _other instanceof __classPrivateFieldGet(this, _Vec_Type, "f")
            ? _other
            : new (__classPrivateFieldGet(this, _Vec_Type, "f"))(this.registry, _other);
        for (let i = 0; i < this.length; i++) {
            if (other.eq(this[i])) {
                return i;
            }
        }
        return -1;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return `Vec<${this.registry.getClassName(__classPrivateFieldGet(this, _Vec_Type, "f")) || new (__classPrivateFieldGet(this, _Vec_Type, "f"))(this.registry).toRawType()}>`;
    }
}
_Vec_Type = new WeakMap();

var _VecFixed_Type;
function noopSetDefinition$1(d) {
    return d;
}
/**
 * @name VecFixed
 * @description
 * This manages codec arrays of a fixed length
 */
class VecFixed extends AbstractArray {
    constructor(registry, Type, length, value = [], { definition, setDefinition = noopSetDefinition$1 } = {}) {
        super(registry, length);
        _VecFixed_Type.set(this, void 0);
        __classPrivateFieldSet(this, _VecFixed_Type, definition || setDefinition(typeToConstructor(registry, Type)), "f");
        this.initialU8aLength = (isU8a(value)
            ? decodeU8aVec(registry, this, value, 0, __classPrivateFieldGet(this, _VecFixed_Type, "f"))
            : decodeVec(registry, this, value, 0, __classPrivateFieldGet(this, _VecFixed_Type, "f")))[1];
    }
    static with(Type, length) {
        let definition;
        // eslint-disable-next-line no-return-assign
        const setDefinition = (d) => (definition = d);
        return class extends VecFixed {
            constructor(registry, value) {
                super(registry, Type, length, value, { definition, setDefinition });
            }
        };
    }
    /**
     * @description The type for the items
     */
    get Type() {
        return new (__classPrivateFieldGet(this, _VecFixed_Type, "f"))(this.registry).toRawType();
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        let total = 0;
        for (let i = 0; i < this.length; i++) {
            total += this[i].encodedLength;
        }
        return total;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return {
            inner: this.inspectInner()
        };
    }
    toU8a() {
        // we override, we don't add the length prefix for ourselves, and at the same time we
        // ignore isBare on entries, since they should be properly encoded at all times
        const encoded = this.toU8aInner();
        return encoded.length
            ? u8aConcatStrict(encoded)
            : new Uint8Array([]);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return `[${this.Type};${this.length}]`;
    }
}
_VecFixed_Type = new WeakMap();

/**
 * @name Raw
 * @description
 * A basic wrapper around Uint8Array, with no frills and no fuss. It does differ
 * from other implementations where it will consume the full Uint8Array as passed to it.
 * As such it is meant to be subclassed where the wrapper takes care of the
 * actual lengths instead of used directly.
 * @noInheritDoc
 */
class Raw extends Uint8Array {
    /**
     * @description This ensures that operators such as clice, filter, map, etc. return
     * new Array instances (without this we need to apply overrides)
     */
    static get [Symbol.species]() {
        return Uint8Array;
    }
    constructor(registry, value, initialU8aLength) {
        super(u8aToU8a(value));
        this.registry = registry;
        this.initialU8aLength = initialU8aLength;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        return this.length;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Returns true if the wrapped value contains only ASCII printable characters
     */
    get isAscii() {
        return isAscii(this);
    }
    /**
     * @description Returns true if the type wraps an empty/default all-0 value
     */
    get isEmpty() {
        return !this.length || isUndefined(this.find((b) => !!b));
    }
    /**
     * @description Returns true if the wrapped value contains only utf8 characters
     */
    get isUtf8() {
        return isUtf8(this);
    }
    /**
     * @description Returns the number of bits in the value
     */
    bitLength() {
        return this.length * 8;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        if (other instanceof Uint8Array) {
            return (this.length === other.length) &&
                !this.some((b, index) => b !== other[index]);
        }
        return this.eq(u8aToU8a(other));
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return {
            outer: [this.toU8a()]
        };
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
        return u8aToHex(this);
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
        return this.toPrimitive();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return this.toHex();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        if (this.isAscii) {
            const text = this.toUtf8();
            // ensure we didn't end up with multibyte codepoints
            if (isAscii(text)) {
                return text;
            }
        }
        return this.toJSON();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'Raw';
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return this.toHex();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    toU8a(isBare) {
        return Uint8Array.from(this);
    }
    /**
     * @description Returns the wrapped data as a UTF-8 string
     */
    toUtf8() {
        if (!this.isUtf8) {
            throw new Error('The character sequence is not a valid Utf8 string');
        }
        return u8aToString(this);
    }
}

var _BitVec_decodedLength, _BitVec_isMsb;
/** @internal */
function decodeBitVecU8a(value) {
    if (!value || !value.length) {
        return [0, new Uint8Array()];
    }
    // handle all other Uint8Array inputs, these do have a length prefix which is the number of bits encoded
    const [offset, length] = compactFromU8aLim(value);
    const total = offset + Math.ceil(length / 8);
    if (total > value.length) {
        throw new Error(`BitVec: required length less than remainder, expected at least ${total}, found ${value.length}`);
    }
    return [length, value.subarray(offset, total)];
}
/** @internal */
function decodeBitVec(value) {
    if (Array.isArray(value) || isString(value)) {
        const u8a = u8aToU8a(value);
        return [u8a.length / 8, u8a];
    }
    return decodeBitVecU8a(value);
}
/**
 * @name BitVec
 * @description
 * A BitVec that represents an array of bits. The bits are however stored encoded. The difference between this
 * and a normal Bytes would be that the length prefix indicates the number of bits encoded, not the bytes
 */
class BitVec extends Raw {
    // In lieu of having the Msb/Lsb identifiers passed through, we default to assuming
    // we are dealing with Lsb, which is the default (as of writing) BitVec format used
    // in the Polkadot code (this only affects the toHuman displays)
    constructor(registry, value, isMsb = false) {
        const [decodedLength, u8a] = decodeBitVec(value);
        super(registry, u8a);
        _BitVec_decodedLength.set(this, void 0);
        _BitVec_isMsb.set(this, void 0);
        __classPrivateFieldSet(this, _BitVec_decodedLength, decodedLength, "f");
        __classPrivateFieldSet(this, _BitVec_isMsb, isMsb, "f");
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        return this.length + compactToU8a(__classPrivateFieldGet(this, _BitVec_decodedLength, "f")).length;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return {
            outer: [compactToU8a(__classPrivateFieldGet(this, _BitVec_decodedLength, "f")), super.toU8a()]
        };
    }
    toHuman() {
        return `0b${[...this.toU8a(true)]
            .map((d) => `00000000${d.toString(2)}`.slice(-8))
            .map((s) => __classPrivateFieldGet(this, _BitVec_isMsb, "f") ? s : s.split('').reverse().join(''))
            .join('_')}`;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'BitVec';
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        const bitVec = super.toU8a();
        return isBare
            ? bitVec
            : u8aConcatStrict([compactToU8a(__classPrivateFieldGet(this, _BitVec_decodedLength, "f")), bitVec]);
    }
}
_BitVec_decodedLength = new WeakMap(), _BitVec_isMsb = new WeakMap();

var _Struct_jsonMap, _Struct_Types;
function noopSetDefinition(d) {
    return d;
}
/** @internal */
function decodeStructFromObject(registry, [Types, keys], value, jsonMap) {
    let jsonObj;
    const typeofArray = Array.isArray(value);
    const typeofMap = value instanceof Map;
    if (!typeofArray && !typeofMap && !isObject(value)) {
        throw new Error(`Struct: Cannot decode value ${stringify(value)} (typeof ${typeof value}), expected an input object, map or array`);
    }
    else if (typeofArray && value.length !== keys.length) {
        throw new Error(`Struct: Unable to map ${stringify(value)} array to object with known keys ${keys.join(', ')}`);
    }
    const raw = new Array(keys.length);
    for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        const jsonKey = jsonMap.get(key) || key;
        const Type = Types[i];
        let assign;
        try {
            if (typeofArray) {
                assign = value[i];
            }
            else if (typeofMap) {
                assign = jsonKey && value.get(jsonKey);
            }
            else {
                assign = jsonKey && value[jsonKey];
                if (isUndefined(assign)) {
                    if (isUndefined(jsonObj)) {
                        const entries = Object.entries(value);
                        jsonObj = {};
                        for (let e = 0; e < entries.length; e++) {
                            jsonObj[stringCamelCase(entries[e][0])] = entries[e][1];
                        }
                    }
                    assign = jsonKey && jsonObj[jsonKey];
                }
            }
            raw[i] = [
                key,
                assign instanceof Type
                    ? assign
                    : new Type(registry, assign)
            ];
        }
        catch (error) {
            let type = Type.name;
            try {
                type = new Type(registry).toRawType();
            }
            catch (error) {
                // ignore
            }
            throw new Error(`Struct: failed on ${jsonKey}: ${type}:: ${error.message}`);
        }
    }
    return [raw, 0];
}
/**
 * @name Struct
 * @description
 * A Struct defines an Object with key-value pairs - where the values are Codec values. It removes
 * a lot of repetition from the actual coding, define a structure type, pass it the key/Codec
 * values in the constructor and it manages the decoding. It is important that the constructor
 * values matches 100% to the order in th Rust code, i.e. don't go crazy and make it alphabetical,
 * it needs to decoded in the specific defined order.
 * @noInheritDoc
 */
class Struct extends Map {
    constructor(registry, Types, value, jsonMap = new Map(), { definition, setDefinition = noopSetDefinition } = {}) {
        const typeMap = definition || setDefinition(mapToTypeMap(registry, Types));
        const [decoded, decodedLength] = isU8a(value) || isHex(value)
            ? decodeU8aStruct(registry, new Array(typeMap[0].length), u8aToU8a(value), typeMap)
            : value instanceof Struct
                ? [value, 0]
                : decodeStructFromObject(registry, typeMap, value || {}, jsonMap);
        super(decoded);
        _Struct_jsonMap.set(this, void 0);
        _Struct_Types.set(this, void 0);
        this.initialU8aLength = decodedLength;
        this.registry = registry;
        __classPrivateFieldSet(this, _Struct_jsonMap, jsonMap, "f");
        __classPrivateFieldSet(this, _Struct_Types, typeMap, "f");
    }
    static with(Types, jsonMap) {
        var _a;
        let definition;
        // eslint-disable-next-line no-return-assign
        const setDefinition = (d) => definition = d;
        return _a = class extends Struct {
                constructor(registry, value) {
                    super(registry, Types, value, jsonMap, { definition, setDefinition });
                }
            },
            (() => {
                const keys = Object.keys(Types);
                objectProperties(_a.prototype, keys, (k, _, self) => self.get(k));
            })(),
            _a;
    }
    /**
     * @description The available keys for this struct
     */
    get defKeys() {
        return __classPrivateFieldGet(this, _Struct_Types, "f")[1];
    }
    /**
     * @description Checks if the value is an empty value
     */
    get isEmpty() {
        for (const v of this.values()) {
            if (!v.isEmpty) {
                return false;
            }
        }
        return true;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        let total = 0;
        for (const v of this.values()) {
            total += v.encodedLength;
        }
        return total;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Returns the Type description of the structure
     */
    get Type() {
        const result = {};
        const [Types, keys] = __classPrivateFieldGet(this, _Struct_Types, "f");
        for (let i = 0; i < keys.length; i++) {
            result[keys[i]] = new Types[i](this.registry).toRawType();
        }
        return result;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        return compareMap(this, other);
    }
    /**
     * @description Returns a specific names entry in the structure
     * @param key The name of the entry to retrieve
     */
    get(key) {
        return super.get(key);
    }
    /**
     * @description Returns the values of a member at a specific index (Rather use get(name) for performance)
     */
    getAtIndex(index) {
        return this.toArray()[index];
    }
    /**
     * @description Returns the a types value by name
     */
    getT(key) {
        return super.get(key);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect(isBare) {
        const inner = new Array();
        for (const [k, v] of this.entries()) {
            inner.push({
                ...v.inspect(!isBare || isBoolean(isBare)
                    ? isBare
                    : isBare[k]),
                name: stringCamelCase(k)
            });
        }
        return {
            inner
        };
    }
    /**
     * @description Converts the Object to an standard JavaScript Array
     */
    toArray() {
        return [...this.values()];
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
        return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
        const json = {};
        for (const [k, v] of this.entries()) {
            json[k] = v.toHuman(isExtended);
        }
        return json;
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        const json = {};
        for (const [k, v] of this.entries()) {
            // Here we pull out the entry against the JSON mapping (if supplied)
            // since this representation goes over RPC and needs to be correct
            json[(__classPrivateFieldGet(this, _Struct_jsonMap, "f").get(k) || k)] = v.toJSON();
        }
        return json;
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        const json = {};
        for (const [k, v] of this.entries()) {
            json[k] = v.toPrimitive();
        }
        return json;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return stringify(typesToMap(this.registry, __classPrivateFieldGet(this, _Struct_Types, "f")));
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return stringify(this.toJSON());
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        const encoded = [];
        for (const [k, v] of this.entries()) {
            encoded.push(v.toU8a(!isBare || isBoolean(isBare)
                ? isBare
                : isBare[k]));
        }
        return u8aConcatStrict(encoded);
    }
}
_Struct_jsonMap = new WeakMap(), _Struct_Types = new WeakMap();

var _CodecMap_KeyClass, _CodecMap_ValClass, _CodecMap_type;
const l$9 = logger('Map');
/** @internal */
function decodeMapFromU8a(registry, KeyClass, ValClass, u8a) {
    const output = new Map();
    const [offset, count] = compactFromU8aLim(u8a);
    const types = [];
    for (let i = 0; i < count; i++) {
        types.push(KeyClass, ValClass);
    }
    const [values, decodedLength] = decodeU8a$6(registry, new Array(types.length), u8a.subarray(offset), [types, []]);
    for (let i = 0; i < values.length; i += 2) {
        output.set(values[i], values[i + 1]);
    }
    return [KeyClass, ValClass, output, offset + decodedLength];
}
/** @internal */
function decodeMapFromMap(registry, KeyClass, ValClass, value) {
    const output = new Map();
    for (const [key, val] of value.entries()) {
        const isComplex = KeyClass.prototype instanceof AbstractArray ||
            KeyClass.prototype instanceof Struct ||
            KeyClass.prototype instanceof Enum;
        try {
            output.set(key instanceof KeyClass
                ? key
                : new KeyClass(registry, isComplex && typeof key === 'string' ? JSON.parse(key) : key), val instanceof ValClass
                ? val
                : new ValClass(registry, val));
        }
        catch (error) {
            l$9.error('Failed to decode key or value:', error.message);
            throw error;
        }
    }
    return [KeyClass, ValClass, output, 0];
}
/**
 * Decode input to pass into constructor.
 *
 * @param KeyClass - Type of the map key
 * @param ValClass - Type of the map value
 * @param value - Value to decode, one of:
 * - null
 * - undefined
 * - hex
 * - Uint8Array
 * - Map<any, any>, where both key and value types are either
 *   constructors or decodeable values for their types.
 * @param jsonMap
 * @internal
 */
function decodeMap(registry, keyType, valType, value) {
    const KeyClass = typeToConstructor(registry, keyType);
    const ValClass = typeToConstructor(registry, valType);
    if (!value) {
        return [KeyClass, ValClass, new Map(), 0];
    }
    else if (isU8a(value) || isHex(value)) {
        return decodeMapFromU8a(registry, KeyClass, ValClass, u8aToU8a(value));
    }
    else if (value instanceof Map) {
        return decodeMapFromMap(registry, KeyClass, ValClass, value);
    }
    else if (isObject(value)) {
        return decodeMapFromMap(registry, KeyClass, ValClass, new Map(Object.entries(value)));
    }
    throw new Error('Map: cannot decode type');
}
class CodecMap extends Map {
    constructor(registry, keyType, valType, rawValue, type = 'HashMap') {
        const [KeyClass, ValClass, decoded, decodedLength] = decodeMap(registry, keyType, valType, rawValue);
        super(type === 'BTreeMap' ? sortMap(decoded) : decoded);
        _CodecMap_KeyClass.set(this, void 0);
        _CodecMap_ValClass.set(this, void 0);
        _CodecMap_type.set(this, void 0);
        this.registry = registry;
        this.initialU8aLength = decodedLength;
        __classPrivateFieldSet(this, _CodecMap_KeyClass, KeyClass, "f");
        __classPrivateFieldSet(this, _CodecMap_ValClass, ValClass, "f");
        __classPrivateFieldSet(this, _CodecMap_type, type, "f");
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        let len = compactToU8a(this.size).length;
        for (const [k, v] of this.entries()) {
            len += k.encodedLength + v.encodedLength;
        }
        return len;
    }
    /**
     * @description Returns a hash of the value
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */
    get isEmpty() {
        return this.size === 0;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        return compareMap(this, other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        const inner = new Array();
        for (const [k, v] of this.entries()) {
            inner.push(k.inspect());
            inner.push(v.inspect());
        }
        return {
            inner,
            outer: [compactToU8a(this.size)]
        };
    }
    /**
     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
     */
    toHex() {
        return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
        const json = {};
        for (const [k, v] of this.entries()) {
            json[k instanceof Raw && k.isAscii
                ? k.toUtf8()
                : k.toString()] = v.toHuman(isExtended);
        }
        return json;
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        const json = {};
        for (const [k, v] of this.entries()) {
            json[k.toString()] = v.toJSON();
        }
        return json;
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        const json = {};
        for (const [k, v] of this.entries()) {
            json[k instanceof Raw && k.isAscii
                ? k.toUtf8()
                : k.toString()] = v.toPrimitive();
        }
        return json;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return `${__classPrivateFieldGet(this, _CodecMap_type, "f")}<${this.registry.getClassName(__classPrivateFieldGet(this, _CodecMap_KeyClass, "f")) || new (__classPrivateFieldGet(this, _CodecMap_KeyClass, "f"))(this.registry).toRawType()},${this.registry.getClassName(__classPrivateFieldGet(this, _CodecMap_ValClass, "f")) || new (__classPrivateFieldGet(this, _CodecMap_ValClass, "f"))(this.registry).toRawType()}>`;
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return stringify(this.toJSON());
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        const encoded = new Array();
        if (!isBare) {
            encoded.push(compactToU8a(this.size));
        }
        for (const [k, v] of this.entries()) {
            encoded.push(k.toU8a(isBare), v.toU8a(isBare));
        }
        return u8aConcatStrict(encoded);
    }
}
_CodecMap_KeyClass = new WeakMap(), _CodecMap_ValClass = new WeakMap(), _CodecMap_type = new WeakMap();

class BTreeMap extends CodecMap {
    static with(keyType, valType) {
        return class extends BTreeMap {
            constructor(registry, value) {
                super(registry, keyType, valType, value, 'BTreeMap');
            }
        };
    }
}

var _BTreeSet_ValClass;
const l$8 = logger('BTreeSet');
/** @internal */
function decodeSetFromU8a(registry, ValClass, u8a) {
    const output = new Set();
    const [offset, count] = compactFromU8aLim(u8a);
    const result = new Array(count);
    const [decodedLength] = decodeU8aVec(registry, result, u8a, offset, ValClass);
    for (let i = 0; i < count; i++) {
        output.add(result[i]);
    }
    return [ValClass, output, decodedLength];
}
/** @internal */
function decodeSetFromSet(registry, ValClass, value) {
    const output = new Set();
    value.forEach((val) => {
        try {
            output.add((val instanceof ValClass) ? val : new ValClass(registry, val));
        }
        catch (error) {
            l$8.error('Failed to decode key or value:', error.message);
            throw error;
        }
    });
    return [ValClass, output, 0];
}
/**
 * Decode input to pass into constructor.
 *
 * @param ValClass - Type of the map value
 * @param value - Value to decode, one of:
 * - null
 * - undefined
 * - hex
 * - Uint8Array
 * - Set<any>, where both key and value types are either
 *   constructors or decodeable values for their types.
 * @param jsonSet
 * @internal
 */
function decodeSet$1(registry, valType, value) {
    const ValClass = typeToConstructor(registry, valType);
    if (!value) {
        return [ValClass, new Set(), 0];
    }
    else if (isU8a(value) || isHex(value)) {
        return decodeSetFromU8a(registry, ValClass, u8aToU8a(value));
    }
    else if (Array.isArray(value) || value instanceof Set) {
        return decodeSetFromSet(registry, ValClass, value);
    }
    throw new Error('BTreeSet: cannot decode type');
}
class BTreeSet extends Set {
    constructor(registry, valType, rawValue) {
        const [ValClass, values, decodedLength] = decodeSet$1(registry, valType, rawValue);
        super(sortSet(values));
        _BTreeSet_ValClass.set(this, void 0);
        this.registry = registry;
        this.initialU8aLength = decodedLength;
        __classPrivateFieldSet(this, _BTreeSet_ValClass, ValClass, "f");
    }
    static with(valType) {
        return class extends BTreeSet {
            constructor(registry, value) {
                super(registry, valType, value);
            }
        };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        let len = compactToU8a(this.size).length;
        for (const v of this.values()) {
            len += v.encodedLength;
        }
        return len;
    }
    /**
     * @description Returns a hash of the value
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */
    get isEmpty() {
        return this.size === 0;
    }
    /**
     * @description The actual set values as a string[]
     */
    get strings() {
        return [...super.values()].map((v) => v.toString());
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        return compareSet(this, other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        const inner = new Array();
        for (const v of this.values()) {
            inner.push(v.inspect());
        }
        return {
            inner,
            outer: [compactToU8a(this.size)]
        };
    }
    /**
     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
     */
    toHex() {
        return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
        const json = [];
        for (const v of this.values()) {
            json.push(v.toHuman(isExtended));
        }
        return json;
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        const json = [];
        for (const v of this.values()) {
            json.push(v.toJSON());
        }
        return json;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return `BTreeSet<${this.registry.getClassName(__classPrivateFieldGet(this, _BTreeSet_ValClass, "f")) || new (__classPrivateFieldGet(this, _BTreeSet_ValClass, "f"))(this.registry).toRawType()}>`;
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        const json = [];
        for (const v of this.values()) {
            json.push(v.toPrimitive());
        }
        return json;
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return stringify(this.toJSON());
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        const encoded = new Array();
        if (!isBare) {
            encoded.push(compactToU8a(this.size));
        }
        for (const v of this.values()) {
            encoded.push(v.toU8a(isBare));
        }
        return u8aConcatStrict(encoded);
    }
}
_BTreeSet_ValClass = new WeakMap();

const MAX_LENGTH$1 = 10 * 1024 * 1024;
/** @internal */
function decodeBytesU8a(value) {
    if (!value.length) {
        return [new Uint8Array(), 0];
    }
    // handle all other Uint8Array inputs, these do have a length prefix
    const [offset, length] = compactFromU8aLim(value);
    const total = offset + length;
    if (length > MAX_LENGTH$1) {
        throw new Error(`Bytes length ${length.toString()} exceeds ${MAX_LENGTH$1}`);
    }
    else if (total > value.length) {
        throw new Error(`Bytes: required length less than remainder, expected at least ${total}, found ${value.length}`);
    }
    return [value.subarray(offset, total), total];
}
/**
 * @name Bytes
 * @description
 * A Bytes wrapper for Vec<u8>. The significant difference between this and a normal Uint8Array
 * is that this version allows for length-encoding. (i.e. it is a variable-item codec, the same
 * as what is found in [[Text]] and [[Vec]])
 */
class Bytes extends Raw {
    constructor(registry, value) {
        const [u8a, decodedLength] = isU8a(value) && !(value instanceof Raw)
            ? decodeBytesU8a(value)
            : Array.isArray(value) || isString(value)
                ? [u8aToU8a(value), 0]
                : [value, 0];
        super(registry, u8a, decodedLength);
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        return this.length + compactToU8a(this.length).length;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect(isBare) {
        const clength = compactToU8a(this.length);
        return {
            outer: isBare
                ? [super.toU8a()]
                : this.length
                    ? [clength, super.toU8a()]
                    : [clength]
        };
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'Bytes';
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        return isBare
            ? super.toU8a(isBare)
            : compactAddLength(this);
    }
}

class HashMap extends CodecMap {
    static with(keyType, valType) {
        return class extends HashMap {
            constructor(registry, value) {
                super(registry, keyType, valType, value);
            }
        };
    }
}

/**
 * @name bool
 * @description
 * Representation for a boolean value in the system. It extends the base JS `Boolean` class
 * @noInheritDoc
 */
class bool extends Boolean {
    constructor(registry, value = false) {
        super(isU8a(value)
            ? value[0] === 1
            : value instanceof Boolean
                ? value.valueOf()
                : !!value);
        this.initialU8aLength = 1;
        this.registry = registry;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        return 1;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value (true when it wraps false/default)
     */
    get isEmpty() {
        return this.isFalse;
    }
    /**
     * @description Checks if the value is an empty value (always false)
     */
    get isFalse() {
        return !this.isTrue;
    }
    /**
     * @description Checks if the value is an empty value (always false)
     */
    get isTrue() {
        return this.valueOf();
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        return this.valueOf() === (other instanceof Boolean
            ? other.valueOf()
            : other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return {
            outer: [this.toU8a()]
        };
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
        return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
        return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return this.valueOf();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return this.toJSON();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'bool';
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return this.toJSON().toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    toU8a(isBare) {
        return new Uint8Array([this.valueOf() ? 1 : 0]);
    }
}

function decodeU8a$5(registry, value) {
    // Encoded as -
    //  - 0 = None
    //  - 1 = True
    //  - 2 = False
    return value[0] === 0
        ? null
        : new bool(registry, value[0] === 1);
}
/**
 * @name OptionBool
 * @description A specific implementation of Option<bool> than allows for single-byte encoding
 */
class OptionBool extends Option {
    constructor(registry, value) {
        super(registry, bool, isU8a(value) || isHex(value)
            ? decodeU8a$5(registry, u8aToU8a(value))
            : value);
        this.initialU8aLength = 1;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        return 1;
    }
    /**
     * @description Checks if the value is an empty value (always false)
     */
    get isFalse() {
        return this.isSome
            ? !this.value.valueOf()
            : false;
    }
    /**
     * @description Checks if the value is an empty value (always false)
     */
    get isTrue() {
        return this.isSome
            ? this.value.valueOf()
            : false;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return { outer: [this.toU8a()] };
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType(isBare) {
        return isBare
            ? 'bool'
            : 'Option<bool>';
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        if (isBare) {
            return super.toU8a(true);
        }
        return this.isSome
            ? new Uint8Array([this.isTrue ? 1 : 2])
            : new Uint8Array([0]);
    }
}

var _Range_rangeName;
/**
 * @name Range
 * @description
 * Rust `Range<T>` representation
 */
class Range extends Tuple {
    constructor(registry, Type, value, { rangeName = 'Range' } = {}) {
        super(registry, [Type, Type], value);
        _Range_rangeName.set(this, void 0);
        __classPrivateFieldSet(this, _Range_rangeName, rangeName, "f");
    }
    static with(Type) {
        return class extends Range {
            constructor(registry, value) {
                super(registry, Type, value);
            }
        };
    }
    /**
     * @description Returns the starting range value
     */
    get start() {
        return this[0];
    }
    /**
     * @description Returns the ending range value
     */
    get end() {
        return this[1];
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return `${__classPrivateFieldGet(this, _Range_rangeName, "f")}<${this.start.toRawType()}>`;
    }
}
_Range_rangeName = new WeakMap();

class RangeInclusive extends Range {
    constructor(registry, Type, value) {
        super(registry, Type, value, { rangeName: 'RangeInclusive' });
    }
    static with(Type) {
        return class extends RangeInclusive {
            constructor(registry, value) {
                super(registry, Type, value);
            }
        };
    }
}

var _Text_override;
const MAX_LENGTH = 128 * 1024;
/** @internal */
function decodeText(value) {
    if (isU8a(value)) {
        if (!value.length) {
            return ['', 0];
        }
        // for Raw, the internal buffer does not have an internal length
        // (the same applies in e.g. Bytes, where length is added at encoding-time)
        if (value instanceof Raw) {
            return [u8aToString(value), 0];
        }
        const [offset, length] = compactFromU8aLim(value);
        const total = offset + length;
        if (length > MAX_LENGTH) {
            throw new Error(`Text: length ${length.toString()} exceeds ${MAX_LENGTH}`);
        }
        else if (total > value.length) {
            throw new Error(`Text: required length less than remainder, expected at least ${total}, found ${value.length}`);
        }
        return [u8aToString(value.subarray(offset, total)), total];
    }
    else if (isHex(value)) {
        return [u8aToString(hexToU8a(value)), 0];
    }
    return [value ? value.toString() : '', 0];
}
/**
 * @name Text
 * @description
 * This is a string wrapper, along with the length. It is used both for strings as well
 * as items such as documentation. It simply extends the standard JS `String` built-in
 * object, inheriting all methods exposed from `String`.
 * @noInheritDoc
 */
class Text extends String {
    constructor(registry, value) {
        const [str, decodedLength] = decodeText(value);
        super(str);
        _Text_override.set(this, null);
        this.registry = registry;
        this.initialU8aLength = decodedLength;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        return this.toU8a().length;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */
    get isEmpty() {
        return this.length === 0;
    }
    /**
     * @description The length of the value
     */
    get length() {
        // only included here since we ignore inherited docs
        return super.length;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        return isString(other)
            ? this.toString() === other.toString()
            : false;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        const value = stringToU8a(super.toString());
        return {
            outer: value.length
                ? [compactToU8a(value.length), value]
                : [compactToU8a(value.length)]
        };
    }
    /**
     * @description Set an override value for this
     */
    setOverride(override) {
        __classPrivateFieldSet(this, _Text_override, override, "f");
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
        // like with Vec<u8>, when we are encoding to hex, we don't actually add
        // the length prefix (it is already implied by the actual string length)
        return u8aToHex(this.toU8a(true));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
        return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return this.toString();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return this.toJSON();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'Text';
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return __classPrivateFieldGet(this, _Text_override, "f") || super.toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        // NOTE Here we use the super toString (we are not taking overrides into account,
        // rather encoding the original value the string was constructed with)
        const encoded = stringToU8a(super.toString());
        return isBare
            ? encoded
            : compactAddLength(encoded);
    }
}
_Text_override = new WeakMap();

/**
 * @name Type
 * @description
 * This is a extended version of Text, specifically to handle types. Here we rely fully
 * on what Text provides us, however we also adjust the types received from the runtime,
 * i.e. we remove the `T::` prefixes found in some types for consistency across implementation.
 */
class Type extends Text {
    constructor(registry, value = '') {
        super(registry, value);
        this.setOverride(sanitize(this.toString()));
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'Type';
    }
}

/** @internal */
function decodeU8aFixed(value, bitLength) {
    const u8a = u8aToU8a(value);
    const byteLength = bitLength / 8;
    if (!u8a.length) {
        return [new Uint8Array(byteLength), 0];
    }
    if (isU8a(value) ? u8a.length < byteLength : u8a.length !== byteLength) {
        throw new Error(`Expected input with ${byteLength} bytes (${bitLength} bits), found ${u8a.length} bytes`);
    }
    return [u8a.subarray(0, byteLength), byteLength];
}
/**
 * @name U8aFixed
 * @description
 * A U8a that manages a a sequence of bytes up to the specified bitLength. Not meant
 * to be used directly, rather is should be subclassed with the specific lengths.
 */
class U8aFixed extends Raw {
    constructor(registry, value = new Uint8Array(), bitLength = 256) {
        const [u8a, decodedLength] = decodeU8aFixed(value, bitLength);
        super(registry, u8a, decodedLength);
    }
    static with(bitLength, typeName) {
        return class extends U8aFixed {
            constructor(registry, value) {
                super(registry, value, bitLength);
            }
            toRawType() {
                return typeName || super.toRawType();
            }
        };
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return `[u8;${this.length}]`;
    }
}

var _WrapperKeepOpaque_Type, _WrapperKeepOpaque_decoded, _WrapperKeepOpaque_opaqueName;
function decodeRaw(registry, typeName, value) {
    const Type = typeToConstructor(registry, typeName);
    if (isU8a(value) || isHex(value)) {
        try {
            const [, u8a] = isHex(value)
                ? [0, u8aToU8a(value)]
                : (value instanceof Raw)
                    ? [0, value.subarray()]
                    : compactStripLength(value);
            return [Type, new Type(registry, u8a), value];
        }
        catch {
            return [Type, null, value];
        }
    }
    const instance = new Type(registry, value);
    return [Type, instance, compactAddLength(instance.toU8a())];
}
class WrapperKeepOpaque extends Bytes {
    constructor(registry, typeName, value, { opaqueName = 'WrapperKeepOpaque' } = {}) {
        const [Type, decoded, u8a] = decodeRaw(registry, typeName, value);
        super(registry, u8a);
        _WrapperKeepOpaque_Type.set(this, void 0);
        _WrapperKeepOpaque_decoded.set(this, void 0);
        _WrapperKeepOpaque_opaqueName.set(this, void 0);
        __classPrivateFieldSet(this, _WrapperKeepOpaque_Type, Type, "f");
        __classPrivateFieldSet(this, _WrapperKeepOpaque_decoded, decoded, "f");
        __classPrivateFieldSet(this, _WrapperKeepOpaque_opaqueName, opaqueName, "f");
    }
    static with(Type) {
        return class extends WrapperKeepOpaque {
            constructor(registry, value) {
                super(registry, Type, value);
            }
        };
    }
    /**
     * @description Checks if the wrapper is decodable
     */
    get isDecoded() {
        return !!__classPrivateFieldGet(this, _WrapperKeepOpaque_decoded, "f");
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return __classPrivateFieldGet(this, _WrapperKeepOpaque_decoded, "f")
            ? {
                inner: [__classPrivateFieldGet(this, _WrapperKeepOpaque_decoded, "f").inspect()],
                outer: [compactToU8a(this.length)]
            }
            : {
                outer: [compactToU8a(this.length), this.toU8a(true)]
            };
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
        return __classPrivateFieldGet(this, _WrapperKeepOpaque_decoded, "f")
            ? __classPrivateFieldGet(this, _WrapperKeepOpaque_decoded, "f").toHuman(isExtended)
            : super.toHuman();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return __classPrivateFieldGet(this, _WrapperKeepOpaque_decoded, "f")
            ? __classPrivateFieldGet(this, _WrapperKeepOpaque_decoded, "f").toPrimitive()
            : super.toPrimitive();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return `${__classPrivateFieldGet(this, _WrapperKeepOpaque_opaqueName, "f")}<${this.registry.getClassName(__classPrivateFieldGet(this, _WrapperKeepOpaque_Type, "f")) || (__classPrivateFieldGet(this, _WrapperKeepOpaque_decoded, "f") ? __classPrivateFieldGet(this, _WrapperKeepOpaque_decoded, "f").toRawType() : new (__classPrivateFieldGet(this, _WrapperKeepOpaque_Type, "f"))(this.registry).toRawType())}>`;
    }
    /**
     * @description Converts the Object to to a string (either decoded or bytes)
     */
    toString() {
        return __classPrivateFieldGet(this, _WrapperKeepOpaque_decoded, "f")
            ? __classPrivateFieldGet(this, _WrapperKeepOpaque_decoded, "f").toString()
            : super.toString();
    }
    /**
     * @description Returns the decoded that the WrapperKeepOpaque represents (if available), throws if non-decodable
     */
    unwrap() {
        if (!__classPrivateFieldGet(this, _WrapperKeepOpaque_decoded, "f")) {
            throw new Error(`${__classPrivateFieldGet(this, _WrapperKeepOpaque_opaqueName, "f")}: unwrapping an undecodable value`);
        }
        return __classPrivateFieldGet(this, _WrapperKeepOpaque_decoded, "f");
    }
}
_WrapperKeepOpaque_Type = new WeakMap(), _WrapperKeepOpaque_decoded = new WeakMap(), _WrapperKeepOpaque_opaqueName = new WeakMap();

class WrapperOpaque extends WrapperKeepOpaque {
    constructor(registry, typeName, value) {
        super(registry, typeName, value, { opaqueName: 'WrapperOpaque' });
    }
    static with(Type) {
        return class extends WrapperOpaque {
            constructor(registry, value) {
                super(registry, Type, value);
            }
        };
    }
    /**
     * @description The inner value for this wrapper, in all cases it _should_ be decodable (unlike KeepOpaque)
     */
    get inner() {
        return this.unwrap();
    }
}

var _Float_bitLength;
/**
 * @name Float
 * @description
 * A Codec wrapper for F32 & F64 values. You generally don't want to be using
 * f32/f64 in your runtime, operations on fixed points numbers are preferable. This class
 * was explicitly added since scale-codec has a flag that enables this and it is available
 * in some eth_* RPCs
 */
class Float extends Number {
    constructor(registry, value, { bitLength = 32 } = {}) {
        super(isU8a(value) || isHex(value)
            ? value.length === 0
                ? 0
                : u8aToFloat(u8aToU8a(value), { bitLength })
            : (value || 0));
        _Float_bitLength.set(this, void 0);
        __classPrivateFieldSet(this, _Float_bitLength, bitLength, "f");
        this.encodedLength = bitLength / 8;
        this.initialU8aLength = this.encodedLength;
        this.registry = registry;
    }
    static with(bitLength) {
        return class extends Float {
            constructor(registry, value) {
                super(registry, value, { bitLength });
            }
        };
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Returns true if the type wraps an empty/default all-0 value
     */
    get isEmpty() {
        return this.valueOf() === 0;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        return this.valueOf() === Number(other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return {
            outer: [this.toU8a()]
        };
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
        return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
        return this.toString();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        // Not sure if this is actually a hex or a string value
        // (would need to check against RPCs to see the result here)
        return this.toHex();
    }
    /**
     * @description Returns the number representation (Same as valueOf)
     */
    toNumber() {
        return this.valueOf();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return this.toNumber();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return `f${__classPrivateFieldGet(this, _Float_bitLength, "f")}`;
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */
    toU8a() {
        return floatToU8a(this, { bitLength: __classPrivateFieldGet(this, _Float_bitLength, "f") });
    }
}
_Float_bitLength = new WeakMap();

/** @internal */
function decodeJson(value) {
    return Object.entries(value || {});
}
/**
 * @name Json
 * @description
 * Wraps the a JSON structure retrieve via RPC. It extends the standard JS Map with. While it
 * implements a Codec, it is limited in that it can only be used with input objects via RPC,
 * i.e. no hex decoding. Unlike a struct, this waps a JSON object with unknown keys
 * @noInheritDoc
 */
class Json extends Map {
    constructor(registry, value) {
        const decoded = decodeJson(value);
        super(decoded);
        this.registry = registry;
        objectProperties(this, decoded.map(([k]) => k), (k) => this.get(k));
    }
    /**
     * @description Always 0, never encodes as a Uint8Array
     */
    get encodedLength() {
        return 0;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */
    get isEmpty() {
        return [...this.keys()].length === 0;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        return compareMap(this, other);
    }
    /**
     * @description Returns a typed value from the internal map
     */
    getT(key) {
        return this.get(key);
    }
    /**
     * @description Unimplemented, will throw
     */
    inspect() {
        throw new Error('Unimplemented');
    }
    /**
     * @description Unimplemented, will throw
     */
    toHex() {
        throw new Error('Unimplemented');
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
        return [...this.entries()].reduce((json, [key, value]) => {
            json[key] = isFunction$1(value.toHuman)
                ? value.toHuman()
                : value;
            return json;
        }, {});
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return [...this.entries()].reduce((json, [key, value]) => {
            json[key] = value;
            return json;
        }, {});
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return [...this.entries()].reduce((json, [key, value]) => {
            json[key] = isFunction$1(value.toPrimitive)
                ? value.toPrimitive()
                : value;
            return json;
        }, {});
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'Json';
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return stringify(this.toJSON());
    }
    /**
     * @description Unimplemented, will throw
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    toU8a(isBare) {
        throw new Error('Unimplemented');
    }
}

var _CodecSet_allowed, _CodecSet_byteLength;
function encodeSet(setValues, values) {
    const encoded = new BN(0);
    for (let i = 0; i < values.length; i++) {
        encoded.ior(bnToBn(setValues[values[i]] || 0));
    }
    return encoded;
}
/** @internal */
function decodeSetArray(setValues, values) {
    const result = new Array(values.length);
    for (let i = 0; i < values.length; i++) {
        const key = values[i];
        if (isUndefined(setValues[key])) {
            throw new Error(`Set: Invalid key '${key}' passed to Set, allowed ${Object.keys(setValues).join(', ')}`);
        }
        result[i] = key;
    }
    return result;
}
/** @internal */
function decodeSetNumber(setValues, _value) {
    const bn = bnToBn(_value);
    const keys = Object.keys(setValues);
    const result = [];
    for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (bn.and(bnToBn(setValues[key])).eq(bnToBn(setValues[key]))) {
            result.push(key);
        }
    }
    const computed = encodeSet(setValues, result);
    if (!bn.eq(computed)) {
        throw new Error(`Set: Mismatch decoding '${bn.toString()}', computed as '${computed.toString()}' with ${result.join(', ')}`);
    }
    return result;
}
/** @internal */
function decodeSet(setValues, value = 0, bitLength) {
    if (bitLength % 8 !== 0) {
        throw new Error(`Expected valid bitLength, power of 8, found ${bitLength}`);
    }
    const byteLength = bitLength / 8;
    if (isU8a(value)) {
        return value.length === 0
            ? []
            : decodeSetNumber(setValues, u8aToBn(value.subarray(0, byteLength), { isLe: true }));
    }
    else if (isString(value)) {
        return decodeSet(setValues, u8aToU8a(value), byteLength);
    }
    else if (value instanceof Set || Array.isArray(value)) {
        const input = Array.isArray(value)
            ? value
            : [...value.values()];
        return decodeSetArray(setValues, input);
    }
    return decodeSetNumber(setValues, value);
}
/**
 * @name Set
 * @description
 * An Set is an array of string values, represented an an encoded type by
 * a bitwise representation of the values.
 */
class CodecSet extends Set {
    constructor(registry, setValues, value, bitLength = 8) {
        super(decodeSet(setValues, value, bitLength));
        _CodecSet_allowed.set(this, void 0);
        _CodecSet_byteLength.set(this, void 0);
        /**
         * @description adds a value to the Set (extended to allow for validity checking)
         */
        this.add = (key) => {
            // ^^^ add = () property done to assign this instance's this, otherwise Set.add creates "some" chaos
            // we have the isUndefined(this._setValues) in here as well, add is used internally
            // in the Set constructor (so it is undefined at this point, and should allow)
            if (__classPrivateFieldGet(this, _CodecSet_allowed, "f") && isUndefined(__classPrivateFieldGet(this, _CodecSet_allowed, "f")[key])) {
                throw new Error(`Set: Invalid key '${key}' on add`);
            }
            super.add(key);
            return this;
        };
        this.registry = registry;
        __classPrivateFieldSet(this, _CodecSet_allowed, setValues, "f");
        __classPrivateFieldSet(this, _CodecSet_byteLength, bitLength / 8, "f");
    }
    static with(values, bitLength) {
        var _a;
        return _a = class extends CodecSet {
                constructor(registry, value) {
                    super(registry, values, value, bitLength);
                }
            },
            (() => {
                const keys = Object.keys(values);
                const isKeys = new Array(keys.length);
                for (let i = 0; i < keys.length; i++) {
                    isKeys[i] = `is${stringPascalCase(keys[i])}`;
                }
                objectProperties(_a.prototype, isKeys, (_, i, self) => self.strings.includes(keys[i]));
            })(),
            _a;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        return __classPrivateFieldGet(this, _CodecSet_byteLength, "f");
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description true is the Set contains no values
     */
    get isEmpty() {
        return this.size === 0;
    }
    /**
     * @description The actual set values as a string[]
     */
    get strings() {
        return [...super.values()];
    }
    /**
     * @description The encoded value for the set members
     */
    get valueEncoded() {
        return encodeSet(__classPrivateFieldGet(this, _CodecSet_allowed, "f"), this.strings);
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        if (Array.isArray(other)) {
            // we don't actually care about the order, sort the values
            return compareArray(this.strings.sort(), other.sort());
        }
        else if (other instanceof Set) {
            return this.eq([...other.values()]);
        }
        else if (isNumber(other) || isBn(other)) {
            return this.valueEncoded.eq(bnToBn(other));
        }
        return false;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return {
            outer: [this.toU8a()]
        };
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
        return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
        return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return this.strings;
    }
    /**
     * @description The encoded value for the set members
     */
    toNumber() {
        return this.valueEncoded.toNumber();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return this.toJSON();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return stringify({ _set: __classPrivateFieldGet(this, _CodecSet_allowed, "f") });
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return `[${this.strings.join(', ')}]`;
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    toU8a(isBare) {
        return bnToU8a(this.valueEncoded, {
            bitLength: __classPrivateFieldGet(this, _CodecSet_byteLength, "f") * 8,
            isLe: true
        });
    }
}
_CodecSet_allowed = new WeakMap(), _CodecSet_byteLength = new WeakMap();

/**
 * @name f32
 * @description
 * A 32-bit float
 */
class f32 extends Float.with(32) {
    constructor() {
        super(...arguments);
        // NOTE without this, we cannot properly determine extensions
        this.__FloatType = 'f32';
    }
}

/**
 * @name f64
 * @description
 * A 64-bit float
 */
class f64 extends Float.with(64) {
    constructor() {
        super(...arguments);
        // NOTE without this, we cannot properly determine extensions
        this.__FloatType = 'f64';
    }
}

/**
 * @name i8
 * @description
 * An 8-bit signed integer
 */
class i8 extends Int.with(8) {
    constructor() {
        super(...arguments);
        // NOTE without this, we cannot properly determine extensions
        this.__IntType = 'i8';
    }
}

/**
 * @name i16
 * @description
 * A 16-bit signed integer
 */
class i16 extends Int.with(16) {
    constructor() {
        super(...arguments);
        // NOTE without this, we cannot properly determine extensions
        this.__IntType = 'i16';
    }
}

/**
 * @name i32
 * @description
 * A 32-bit signed integer
 */
class i32 extends Int.with(32) {
    constructor() {
        super(...arguments);
        // NOTE without this, we cannot properly determine extensions
        this.__IntType = 'i32';
    }
}

/**
 * @name i64
 * @description
 * A 64-bit signed integer
 */
class i64 extends Int.with(64) {
    constructor() {
        super(...arguments);
        // NOTE without this, we cannot properly determine extensions
        this.__IntType = 'i64';
    }
}

/**
 * @name i128
 * @description
 * A 128-bit signed integer
 */
class i128 extends Int.with(128) {
    constructor() {
        super(...arguments);
        // NOTE without this, we cannot properly determine extensions
        this.__IntType = 'i128';
    }
}

/**
 * @name i256
 * @description
 * A 256-bit signed integer
 */
class i256 extends Int.with(256) {
    constructor() {
        super(...arguments);
        // NOTE without this, we cannot properly determine extensions
        this.__IntType = 'i256';
    }
}

/**
 * @name u8
 * @description
 * An 8-bit unsigned integer
 */
class u8 extends UInt.with(8) {
    constructor() {
        super(...arguments);
        // NOTE without this, we cannot properly determine extensions
        this.__UIntType = 'u8';
    }
}

/**
 * @name u16
 * @description
 * A 16-bit unsigned integer
 */
class u16 extends UInt.with(16) {
    constructor() {
        super(...arguments);
        // NOTE without this, we cannot properly determine extensions
        this.__UIntType = 'u16';
    }
}

/**
 * @name u32
 * @description
 * A 32-bit unsigned integer
 */
class u32 extends UInt.with(32) {
    constructor() {
        super(...arguments);
        // NOTE without this, we cannot properly determine extensions
        this.__UIntType = 'u32';
    }
}

/**
 * @name u64
 * @description
 * A 64-bit unsigned integer
 */
class u64 extends UInt.with(64) {
    constructor() {
        super(...arguments);
        // NOTE without this, we cannot properly determine extensions
        this.__UIntType = 'u64';
    }
}

/**
 * @name u128
 * @description
 * A 128-bit unsigned integer
 */
class u128 extends UInt.with(128) {
    constructor() {
        super(...arguments);
        // NOTE without this, we cannot properly determine extensions
        this.__UIntType = 'u128';
    }
}

/**
 * @name u256
 * @description
 * A 256-bit unsigned integer
 */
class u256 extends UInt.with(256) {
    constructor() {
        super(...arguments);
        // NOTE without this, we cannot properly determine extensions
        this.__UIntType = 'u256';
    }
}

/**
 * @name USize
 * @description
 * A System default unsigned number, typically used in RPC to report non-consensus
 * data. It is a wrapper for [[U32]] as a WASM default (as generated by Rust bindings).
 * It is not to be used, since it created consensus mismatches.
 */
class usize extends u32 {
    constructor(registry, value) {
        super(registry, value);
        throw new Error('The `usize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally u64) and WASM (always u32) code. Use one of the `u32` or `u64` types explicitly.');
    }
}

function typeSplit(type) {
    const result = [];
    // these are the depths of the various tokens: <, [, {, (
    let c = 0;
    let f = 0;
    let s = 0;
    let t = 0;
    // current start position
    let start = 0;
    for (let i = 0; i < type.length; i++) {
        switch (type[i]) {
            // if we are not nested, add the type
            case ',': {
                if (!(c || f || s || t)) {
                    result.push(type.substring(start, i).trim());
                    start = i + 1;
                }
                break;
            }
            // adjust compact/vec (and friends) depth
            case '<':
                c++;
                break;
            case '>':
                c--;
                break;
            // adjust fixed vec depths
            case '[':
                f++;
                break;
            case ']':
                f--;
                break;
            // adjust struct depth
            case '{':
                s++;
                break;
            case '}':
                s--;
                break;
            // adjust tuple depth
            case '(':
                t++;
                break;
            case ')':
                t--;
                break;
        }
    }
    // ensure we have all the terminators taken care of
    if (c || f || s || t) {
        throw new Error(`Invalid definition (missing terminators) found in ${type}`);
    }
    // the final leg of the journey
    result.push(type.substring(start, type.length).trim());
    return result;
}

const KNOWN_INTERNALS = ['_alias', '_fallback'];
function getTypeString(typeOrObj) {
    return isString(typeOrObj)
        ? typeOrObj.toString()
        : JSON.stringify(typeOrObj);
}
function isRustEnum(details) {
    const values = Object.values(details);
    if (values.some((v) => isNumber(v))) {
        if (!values.every((v) => isNumber(v) && v >= 0 && v <= 255)) {
            throw new Error('Invalid number-indexed enum definition');
        }
        return false;
    }
    return true;
}
function _decodeEnum(value, details, count, fallbackType) {
    value.info = TypeDefInfo.Enum;
    value.fallbackType = fallbackType;
    // not as pretty, but remain compatible with oo7 for both struct and Array types
    if (Array.isArray(details)) {
        value.sub = details.map((name, index) => ({
            index,
            info: TypeDefInfo.Plain,
            name,
            type: 'Null'
        }));
    }
    else if (isRustEnum(details)) {
        value.sub = Object.entries(details).map(([name, typeOrObj], index) => objectSpread({}, getTypeDef(getTypeString(typeOrObj || 'Null'), { name }, count), { index }));
    }
    else {
        value.sub = Object.entries(details).map(([name, index]) => ({
            index,
            info: TypeDefInfo.Plain,
            name,
            type: 'Null'
        }));
    }
    return value;
}
function _decodeSet(value, details, fallbackType) {
    value.info = TypeDefInfo.Set;
    value.fallbackType = fallbackType;
    value.length = details._bitLength;
    value.sub = Object
        .entries(details)
        .filter(([name]) => !name.startsWith('_'))
        .map(([name, index]) => ({
        index,
        info: TypeDefInfo.Plain,
        name,
        type: 'Null'
    }));
    return value;
}
function _decodeStruct(value, type, _, count) {
    const parsed = JSON.parse(type);
    const keys = Object.keys(parsed);
    if (keys.includes('_enum')) {
        return _decodeEnum(value, parsed._enum, count, parsed._fallback);
    }
    else if (keys.includes('_set')) {
        return _decodeSet(value, parsed._set, parsed._fallback);
    }
    value.alias = parsed._alias
        ? new Map(Object.entries(parsed._alias))
        : undefined;
    value.fallbackType = parsed._fallback;
    value.sub = keys
        .filter((name) => !KNOWN_INTERNALS.includes(name))
        .map((name) => getTypeDef(getTypeString(parsed[name]), { name }, count));
    return value;
}
function _decodeFixedVec(value, type, _, count) {
    const max = type.length - 1;
    let index = -1;
    let inner = 0;
    for (let i = 1; (i < max) && (index === -1); i++) {
        switch (type[i]) {
            case ';': {
                if (inner === 0) {
                    index = i;
                }
                break;
            }
            case '[':
            case '(':
            case '<':
                inner++;
                break;
            case ']':
            case ')':
            case '>':
                inner--;
                break;
        }
    }
    if (index === -1) {
        throw new Error(`${type}: Unable to extract location of ';'`);
    }
    const vecType = type.substring(1, index);
    const [strLength, displayName] = type.substring(index + 1, max).split(';');
    const length = parseInt(strLength.trim(), 10);
    if (length > 2048) {
        throw new Error(`${type}: Only support for [Type; <length>], where length <= 2048`);
    }
    value.displayName = displayName;
    value.length = length;
    value.sub = getTypeDef(vecType, {}, count);
    return value;
}
function _decodeTuple(value, _, subType, count) {
    value.sub = subType.length === 0
        ? []
        : typeSplit(subType).map((inner) => getTypeDef(inner, {}, count));
    return value;
}
function _decodeAnyInt(value, type, _, clazz) {
    const [strLength, displayName] = type.substring(clazz.length + 1, type.length - 1).split(',');
    const length = parseInt(strLength.trim(), 10);
    if ((length > 8192) || (length % 8)) {
        throw new Error(`${type}: Only support for ${clazz}<bitLength>, where length <= 8192 and a power of 8, found ${length}`);
    }
    value.displayName = displayName;
    value.length = length;
    return value;
}
function _decodeInt(value, type, subType) {
    return _decodeAnyInt(value, type, subType, 'Int');
}
function _decodeUInt(value, type, subType) {
    return _decodeAnyInt(value, type, subType, 'UInt');
}
function _decodeDoNotConstruct(value, type, _) {
    const NAME_LENGTH = 'DoNotConstruct'.length;
    value.displayName = type.substring(NAME_LENGTH + 1, type.length - 1);
    return value;
}
function hasWrapper(type, [start, end]) {
    return (type.substring(0, start.length) === start) && (type.slice(-1 * end.length) === end);
}
const nestedExtraction = [
    ['[', ']', TypeDefInfo.VecFixed, _decodeFixedVec],
    ['{', '}', TypeDefInfo.Struct, _decodeStruct],
    ['(', ')', TypeDefInfo.Tuple, _decodeTuple],
    // the inner for these are the same as tuple, multiple values
    ['BTreeMap<', '>', TypeDefInfo.BTreeMap, _decodeTuple],
    ['HashMap<', '>', TypeDefInfo.HashMap, _decodeTuple],
    ['Int<', '>', TypeDefInfo.Int, _decodeInt],
    ['Result<', '>', TypeDefInfo.Result, _decodeTuple],
    ['UInt<', '>', TypeDefInfo.UInt, _decodeUInt],
    ['DoNotConstruct<', '>', TypeDefInfo.DoNotConstruct, _decodeDoNotConstruct]
];
const wrappedExtraction = [
    ['BTreeSet<', '>', TypeDefInfo.BTreeSet],
    ['Compact<', '>', TypeDefInfo.Compact],
    ['Linkage<', '>', TypeDefInfo.Linkage],
    ['Opaque<', '>', TypeDefInfo.WrapperOpaque],
    ['Option<', '>', TypeDefInfo.Option],
    ['Range<', '>', TypeDefInfo.Range],
    ['RangeInclusive<', '>', TypeDefInfo.RangeInclusive],
    ['Vec<', '>', TypeDefInfo.Vec],
    ['WrapperKeepOpaque<', '>', TypeDefInfo.WrapperKeepOpaque],
    ['WrapperOpaque<', '>', TypeDefInfo.WrapperOpaque]
];
function extractSubType(type, [start, end]) {
    return type.substring(start.length, type.length - end.length);
}
function getTypeDef(_type, { displayName, name } = {}, count = 0) {
    // create the type via Type, allowing types to be sanitized
    const type = sanitize(_type);
    const value = { displayName, info: TypeDefInfo.Plain, name, type };
    if (++count > 64) {
        throw new Error('getTypeDef: Maximum nested limit reached');
    }
    const nested = nestedExtraction.find((nested) => hasWrapper(type, nested));
    if (nested) {
        value.info = nested[2];
        return nested[3](value, type, extractSubType(type, nested), count);
    }
    const wrapped = wrappedExtraction.find((wrapped) => hasWrapper(type, wrapped));
    if (wrapped) {
        value.info = wrapped[2];
        value.sub = getTypeDef(extractSubType(type, wrapped), {}, count);
    }
    return value;
}

function getTypeDefType({ lookupName, type }) {
    return lookupName || type;
}
function getSubDefArray(value) {
    if (!Array.isArray(value.sub)) {
        throw new Error(`Expected subtype as TypeDef[] in ${stringify(value)}`);
    }
    return value.sub;
}
function getSubDef(value) {
    if (!value.sub || Array.isArray(value.sub)) {
        throw new Error(`Expected subtype as TypeDef in ${stringify(value)}`);
    }
    return value.sub;
}
function getSubType(value) {
    return getTypeDefType(getSubDef(value));
}
function getTypeClassMap(value) {
    const subs = getSubDefArray(value);
    const map = {};
    for (let i = 0; i < subs.length; i++) {
        map[subs[i].name] = getTypeDefType(subs[i]);
    }
    return map;
}
function getTypeClassArray(value) {
    return getSubDefArray(value).map(getTypeDefType);
}
function createInt(Clazz, { displayName, length }) {
    if (!isNumber(length)) {
        throw new Error(`Expected bitLength information for ${displayName || Clazz.constructor.name}<bitLength>`);
    }
    return Clazz.with(length, displayName);
}
function createHashMap(Clazz, value) {
    const [keyType, valueType] = getTypeClassArray(value);
    return Clazz.with(keyType, valueType);
}
function createWithSub(Clazz, value) {
    return Clazz.with(getSubType(value));
}
const infoMapping = {
    [TypeDefInfo.BTreeMap]: (registry, value) => createHashMap(BTreeMap, value),
    [TypeDefInfo.BTreeSet]: (registry, value) => createWithSub(BTreeSet, value),
    [TypeDefInfo.Compact]: (registry, value) => createWithSub(Compact, value),
    [TypeDefInfo.DoNotConstruct]: (registry, value) => DoNotConstruct.with(value.displayName || value.type),
    [TypeDefInfo.Enum]: (registry, value) => {
        const subs = getSubDefArray(value);
        return Enum.with(subs.every(({ type }) => type === 'Null')
            ? subs.reduce((out, { index, name }, count) => {
                out[name] = index || count;
                return out;
            }, {})
            : getTypeClassMap(value));
    },
    [TypeDefInfo.HashMap]: (registry, value) => createHashMap(HashMap, value),
    [TypeDefInfo.Int]: (registry, value) => createInt(Int, value),
    // We have circular deps between Linkage & Struct
    [TypeDefInfo.Linkage]: (registry, value) => {
        const type = `Option<${getSubType(value)}>`;
        // eslint-disable-next-line sort-keys
        const Clazz = Struct.with({ previous: type, next: type });
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        Clazz.prototype.toRawType = function () {
            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call
            return `Linkage<${this.next.toRawType(true)}>`;
        };
        return Clazz;
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    [TypeDefInfo.Null]: (registry, _) => Null,
    [TypeDefInfo.Option]: (registry, value) => {
        if (!value.sub || Array.isArray(value.sub)) {
            throw new Error('Expected type information for Option');
        }
        // NOTE This is opt-in (unhandled), not by default
        // if (value.sub.type === 'bool') {
        //   return OptionBool;
        // }
        return createWithSub(Option, value);
    },
    [TypeDefInfo.Plain]: (registry, value) => registry.getOrUnknown(value.type),
    [TypeDefInfo.Range]: (registry, value) => createWithSub(Range, value),
    [TypeDefInfo.RangeInclusive]: (registry, value) => createWithSub(RangeInclusive, value),
    [TypeDefInfo.Result]: (registry, value) => {
        const [Ok, Err] = getTypeClassArray(value);
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        return Result.with({ Err, Ok });
    },
    [TypeDefInfo.Set]: (registry, value) => CodecSet.with(getSubDefArray(value).reduce((result, { index, name }) => {
        result[name] = index;
        return result;
    }, {}), value.length),
    [TypeDefInfo.Si]: (registry, value) => getTypeClass(registry, registry.lookup.getTypeDef(value.type)),
    [TypeDefInfo.Struct]: (registry, value) => Struct.with(getTypeClassMap(value), value.alias),
    [TypeDefInfo.Tuple]: (registry, value) => Tuple.with(getTypeClassArray(value)),
    [TypeDefInfo.UInt]: (registry, value) => createInt(UInt, value),
    [TypeDefInfo.Vec]: (registry, { sub }) => {
        if (!sub || Array.isArray(sub)) {
            throw new Error('Expected type information for vector');
        }
        return (sub.type === 'u8'
            ? Bytes
            : Vec.with(getTypeDefType(sub)));
    },
    [TypeDefInfo.VecFixed]: (registry, { displayName, length, sub }) => {
        if (!isNumber(length) || !sub || Array.isArray(sub)) {
            throw new Error('Expected length & type information for fixed vector');
        }
        return (sub.type === 'u8'
            ? U8aFixed.with((length * 8), displayName)
            : VecFixed.with(getTypeDefType(sub), length));
    },
    [TypeDefInfo.WrapperKeepOpaque]: (registry, value) => createWithSub(WrapperKeepOpaque, value),
    [TypeDefInfo.WrapperOpaque]: (registry, value) => createWithSub(WrapperOpaque, value)
};
function constructTypeClass(registry, typeDef) {
    try {
        const Type = infoMapping[typeDef.info](registry, typeDef);
        if (!Type) {
            throw new Error('No class created');
        }
        // don't clobber any existing
        if (!Type.__fallbackType && typeDef.fallbackType) {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore ...this is the only place we we actually assign this...
            Type.__fallbackType = typeDef.fallbackType;
        }
        return Type;
    }
    catch (error) {
        throw new Error(`Unable to construct class from ${stringify(typeDef)}: ${error.message}`);
    }
}
function getTypeClass(registry, typeDef) {
    return registry.getUnsafe(typeDef.type, false, typeDef);
}
function createClassUnsafe(registry, type) {
    return (
    // just retrieve via name, no creation via typeDef
    registry.getUnsafe(type) ||
        // we don't have an existing type, create the class via typeDef
        getTypeClass(registry, registry.isLookupType(type)
            ? registry.lookup.getTypeDef(type)
            : getTypeDef(type)));
}

function checkInstance(created, matcher) {
    const u8a = created.toU8a();
    const rawType = created.toRawType();
    const isOk = (
    // full match, all ok
    u8aEq(u8a, matcher) ||
        (
        // on a length-prefixed type, just check the actual length
        ['Bytes', 'Text', 'Type'].includes(rawType) &&
            matcher.length === created.length) ||
        (
        // when the created is empty and matcher is also empty, let it slide...
        created.isEmpty &&
            matcher.every((v) => !v)));
    if (!isOk) {
        throw new Error(`${rawType}:: Decoded input doesn't match input, received ${u8aToHex(matcher, 512)} (${matcher.length} bytes), created ${u8aToHex(u8a, 512)} (${u8a.length} bytes)`);
    }
}
function checkPedantic(created, [value]) {
    if (isU8a(value)) {
        checkInstance(created, value);
    }
    else if (isHex(value)) {
        checkInstance(created, u8aToU8a(value));
    }
}
function initType(registry, Type, params = [], { blockHash, isFallback, isOptional, isPedantic } = {}) {
    const created = new (isOptional
        ? Option.with(Type)
        : Type)(registry, ...params);
    isPedantic && checkPedantic(created, params);
    if (blockHash) {
        created.createdAtHash = createTypeUnsafe(registry, 'BlockHash', [blockHash]);
    }
    if (isFallback) {
        created.isStorageFallback = true;
    }
    return created;
}
function createTypeUnsafe(registry, type, params = [], options = {}) {
    let Clazz = null;
    let firstError = null;
    try {
        Clazz = createClassUnsafe(registry, type);
        return initType(registry, Clazz, params, options);
    }
    catch (error) {
        firstError = new Error(`createType(${type}):: ${error.message}`);
    }
    if (Clazz && Clazz.__fallbackType) {
        try {
            Clazz = createClassUnsafe(registry, Clazz.__fallbackType);
            return initType(registry, Clazz, params, options);
        }
        catch {
            // swallow, we will throw the first error again
        }
    }
    throw firstError;
}

const stringIdentity = (value) => value.toString();
const INFO_WRAP = ['BTreeMap', 'BTreeSet', 'Compact', 'HashMap', 'Option', 'Result', 'Vec'];
function paramsNotation(outer, inner, transform = stringIdentity) {
    return `${outer}${inner
        ? `<${(Array.isArray(inner) ? inner : [inner]).map(transform).join(', ')}>`
        : ''}`;
}
function encodeWithParams(registry, typeDef, outer) {
    const { info, sub } = typeDef;
    switch (info) {
        case TypeDefInfo.BTreeMap:
        case TypeDefInfo.BTreeSet:
        case TypeDefInfo.Compact:
        case TypeDefInfo.HashMap:
        case TypeDefInfo.Linkage:
        case TypeDefInfo.Option:
        case TypeDefInfo.Range:
        case TypeDefInfo.RangeInclusive:
        case TypeDefInfo.Result:
        case TypeDefInfo.Vec:
        case TypeDefInfo.WrapperKeepOpaque:
        case TypeDefInfo.WrapperOpaque:
            return paramsNotation(outer, sub, (p) => encodeTypeDef(registry, p));
    }
    throw new Error(`Unable to encode ${stringify(typeDef)} with params`);
}
function encodeSubTypes(registry, sub, asEnum, extra) {
    const names = sub.map(({ name }) => name);
    if (!names.every((n) => !!n)) {
        throw new Error(`Subtypes does not have consistent names, ${names.join(', ')}`);
    }
    const inner = objectSpread({}, extra);
    for (let i = 0; i < sub.length; i++) {
        const def = sub[i];
        inner[def.name] = encodeTypeDef(registry, def);
    }
    return stringify(asEnum
        ? { _enum: inner }
        : inner);
}
const encoders = {
    [TypeDefInfo.BTreeMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'BTreeMap'),
    [TypeDefInfo.BTreeSet]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'BTreeSet'),
    [TypeDefInfo.Compact]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Compact'),
    [TypeDefInfo.DoNotConstruct]: (registry, { displayName, lookupIndex, lookupName }) => `DoNotConstruct<${lookupName || displayName || (isUndefined(lookupIndex) ? 'Unknown' : registry.createLookupType(lookupIndex))}>`,
    [TypeDefInfo.Enum]: (registry, { sub }) => {
        if (!Array.isArray(sub)) {
            throw new Error('Unable to encode Enum type');
        }
        // c-like enums have all Null entries
        // TODO We need to take the disciminant into account and auto-add empty entries
        return sub.every(({ type }) => type === 'Null')
            ? stringify({ _enum: sub.map(({ name }, index) => `${name || `Empty${index}`}`) })
            : encodeSubTypes(registry, sub, true);
    },
    [TypeDefInfo.HashMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'HashMap'),
    [TypeDefInfo.Int]: (registry, { length = 32 }) => `Int<${length}>`,
    [TypeDefInfo.Linkage]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Linkage'),
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    [TypeDefInfo.Null]: (registry, typeDef) => 'Null',
    [TypeDefInfo.Option]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Option'),
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    [TypeDefInfo.Plain]: (registry, { displayName, type }) => displayName || type,
    [TypeDefInfo.Range]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Range'),
    [TypeDefInfo.RangeInclusive]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'RangeInclusive'),
    [TypeDefInfo.Result]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Result'),
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    [TypeDefInfo.Set]: (registry, { length = 8, sub }) => {
        if (!Array.isArray(sub)) {
            throw new Error('Unable to encode Set type');
        }
        return stringify({
            _set: sub.reduce((all, { index, name }, count) => objectSpread(all, { [`${name || `Unknown${index || count}`}`]: index || count }), { _bitLength: length || 8 })
        });
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    [TypeDefInfo.Si]: (registry, { lookupName, type }) => lookupName || type,
    [TypeDefInfo.Struct]: (registry, { alias, sub }) => {
        if (!Array.isArray(sub)) {
            throw new Error('Unable to encode Struct type');
        }
        return encodeSubTypes(registry, sub, false, alias
            ? {
                _alias: [...alias.entries()].reduce((all, [k, v]) => objectSpread(all, { [k]: v }), {})
            }
            : {});
    },
    [TypeDefInfo.Tuple]: (registry, { sub }) => {
        if (!Array.isArray(sub)) {
            throw new Error('Unable to encode Tuple type');
        }
        return `(${sub.map((type) => encodeTypeDef(registry, type)).join(',')})`;
    },
    [TypeDefInfo.UInt]: (registry, { length = 32 }) => `UInt<${length}>`,
    [TypeDefInfo.Vec]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Vec'),
    [TypeDefInfo.VecFixed]: (registry, { length, sub }) => {
        if (!isNumber(length) || !sub || Array.isArray(sub)) {
            throw new Error('Unable to encode VecFixed type');
        }
        return `[${sub.type};${length}]`;
    },
    [TypeDefInfo.WrapperKeepOpaque]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'WrapperKeepOpaque'),
    [TypeDefInfo.WrapperOpaque]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'WrapperOpaque')
};
function encodeType(registry, typeDef, withLookup = true) {
    return withLookup && typeDef.lookupName
        ? typeDef.lookupName
        : encoders[typeDef.info](registry, typeDef);
}
function encodeTypeDef(registry, typeDef) {
    // In the case of contracts we do have the unfortunate situation where the displayName would
    // refer to "Option" when it is an option. For these, string it out, only using when actually
    // not a top-level element to be used
    return (typeDef.displayName && !INFO_WRAP.some((i) => typeDef.displayName === i))
        ? typeDef.displayName
        : encodeType(registry, typeDef);
}
function withTypeString(registry, typeDef) {
    return objectSpread({}, typeDef, {
        type: encodeType(registry, typeDef, false)
    });
}

const XCM_MAPPINGS = ['AssetInstance', 'Fungibility', 'Junction', 'Junctions', 'MultiAsset', 'MultiAssetFilter', 'MultiLocation', 'Response', 'WildFungibility', 'WildMultiAsset', 'Xcm', 'XcmError', 'XcmOrder'];
function mapXcmTypes(version) {
    return XCM_MAPPINGS.reduce((all, key) => objectSpread(all, { [key]: `${key}${version}` }), {});
}

const v0 = {
    FungibilityV0: 'FungibilityV1',
    WildFungibilityV0: 'WildFungibilityV1',
    AssetInstanceV0: {
        _enum: {
            Undefined: 'Null',
            Index8: 'u8',
            Index16: 'Compact<u16>',
            Index32: 'Compact<u32>',
            Index64: 'Compact<u64>',
            Index128: 'Compact<u128>',
            Array4: '[u8; 4]',
            Array8: '[u8; 8]',
            Array16: '[u8; 16]',
            Array32: '[u8; 32]',
            Blob: 'Vec<u8>'
        }
    },
    JunctionV0: {
        _enum: {
            Parent: 'Null',
            Parachain: 'Compact<u32>',
            AccountId32: {
                network: 'NetworkId',
                id: 'AccountId'
            },
            AccountIndex64: {
                network: 'NetworkId',
                index: 'Compact<u64>'
            },
            AccountKey20: {
                network: 'NetworkId',
                key: '[u8; 20]'
            },
            PalletInstance: 'u8',
            GeneralIndex: 'Compact<u128>',
            GeneralKey: 'Vec<u8>',
            OnlyChild: 'Null',
            Plurality: {
                id: 'BodyId',
                part: 'BodyPart'
            }
        }
    },
    MultiAssetV0: {
        _enum: {
            None: 'Null',
            All: 'Null',
            AllFungible: 'Null',
            AllNonFungible: 'Null',
            AllAbstractFungible: 'Vec<u8>',
            AllAbstractNonFungible: 'Vec<u8>',
            AllConcreteFungible: 'MultiLocationV0',
            AllConcreteNonFungible: 'MultiLocationV0',
            AbstractFungible: {
                id: 'Vec<u8>',
                instance: 'Compact<u128>'
            },
            AbstractNonFungible: {
                class: 'Vec<u8>',
                instance: 'AssetInstanceV0'
            },
            ConcreteFungible: {
                id: 'MultiLocationV0',
                amount: 'Compact<u128>'
            },
            ConcreteNonFungible: {
                class: 'MultiLocationV0',
                instance: 'AssetInstanceV0'
            }
        }
    },
    MultiLocationV0: {
        _enum: {
            Here: 'Null',
            X1: 'JunctionV0',
            X2: '(JunctionV0, JunctionV0)',
            X3: '(JunctionV0, JunctionV0, JunctionV0)',
            X4: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
            X5: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
            X6: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
            X7: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
            X8: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)'
        }
    },
    OriginKindV0: {
        _enum: ['Native', 'SovereignAccount', 'Superuser', 'Xcm']
    },
    ResponseV0: {
        _enum: {
            Assets: 'Vec<MultiAssetV0>'
        }
    },
    XcmV0: {
        _enum: {
            WithdrawAsset: {
                assets: 'Vec<MultiAssetV0>',
                effects: 'Vec<XcmOrderV0>'
            },
            ReserveAssetDeposit: {
                assets: 'Vec<MultiAssetV0>',
                effects: 'Vec<XcmOrderV0>'
            },
            ReceiveTeleportedAsset: {
                assets: 'Vec<MultiAssetV0>',
                effects: 'Vec<XcmOrderV0>'
            },
            QueryResponse: {
                queryId: 'Compact<u64>',
                response: 'ResponseV0'
            },
            TransferAsset: {
                assets: 'Vec<MultiAssetV0>',
                dest: 'MultiLocationV0'
            },
            TransferReserveAsset: {
                assets: 'Vec<MultiAssetV0>',
                dest: 'MultiLocationV0',
                effects: 'Vec<XcmOrderV0>'
            },
            Transact: {
                originType: 'XcmOriginKind',
                requireWeightAtMost: 'u64',
                call: 'DoubleEncodedCall'
            },
            HrmpNewChannelOpenRequest: {
                sender: 'Compact<u32>',
                maxMessageSize: 'Compact<u32>',
                maxCapacity: 'Compact<u32>'
            },
            HrmpChannelAccepted: {
                recipient: 'Compact<u32>'
            },
            HrmpChannelClosing: {
                initiator: 'Compact<u32>',
                sender: 'Compact<u32>',
                recipient: 'Compact<u32>'
            },
            RelayedFrom: {
                who: 'MultiLocationV0',
                message: 'XcmV0'
            }
        }
    },
    XcmErrorV0: {
        _enum: {
            Undefined: 'Null',
            Overflow: 'Null',
            Unimplemented: 'Null',
            UnhandledXcmVersion: 'Null',
            UnhandledXcmMessage: 'Null',
            UnhandledEffect: 'Null',
            EscalationOfPrivilege: 'Null',
            UntrustedReserveLocation: 'Null',
            UntrustedTeleportLocation: 'Null',
            DestinationBufferOverflow: 'Null',
            SendFailed: 'Null',
            CannotReachDestination: '(MultiLocation, Xcm)',
            MultiLocationFull: 'Null',
            FailedToDecode: 'Null',
            BadOrigin: 'Null',
            ExceedsMaxMessageSize: 'Null',
            FailedToTransactAsset: 'Null',
            WeightLimitReached: 'Weight',
            Wildcard: 'Null',
            TooMuchWeightRequired: 'Null',
            NotHoldingFees: 'Null',
            WeightNotComputable: 'Null',
            Barrier: 'Null',
            NotWithdrawable: 'Null',
            LocationCannotHold: 'Null',
            TooExpensive: 'Null',
            AssetNotFound: 'Null',
            RecursionLimitReached: 'Null'
        }
    },
    XcmOrderV0: {
        _enum: {
            Null: 'Null',
            DepositAsset: {
                assets: 'Vec<MultiAssetV0>',
                dest: 'MultiLocationV0'
            },
            DepositReserveAsset: {
                assets: 'Vec<MultiAssetV0>',
                dest: 'MultiLocationV0',
                effects: 'Vec<XcmOrderV0>'
            },
            ExchangeAsset: {
                give: 'Vec<MultiAssetV0>',
                receive: 'Vec<MultiAssetV0>'
            },
            InitiateReserveWithdraw: {
                assets: 'Vec<MultiAssetV0>',
                reserve: 'MultiLocationV0',
                effects: 'Vec<XcmOrderV0>'
            },
            InitiateTeleport: {
                assets: 'Vec<MultiAssetV0>',
                dest: 'MultiLocationV0',
                effects: 'Vec<XcmOrderV0>'
            },
            QueryHolding: {
                queryId: 'Compact<u64>',
                dest: 'MultiLocationV0',
                assets: 'Vec<MultiAssetV0>'
            },
            BuyExecution: {
                fees: 'MultiAssetV0',
                weight: 'u64',
                debt: 'u64',
                haltOnError: 'bool',
                xcm: 'Vec<XcmV0>'
            }
        }
    }
};

const v1 = {
    AssetInstanceV1: {
        _enum: {
            Undefined: 'Null',
            Index: 'Compact<u128>',
            Array4: '[u8; 4]',
            Array8: '[u8; 8]',
            Array16: '[u8; 16]',
            Array32: '[u8; 32]',
            Blob: 'Bytes'
        }
    },
    FungibilityV1: {
        _enum: {
            Fungible: 'Compact<u128>',
            NonFungible: 'AssetInstanceV1'
        }
    },
    JunctionV1: {
        _enum: {
            Parachain: 'Compact<u32>',
            AccountId32: {
                network: 'NetworkId',
                id: 'AccountId'
            },
            AccountIndex64: {
                network: 'NetworkId',
                index: 'Compact<u64>'
            },
            AccountKey20: {
                network: 'NetworkId',
                key: '[u8; 20]'
            },
            PalletInstance: 'u8',
            GeneralIndex: 'Compact<u128>',
            GeneralKey: 'Vec<u8>',
            OnlyChild: 'Null',
            Plurality: {
                id: 'BodyId',
                part: 'BodyPart'
            }
        }
    },
    JunctionsV1: {
        _enum: {
            Here: 'Null',
            X1: 'JunctionV1',
            X2: '(JunctionV1, JunctionV1)',
            X3: '(JunctionV1, JunctionV1, JunctionV1)',
            X4: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
            X5: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
            X6: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
            X7: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
            X8: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)'
        }
    },
    MultiAssetsV1: 'Vec<MultiAssetV1>',
    MultiAssetV1: {
        id: 'XcmAssetId',
        fungibility: 'FungibilityV1'
    },
    MultiAssetFilterV1: {
        _enum: {
            Definite: 'MultiAssetsV1',
            Wild: 'WildMultiAssetV1'
        }
    },
    MultiLocationV1: {
        parents: 'u8',
        interior: 'JunctionsV1'
    },
    OriginKindV1: 'OriginKindV0',
    ResponseV1: {
        _enum: {
            Assets: 'MultiAssetsV1'
        }
    },
    WildFungibilityV1: {
        _enum: ['Fungible', 'NonFungible']
    },
    WildMultiAssetV1: {
        _enum: {
            All: 'Null',
            AllOf: {
                id: 'XcmAssetId',
                fungibility: 'WildFungibilityV1'
            }
        }
    },
    XcmV1: {
        _enum: {
            WithdrawAsset: {
                assets: 'MultiAssetsV1',
                effects: 'Vec<XcmOrderV1>'
            },
            ReserveAssetDeposit: {
                assets: 'MultiAssetsV1',
                effects: 'Vec<XcmOrderV1>'
            },
            ReceiveTeleportedAsset: {
                assets: 'MultiAssetsV1',
                effects: 'Vec<XcmOrderV1>'
            },
            QueryResponse: {
                queryId: 'Compact<u64>',
                response: 'ResponseV1'
            },
            TransferAsset: {
                assets: 'MultiAssetsV1',
                dest: 'MultiLocationV1'
            },
            TransferReserveAsset: {
                assets: 'MultiAssetsV1',
                dest: 'MultiLocationV1',
                effects: 'Vec<XcmOrderV1>'
            },
            Transact: {
                originType: 'XcmOriginKind',
                requireWeightAtMost: 'u64',
                call: 'DoubleEncodedCall'
            },
            HrmpNewChannelOpenRequest: {
                sender: 'Compact<u32>',
                maxMessageSize: 'Compact<u32>',
                maxCapacity: 'Compact<u32>'
            },
            HrmpChannelAccepted: {
                recipient: 'Compact<u32>'
            },
            HrmpChannelClosing: {
                initiator: 'Compact<u32>',
                sender: 'Compact<u32>',
                recipient: 'Compact<u32>'
            },
            RelayedFrom: {
                who: 'MultiLocationV1',
                message: 'XcmV1'
            }
        }
    },
    XcmErrorV1: {
        _enum: {
            Undefined: 'Null',
            Overflow: 'Null',
            Unimplemented: 'Null',
            UnhandledXcmVersion: 'Null',
            UnhandledXcmMessage: 'Null',
            UnhandledEffect: 'Null',
            EscalationOfPrivilege: 'Null',
            UntrustedReserveLocation: 'Null',
            UntrustedTeleportLocation: 'Null',
            DestinationBufferOverflow: 'Null',
            SendFailed: 'Null',
            CannotReachDestination: '(MultiLocationV1, XcmV1)',
            MultiLocationFull: 'Null',
            FailedToDecode: 'Null',
            BadOrigin: 'Null',
            ExceedsMaxMessageSize: 'Null',
            FailedToTransactAsset: 'Null',
            WeightLimitReached: 'Weight',
            Wildcard: 'Null',
            TooMuchWeightRequired: 'Null',
            NotHoldingFees: 'Null',
            WeightNotComputable: 'Null',
            Barrier: 'Null',
            NotWithdrawable: 'Null',
            LocationCannotHold: 'Null',
            TooExpensive: 'Null',
            AssetNotFound: 'Null',
            DestinationUnsupported: 'Null',
            RecursionLimitReached: 'Null'
        }
    },
    XcmOrderV1: {
        _enum: {
            Noop: 'Null',
            DepositAsset: {
                assets: 'MultiAssetFilterV1',
                maxAssets: 'u32',
                beneficiary: 'MultiLocationV1'
            },
            DepositReserveAsset: {
                assets: 'MultiAssetFilterV1',
                maxAssets: 'u32',
                dest: 'MultiLocationV1',
                effects: 'Vec<XcmOrderV1>'
            },
            ExchangeAsset: {
                give: 'MultiAssetFilterV1',
                receive: 'MultiAssetsV1'
            },
            InitiateReserveWithdraw: {
                assets: 'MultiAssetFilterV1',
                reserve: 'MultiLocationV1',
                effects: 'Vec<XcmOrderV1>'
            },
            InitiateTeleport: {
                assets: 'MultiAssetFilterV1',
                dest: 'MultiLocationV1',
                effects: 'Vec<XcmOrderV1>'
            },
            QueryHolding: {
                queryId: 'Compact<u64>',
                dest: 'MultiLocationV1',
                assets: 'MultiAssetFilterV1'
            },
            BuyExecution: {
                fees: 'MultiAssetV1',
                weight: 'u64',
                debt: 'u64',
                haltOnError: 'bool',
                instructions: 'Vec<XcmV1>'
            }
        }
    }
};

const v2 = {
    AssetInstanceV2: 'AssetInstanceV1',
    FungibilityV2: 'FungibilityV1',
    JunctionV2: 'JunctionV1',
    JunctionsV2: 'JunctionsV1',
    MultiAssetsV2: 'MultiAssetsV1',
    MultiAssetV2: 'MultiAssetV1',
    MultiAssetFilterV2: 'MultiAssetFilterV1',
    MultiLocationV2: 'MultiLocationV1',
    OriginKindV2: 'OriginKindV1',
    WildFungibilityV2: 'WildFungibilityV1',
    ResponseV2: {
        _enum: {
            Null: 'Null',
            Assets: 'MultiAssetsV2',
            ExecutionResult: 'ResponseV2Result'
        }
    },
    ResponseV2Error: '(u32, XcmErrorV2)',
    ResponseV2Result: 'Result<Null, ResponseV2Error>',
    WeightLimitV2: {
        _enum: {
            Unlimited: 'Null',
            Limited: 'Compact<u64>'
        }
    },
    InstructionV2: {
        _enum: {
            WithdrawAsset: 'MultiAssetsV2',
            ReserveAssetDeposited: 'MultiAssetsV2',
            ReceiveTeleportedAsset: 'MultiAssetsV2',
            QueryResponse: {
                queryId: 'Compact<u64>',
                response: 'ResponseV2',
                maxWeight: 'Compact<u64>'
            },
            TransferAsset: {
                assets: 'MultiAssetsV2',
                beneficiary: 'MultiLocationV2'
            },
            TransferReserveAsset: {
                assets: 'MultiAssetsV2',
                dest: 'MultiLocationV2',
                xcm: 'XcmV2'
            },
            Transact: {
                originType: 'OriginKindV2',
                requireWeightAtMost: 'u64',
                call: 'DoubleEncodedCall'
            },
            HrmpNewChannelOpenRequest: {
                sender: 'Compact<u32>',
                maxMessageSize: 'Compact<u32>',
                maxCapacity: 'Compact<u32>'
            },
            HrmpChannelAccepted: {
                recipient: 'Compact<u32>'
            },
            HrmpChannelClosing: {
                initiator: 'Compact<u32>',
                sender: 'Compact<u32>',
                recipient: 'Compact<u32>'
            },
            ClearOrigin: 'Null',
            DescendOrigin: 'InteriorMultiLocation',
            ReportError: {
                queryId: 'Compact<u64>',
                dest: 'MultiLocationV2',
                maxResponseWeight: 'Compact<u64>'
            },
            DepositAsset: {
                assets: 'MultiAssetFilterV2',
                maxAssets: 'u32',
                beneficiary: 'MultiLocationV2'
            },
            DepositReserveAsset: {
                assets: 'MultiAssetFilterV2',
                maxAssets: 'u32',
                dest: 'MultiLocationV2',
                xcm: 'XcmV2'
            },
            ExchangeAsset: {
                give: 'MultiAssetFilterV2',
                receive: 'MultiAssetsV2'
            },
            InitiateReserveWithdraw: {
                assets: 'MultiAssetFilterV2',
                reserve: 'MultiLocationV2',
                xcm: 'XcmV2'
            },
            InitiateTeleport: {
                assets: 'MultiAssetFilterV2',
                dest: 'MultiLocationV2',
                xcm: 'XcmV2'
            },
            QueryHolding: {
                query_id: 'Compact<u64>',
                dest: 'MultiLocationV2',
                assets: 'MultiAssetFilterV2',
                maxResponse_Weight: 'Compact<u64>'
            },
            BuyExecution: {
                fees: 'MultiAssetV2',
                weightLimit: 'WeightLimitV2'
            },
            RefundSurplus: 'Null',
            SetErrorHandler: 'XcmV2',
            SetAppendix: 'XcmV2',
            ClearError: 'Null',
            ClaimAsset: {
                assets: 'MultiAssetsV2',
                ticket: 'MultiLocationV2'
            },
            Trap: 'u64'
        }
    },
    WildMultiAssetV2: 'WildMultiAssetV1',
    XcmV2: 'Vec<InstructionV2>',
    XcmErrorV2: {
        _enum: {
            Undefined: 'Null',
            Overflow: 'Null',
            Unimplemented: 'Null',
            UnhandledXcmVersion: 'Null',
            UnhandledXcmMessage: 'Null',
            UnhandledEffect: 'Null',
            EscalationOfPrivilege: 'Null',
            UntrustedReserveLocation: 'Null',
            UntrustedTeleportLocation: 'Null',
            DestinationBufferOverflow: 'Null',
            MultiLocationFull: 'Null',
            MultiLocationNotInvertible: 'Null',
            FailedToDecode: 'Null',
            BadOrigin: 'Null',
            ExceedsMaxMessageSize: 'Null',
            FailedToTransactAsset: 'Null',
            WeightLimitReached: 'Weight',
            Wildcard: 'Null',
            TooMuchWeightRequired: 'Null',
            NotHoldingFees: 'Null',
            WeightNotComputable: 'Null',
            Barrier: 'Null',
            NotWithdrawable: 'Null',
            LocationCannotHold: 'Null',
            TooExpensive: 'Null',
            AssetNotFound: 'Null',
            DestinationUnsupported: 'Null',
            RecursionLimitReached: 'Null',
            Transport: 'Null',
            Unroutable: 'Null',
            UnknownWeightRequired: 'Null',
            Trap: 'u64',
            UnknownClaim: 'Null',
            InvalidLocation: 'Null'
        }
    },
    XcmOrderV2: 'XcmOrderV1'
};

const XCM_LATEST = 'V2';
const xcm = {
    XcmOrigin: {
        _enum: {
            Xcm: 'MultiLocation'
        }
    },
    XcmpMessageFormat: {
        _enum: ['ConcatenatedVersionedXcm', 'ConcatenatedEncodedBlob', 'Signals']
    },
    XcmAssetId: {
        _enum: {
            Concrete: 'MultiLocation',
            Abstract: 'Bytes'
        }
    },
    InboundStatus: {
        _enum: ['Ok', 'Suspended']
    },
    OutboundStatus: {
        _enum: ['Ok', 'Suspended']
    },
    MultiAssets: 'Vec<MultiAsset>'
};
const location = {
    BodyId: {
        _enum: {
            Unit: 'Null',
            Named: 'Vec<u8>',
            Index: 'Compact<u32>',
            Executive: 'Null',
            Technical: 'Null',
            Legislative: 'Null',
            Judicial: 'Null'
        }
    },
    BodyPart: {
        _enum: {
            Voice: 'Null',
            Members: 'Compact<u32>',
            Fraction: {
                nom: 'Compact<u32>',
                denom: 'Compact<u32>'
            },
            AtLeastProportion: {
                nom: 'Compact<u32>',
                denom: 'Compact<u32>'
            },
            MoreThanProportion: {
                nom: 'Compact<u32>',
                denom: 'Compact<u32>'
            }
        }
    },
    InteriorMultiLocation: 'Junctions',
    NetworkId: {
        _enum: {
            Any: 'Null',
            Named: 'Vec<u8>',
            Polkadot: 'Null',
            Kusama: 'Null'
        }
    }
};
var definitions$c = {
    rpc: {},
    types: objectSpread({}, location, xcm, v0, v1, v2, mapXcmTypes(XCM_LATEST), {
        DoubleEncodedCall: {
            encoded: 'Vec<u8>'
        },
        XcmOriginKind: {
            _enum: ['Native', 'SovereignAccount', 'Superuser', 'Xcm']
        },
        Outcome: {
            _enum: {
                Complete: 'Weight',
                Incomplete: '(Weight, XcmErrorV0)',
                Error: 'XcmErrorV0'
            }
        },
        QueryId: 'u64',
        QueryStatus: {
            _enum: {
                Pending: {
                    responder: 'VersionedMultiLocation',
                    maybeNotify: 'Option<(u8, u8)>',
                    timeout: 'BlockNumber'
                },
                Ready: {
                    response: 'VersionedResponse',
                    at: 'BlockNumber'
                }
            }
        },
        QueueConfigData: {
            suspendThreshold: 'u32',
            dropThreshold: 'u32',
            resumeThreshold: 'u32',
            thresholdWeight: 'Weight',
            weightRestrictDecay: 'Weight'
        },
        VersionMigrationStage: {
            _enum: {
                MigrateSupportedVersion: 'Null',
                MigrateVersionNotifiers: 'Null',
                NotifyCurrentTargets: 'Option<Bytes>',
                MigrateAndNotifyOldTargets: 'Null'
            }
        },
        VersionedMultiAsset: {
            _enum: {
                V0: 'MultiAssetV0',
                V1: 'MultiAssetV1',
                V2: 'MultiAssetV2'
            }
        },
        VersionedMultiAssets: {
            _enum: {
                V0: 'Vec<MultiAssetV0>',
                V1: 'MultiAssetsV1',
                V2: 'MultiAssetsV2'
            }
        },
        VersionedMultiLocation: {
            _enum: {
                V0: 'MultiLocationV0',
                V1: 'MultiLocationV1',
                V2: 'MultiLocationV2'
            }
        },
        VersionedResponse: {
            V0: 'ResponseV0',
            V1: 'ResponseV1',
            V2: 'ResponseV2'
        },
        VersionedXcm: {
            _enum: {
                V0: 'XcmV0',
                V1: 'XcmV1',
                V2: 'XcmV2'
            }
        },
        XcmVersion: 'u32'
    })
};

/* eslint-disable sort-keys */
const layout = {
    ContractCryptoHasher: {
        _enum: ['Blake2x256', 'Sha2x256', 'Keccak256']
    },
    ContractDiscriminant: 'u32',
    ContractLayoutArray: {
        offset: 'ContractLayoutKey',
        len: 'u32',
        cellsPerElem: 'u64',
        layout: 'ContractStorageLayout'
    },
    ContractLayoutCell: {
        key: 'ContractLayoutKey',
        ty: 'SiLookupTypeId'
    },
    ContractLayoutEnum: {
        dispatchKey: 'ContractLayoutKey',
        variants: 'BTreeMap<ContractDiscriminant, ContractLayoutStruct>'
    },
    ContractLayoutHash: {
        offset: 'ContractLayoutKey',
        strategy: 'ContractLayoutHashingStrategy',
        layout: 'ContractStorageLayout'
    },
    ContractLayoutHashingStrategy: {
        hasher: 'ContractCryptoHasher',
        postfix: 'Vec<u8>',
        prefix: 'Vec<u8>'
    },
    ContractLayoutKey: '[u8; 32]',
    ContractLayoutStruct: {
        fields: 'Vec<ContractLayoutStructField>'
    },
    ContractLayoutStructField: {
        layout: 'ContractStorageLayout',
        name: 'Text'
    },
    ContractStorageLayout: {
        _enum: {
            Cell: 'ContractLayoutCell',
            Hash: 'ContractLayoutHash',
            Array: 'ContractLayoutArray',
            Struct: 'ContractLayoutStruct',
            Enum: 'ContractLayoutEnum'
        }
    }
};
const spec = {
    ContractConstructorSpecV0: {
        name: 'Text',
        selector: 'ContractSelector',
        args: 'Vec<ContractMessageParamSpecV0>',
        docs: 'Vec<Text>'
    },
    ContractConstructorSpecV1: {
        name: 'Vec<Text>',
        selector: 'ContractSelector',
        args: 'Vec<ContractMessageParamSpecV0>',
        docs: 'Vec<Text>'
    },
    ContractConstructorSpecV2: {
        label: 'Text',
        selector: 'ContractSelector',
        args: 'Vec<ContractMessageParamSpecV2>',
        docs: 'Vec<Text>'
    },
    ContractConstructorSpecV3: {
        label: 'Text',
        selector: 'ContractSelector',
        payable: 'bool',
        args: 'Vec<ContractMessageParamSpecV2>',
        docs: 'Vec<Text>'
    },
    ContractContractSpecV0: {
        constructors: 'Vec<ContractConstructorSpecV0>',
        messages: 'Vec<ContractMessageSpecV0>',
        events: 'Vec<ContractEventSpecV0>',
        docs: 'Vec<Text>'
    },
    ContractContractSpecV1: {
        constructors: 'Vec<ContractConstructorSpecV1>',
        messages: 'Vec<ContractMessageSpecV1>',
        events: 'Vec<ContractEventSpecV1>',
        docs: 'Vec<Text>'
    },
    ContractContractSpecV2: {
        constructors: 'Vec<ContractConstructorSpecV2>',
        messages: 'Vec<ContractMessageSpecV2>',
        events: 'Vec<ContractEventSpecV2>',
        docs: 'Vec<Text>'
    },
    ContractContractSpecV3: {
        constructors: 'Vec<ContractConstructorSpecV3>',
        messages: 'Vec<ContractMessageSpecV2>',
        events: 'Vec<ContractEventSpecV2>',
        docs: 'Vec<Text>'
    },
    ContractContractSpecV4: 'ContractContractSpecV3',
    ContractDisplayName: 'SiPath',
    ContractEventParamSpecV0: {
        name: 'Text',
        indexed: 'bool',
        type: 'ContractTypeSpec',
        docs: 'Vec<Text>'
    },
    ContractEventParamSpecV2: {
        label: 'Text',
        indexed: 'bool',
        type: 'ContractTypeSpec',
        docs: 'Vec<Text>'
    },
    ContractEventSpecV0: {
        name: 'Text',
        args: 'Vec<ContractEventParamSpecV0>',
        docs: 'Vec<Text>'
    },
    ContractEventSpecV1: {
        name: 'Text',
        args: 'Vec<ContractEventParamSpecV0>',
        docs: 'Vec<Text>'
    },
    ContractEventSpecV2: {
        label: 'Text',
        args: 'Vec<ContractEventParamSpecV2>',
        docs: 'Vec<Text>'
    },
    ContractMessageParamSpecV0: {
        name: 'Text',
        type: 'ContractTypeSpec'
    },
    ContractMessageParamSpecV2: {
        label: 'Text',
        type: 'ContractTypeSpec'
    },
    ContractMessageSpecV0: {
        name: 'Text',
        selector: 'ContractSelector',
        mutates: 'bool',
        payable: 'bool',
        args: 'Vec<ContractMessageParamSpecV0>',
        returnType: 'Option<ContractTypeSpec>',
        docs: 'Vec<Text>'
    },
    ContractMessageSpecV1: {
        name: 'Vec<Text>',
        selector: 'ContractSelector',
        mutates: 'bool',
        payable: 'bool',
        args: 'Vec<ContractMessageParamSpecV0>',
        returnType: 'Option<ContractTypeSpec>',
        docs: 'Vec<Text>'
    },
    ContractMessageSpecV2: {
        label: 'Text',
        selector: 'ContractSelector',
        mutates: 'bool',
        payable: 'bool',
        args: 'Vec<ContractMessageParamSpecV2>',
        returnType: 'Option<ContractTypeSpec>',
        docs: 'Vec<Text>'
    },
    ContractSelector: '[u8; 4]',
    ContractTypeSpec: {
        type: 'SiLookupTypeId',
        displayName: 'ContractDisplayName'
    }
};
const ContractMetadataV0 = {
    metadataVersion: 'Text',
    types: 'Vec<Si0Type>',
    spec: 'ContractContractSpecV0'
};
const ContractMetadataV1 = {
    types: 'Vec<PortableType>',
    spec: 'ContractContractSpecV1'
};
const ContractMetadataV2 = {
    types: 'Vec<PortableType>',
    spec: 'ContractContractSpecV2'
};
const ContractMetadataV3 = {
    types: 'Vec<PortableType>',
    spec: 'ContractContractSpecV3'
};
const ContractMetadataV4 = ContractMetadataV3;
const ContractProjectInfo = {
    source: 'ContractProjectSource',
    contract: 'ContractProjectContract'
};
const latest = {
    ContractConstructorSpecLatest: 'ContractConstructorSpecV3',
    ContractEventSpecLatest: 'ContractEventSpecV2',
    ContractEventParamSpecLatest: 'ContractEventParamSpecV2',
    ContractMessageParamSpecLatest: 'ContractMessageParamSpecV2',
    ContractMessageSpecLatest: 'ContractMessageSpecV2',
    ContractMetadataLatest: 'ContractMetadataV4'
};
var definitions$b = {
    rpc: {},
    types: objectSpread({}, layout, spec, latest, {
        ContractProjectInfo,
        ContractMetadataV0,
        ContractMetadataV1,
        ContractMetadataV2,
        ContractMetadataV3,
        ContractMetadataV4,
        ContractMetadata: {
            _enum: {
                V0: 'ContractMetadataV0',
                V1: 'ContractMetadataV1',
                V2: 'ContractMetadataV2',
                V3: 'ContractMetadataV3',
                V4: 'ContractMetadataV4'
            }
        },
        ContractProjectV0: objectSpread({ metadataVersion: 'Text' }, ContractProjectInfo, ContractMetadataV0),
        ContractProject: '(ContractProjectInfo, ContractMetadata)',
        ContractProjectContract: {
            _alias: {
                docs: 'documentation'
            },
            name: 'Text',
            version: 'Text',
            authors: 'Vec<Text>',
            description: 'Option<Text>',
            docs: 'Option<Text>',
            repository: 'Option<Text>',
            homepage: 'Option<Text>',
            license: 'Option<Text>'
        },
        ContractProjectSource: {
            _alias: {
                wasmHash: 'hash'
            },
            wasmHash: '[u8; 32]',
            language: 'Text',
            compiler: 'Text',
            wasm: 'Raw'
        }
    })
};

const netRpc = {
    listening: {
        aliasSection: 'net',
        description: 'Returns true if client is actively listening for network connections. Otherwise false.',
        params: [],
        type: 'bool'
    },
    peerCount: {
        aliasSection: 'net',
        description: 'Returns number of peers connected to node.',
        params: [],
        type: 'Text'
    },
    version: {
        aliasSection: 'net',
        description: 'Returns protocol version.',
        params: [],
        type: 'Text'
    }
};
const web3Rpc = {
    clientVersion: {
        aliasSection: 'web3',
        description: 'Returns current client version.',
        params: [],
        type: 'Text'
    },
    sha3: {
        aliasSection: 'web3',
        description: 'Returns sha3 of the given data',
        params: [{ name: 'data', type: 'Bytes' }],
        type: 'H256'
    }
};
const rpc$7 = objectSpread({}, netRpc, web3Rpc, {
    accounts: {
        description: 'Returns accounts list.',
        params: [],
        type: 'Vec<H160>'
    },
    blockNumber: {
        description: 'Returns the blockNumber',
        params: [],
        type: 'U256'
    },
    call: {
        description: 'Call contract, returning the output data.',
        params: [
            {
                name: 'request',
                type: 'EthCallRequest'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'number',
                type: 'BlockNumber'
            }
        ],
        type: 'Bytes'
    },
    chainId: {
        description: 'Returns the chain ID used for transaction signing at the current best block. None is returned if not available.',
        params: [],
        type: 'U64'
    },
    coinbase: {
        description: 'Returns block author.',
        params: [],
        type: 'H160'
    },
    estimateGas: {
        description: 'Estimate gas needed for execution of given contract.',
        params: [
            {
                name: 'request',
                type: 'EthCallRequest'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'number',
                type: 'BlockNumber'
            }
        ],
        type: 'U256'
    },
    feeHistory: {
        description: 'Returns fee history for given block count & reward percentiles',
        params: [
            {
                name: 'blockCount',
                type: 'U256'
            },
            {
                name: 'newestBlock',
                type: 'BlockNumber'
            },
            {
                name: 'rewardPercentiles',
                type: 'Option<Vec<f64>>'
            }
        ],
        type: 'EthFeeHistory'
    },
    gasPrice: {
        description: 'Returns current gas price.',
        params: [],
        type: 'U256'
    },
    getBalance: {
        description: 'Returns balance of the given account.',
        params: [
            {
                name: 'address',
                type: 'H160'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'number',
                type: 'BlockNumber'
            }
        ],
        type: 'U256'
    },
    getBlockByHash: {
        description: 'Returns block with given hash.',
        params: [
            {
                name: 'hash',
                type: 'H256'
            },
            {
                name: 'full',
                type: 'bool'
            }
        ],
        type: 'Option<EthRichBlock>'
    },
    getBlockByNumber: {
        description: 'Returns block with given number.',
        params: [
            {
                name: 'block',
                type: 'BlockNumber'
            },
            { name: 'full', type: 'bool' }
        ],
        type: 'Option<EthRichBlock>'
    },
    getBlockTransactionCountByHash: {
        description: 'Returns the number of transactions in a block with given hash.',
        params: [
            {
                name: 'hash',
                type: 'H256'
            }
        ],
        type: 'U256'
    },
    getBlockTransactionCountByNumber: {
        description: 'Returns the number of transactions in a block with given block number.',
        params: [
            {
                name: 'block',
                type: 'BlockNumber'
            }
        ],
        type: 'U256'
    },
    getCode: {
        description: 'Returns the code at given address at given time (block number).',
        params: [
            {
                name: 'address',
                type: 'H160'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'number',
                type: 'BlockNumber'
            }
        ],
        type: 'Bytes'
    },
    getFilterChanges: {
        description: 'Returns filter changes since last poll.',
        params: [
            {
                name: 'index',
                type: 'U256'
            }
        ],
        type: 'EthFilterChanges'
    },
    getFilterLogs: {
        description: 'Returns all logs matching given filter (in a range \'from\' - \'to\').',
        params: [
            {
                name: 'index',
                type: 'U256'
            }
        ],
        type: 'Vec<EthLog>'
    },
    getLogs: {
        description: 'Returns logs matching given filter object.',
        params: [
            {
                name: 'filter',
                type: 'EthFilter'
            }
        ],
        type: 'Vec<EthLog>'
    },
    getProof: {
        description: 'Returns proof for account and storage.',
        params: [
            {
                name: 'address',
                type: 'H160'
            },
            {
                name: 'storageKeys',
                type: 'Vec<H256>'
            },
            {
                name: 'number',
                type: 'BlockNumber'
            }
        ],
        type: 'EthAccount'
    },
    getStorageAt: {
        description: 'Returns content of the storage at given address.',
        params: [
            {
                name: 'address',
                type: 'H160'
            },
            {
                name: 'index',
                type: 'U256'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'number',
                type: 'BlockNumber'
            }
        ],
        type: 'H256'
    },
    getTransactionByBlockHashAndIndex: {
        description: 'Returns transaction at given block hash and index.',
        params: [
            {
                name: 'hash',
                type: 'H256'
            },
            {
                name: 'index',
                type: 'U256'
            }
        ],
        type: 'EthTransaction'
    },
    getTransactionByBlockNumberAndIndex: {
        description: 'Returns transaction by given block number and index.',
        params: [
            {
                name: 'number',
                type: 'BlockNumber'
            },
            {
                name: 'index',
                type: 'U256'
            }
        ],
        type: 'EthTransaction'
    },
    getTransactionByHash: {
        description: 'Get transaction by its hash.',
        params: [
            {
                name: 'hash',
                type: 'H256'
            }
        ],
        type: 'EthTransaction'
    },
    getTransactionCount: {
        description: 'Returns the number of transactions sent from given address at given time (block number).',
        params: [
            {
                name: 'address',
                type: 'H160'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'number',
                type: 'BlockNumber'
            }
        ],
        type: 'U256'
    },
    getTransactionReceipt: {
        description: 'Returns transaction receipt by transaction hash.',
        params: [
            {
                name: 'hash',
                type: 'H256'
            }
        ],
        type: 'EthReceipt'
    },
    getUncleByBlockHashAndIndex: {
        description: 'Returns an uncles at given block and index.',
        params: [
            {
                name: 'hash',
                type: 'H256'
            },
            {
                name: 'index',
                type: 'U256'
            }
        ],
        type: 'EthRichBlock'
    },
    getUncleByBlockNumberAndIndex: {
        description: 'Returns an uncles at given block and index.',
        params: [
            {
                name: 'number',
                type: 'BlockNumber'
            },
            {
                name: 'index',
                type: 'U256'
            }
        ],
        type: 'EthRichBlock'
    },
    getUncleCountByBlockHash: {
        description: 'Returns the number of uncles in a block with given hash.',
        params: [
            {
                name: 'hash',
                type: 'H256'
            }
        ],
        type: 'U256'
    },
    getUncleCountByBlockNumber: {
        description: 'Returns the number of uncles in a block with given block number.',
        params: [
            {
                name: 'number',
                type: 'BlockNumber'
            }
        ],
        type: 'U256'
    },
    getWork: {
        description: 'Returns the hash of the current block, the seedHash, and the boundary condition to be met.',
        params: [],
        type: 'EthWork'
    },
    hashrate: {
        description: 'Returns the number of hashes per second that the node is mining with.',
        params: [],
        type: 'U256'
    },
    maxPriorityFeePerGas: {
        description: 'Returns max priority fee per gas',
        params: [],
        type: 'U256'
    },
    mining: {
        description: 'Returns true if client is actively mining new blocks.',
        params: [],
        type: 'bool'
    },
    newBlockFilter: {
        description: 'Returns id of new block filter.',
        params: [],
        type: 'U256'
    },
    newFilter: {
        description: 'Returns id of new filter.',
        params: [
            {
                name: 'filter',
                type: 'EthFilter'
            }
        ],
        type: 'U256'
    },
    newPendingTransactionFilter: {
        description: 'Returns id of new block filter.',
        params: [],
        type: 'U256'
    },
    protocolVersion: {
        description: 'Returns protocol version encoded as a string (quotes are necessary).',
        params: [],
        type: 'u64'
    },
    sendRawTransaction: {
        description: 'Sends signed transaction, returning its hash.',
        params: [
            {
                name: 'bytes',
                type: 'Bytes'
            }
        ],
        type: 'H256'
    },
    sendTransaction: {
        description: 'Sends transaction; will block waiting for signer to return the transaction hash',
        params: [
            {
                name: 'tx',
                type: 'EthTransactionRequest'
            }
        ],
        type: 'H256'
    },
    submitHashrate: {
        description: 'Used for submitting mining hashrate.',
        params: [
            {
                name: 'index',
                type: 'U256'
            },
            {
                name: 'hash',
                type: 'H256'
            }
        ],
        type: 'bool'
    },
    submitWork: {
        description: 'Used for submitting a proof-of-work solution.',
        params: [
            {
                name: 'nonce',
                type: 'H64'
            },
            {
                name: 'headerHash',
                type: 'H256'
            },
            {
                name: 'mixDigest',
                type: 'H256'
            }
        ],
        type: 'bool'
    },
    subscribe: {
        description: 'Subscribe to Eth subscription.',
        params: [
            { name: 'kind', type: 'EthSubKind' },
            {
                isOptional: true,
                name: 'params',
                type: 'EthSubParams'
            }
        ],
        pubsub: [
            'subscription',
            'subscribe',
            'unsubscribe'
        ],
        type: 'Null'
    },
    syncing: {
        description: 'Returns an object with data about the sync status or false.',
        params: [],
        type: 'EthSyncStatus'
    },
    uninstallFilter: {
        description: 'Uninstalls filter.',
        params: [
            {
                name: 'index',
                type: 'U256'
            }
        ],
        type: 'bool'
    }
});

const runtime$5 = {
    ConvertTransactionRuntimeApi: [
        {
            methods: {
                convert_transaction: {
                    description: 'Converts an Ethereum-style transaction to Extrinsic',
                    params: [
                        {
                            name: 'transaction',
                            type: 'TransactionV2'
                        }
                    ],
                    type: 'Extrinsic'
                }
            },
            version: 2
        }
    ],
    DebugRuntimeApi: [
        {
            methods: {
                trace_block: {
                    description: 'Trace all block extrinsics',
                    params: [
                        {
                            name: 'extrinsics',
                            type: 'Vec<Extrinsic>'
                        },
                        {
                            name: 'knownTransactions',
                            type: 'Vec<H256>'
                        }
                    ],
                    type: 'Result<(), DispatchError>'
                },
                trace_transaction: {
                    description: 'Trace transaction extrinsics',
                    params: [
                        {
                            name: 'extrinsics',
                            type: 'Vec<Extrinsic>'
                        },
                        {
                            name: 'transaction',
                            type: 'EthTransaction'
                        }
                    ],
                    type: 'Result<(), DispatchError>'
                }
            },
            version: 4
        }
    ],
    EthereumRuntimeRPCApi: [
        {
            methods: {
                account_basic: {
                    description: 'Returns pallet_evm::Accounts by address.',
                    params: [
                        {
                            name: 'address',
                            type: 'H160'
                        }
                    ],
                    type: 'EvmAccount'
                },
                account_code_at: {
                    description: 'For a given account address, returns pallet_evm::AccountCodes.',
                    params: [
                        {
                            name: 'address',
                            type: 'H160'
                        }
                    ],
                    type: 'Bytes'
                },
                author: {
                    description: 'Returns the converted FindAuthor::find_author authority id.',
                    params: [],
                    type: 'H160'
                },
                call: {
                    description: 'Returns a frame_ethereum::call response. If `estimate` is true,',
                    params: [
                        {
                            name: 'from',
                            type: 'H160'
                        },
                        {
                            name: 'to',
                            type: 'H160'
                        },
                        {
                            name: 'data',
                            type: 'Vec<u8>'
                        },
                        {
                            name: 'value',
                            type: 'U256'
                        },
                        {
                            name: 'gasLimit',
                            type: 'U256'
                        },
                        {
                            name: 'maxFeePerGas',
                            type: 'Option<U256>'
                        },
                        {
                            name: 'maxPriorityFeePerGas',
                            type: 'Option<U256>'
                        },
                        {
                            name: 'nonce',
                            type: 'Option<U256>'
                        },
                        {
                            name: 'estimate',
                            type: 'bool'
                        },
                        {
                            name: 'accessList',
                            type: 'Option<Vec<(H160, Vec<H256>)>>'
                        }
                    ],
                    type: 'Result<EvmCallInfo, DispatchError>'
                },
                chain_id: {
                    description: 'Returns runtime defined pallet_evm::ChainId.',
                    params: [],
                    type: 'u64'
                },
                create: {
                    description: 'Returns a frame_ethereum::call response. If `estimate` is true,',
                    params: [
                        {
                            name: 'from',
                            type: 'H160'
                        },
                        {
                            name: 'data',
                            type: 'Vec<u8>'
                        },
                        {
                            name: 'value',
                            type: 'U256'
                        },
                        {
                            name: 'gasLimit',
                            type: 'U256'
                        },
                        {
                            name: 'maxFeePerGas',
                            type: 'Option<U256>'
                        },
                        {
                            name: 'maxPriorityFeePerGas',
                            type: 'Option<U256>'
                        },
                        {
                            name: 'nonce',
                            type: 'Option<U256>'
                        },
                        {
                            name: 'estimate',
                            type: 'bool'
                        },
                        {
                            name: 'accessList',
                            type: 'Option<Vec<(H160, Vec<H256>)>>'
                        }
                    ],
                    type: 'Result<EvmCreateInfo, DispatchError>'
                },
                current_all: {
                    description: 'Return all the current data for a block in a single runtime call.',
                    params: [],
                    type: '(Option<BlockV2>, Option<Vec<EthReceiptV3>>, Option<Vec<EthTransactionStatus>>)'
                },
                current_block: {
                    description: 'Return the current block.',
                    params: [],
                    type: 'BlockV2'
                },
                current_receipts: {
                    description: 'Return the current receipt.',
                    params: [],
                    type: 'Option<Vec<EthReceiptV3>>'
                },
                current_transaction_statuses: {
                    description: 'Return the current transaction status.',
                    params: [],
                    type: 'Option<Vec<EthTransactionStatus>>'
                },
                elasticity: {
                    description: 'Return the elasticity multiplier.',
                    params: [],
                    type: 'Option<Permill>'
                },
                extrinsic_filter: {
                    description: 'Receives a `Vec<OpaqueExtrinsic>` and filters all the ethereum transactions.',
                    params: [
                        {
                            name: 'xts',
                            type: 'Vec<Extrinsic>'
                        }
                    ],
                    type: 'Vec<TransactionV2>'
                },
                gas_price: {
                    description: 'Returns FixedGasPrice::min_gas_price',
                    params: [],
                    type: 'u256'
                },
                storage_at: {
                    description: 'For a given account address and index, returns pallet_evm::AccountStorages.',
                    params: [
                        {
                            name: 'address',
                            type: 'H160'
                        },
                        {
                            name: 'index',
                            type: 'u256'
                        }
                    ],
                    type: 'H256'
                }
            },
            version: 4
        }
    ]
};

const V0 = {
    BlockV0: {
        header: 'EthHeader',
        transactions: 'Vec<TransactionV0>',
        ommers: 'Vec<EthHeader>'
    },
    LegacyTransaction: {
        nonce: 'U256',
        gasPrice: 'U256',
        gasLimit: 'U256',
        action: 'EthTransactionAction',
        value: 'U256',
        input: 'Bytes',
        signature: 'EthTransactionSignature'
    },
    TransactionV0: 'LegacyTransaction'
};
const V1 = {
    BlockV1: {
        header: 'EthHeader',
        transactions: 'Vec<TransactionV1>',
        ommers: 'Vec<EthHeader>'
    },
    EIP2930Transaction: {
        chainId: 'u64',
        nonce: 'U256',
        gasPrice: 'U256',
        gasLimit: 'U256',
        action: 'EthTransactionAction',
        value: 'U256',
        input: 'Bytes',
        accessList: 'EthAccessList',
        oddYParity: 'bool',
        r: 'H256',
        s: 'H256'
    },
    TransactionV1: {
        _enum: {
            Legacy: 'LegacyTransaction',
            EIP2930: 'EIP2930Transaction'
        }
    }
};
const V2 = {
    BlockV2: {
        header: 'EthHeader',
        transactions: 'Vec<TransactionV2>',
        ommers: 'Vec<EthHeader>'
    },
    EIP1559Transaction: {
        chainId: 'u64',
        nonce: 'U256',
        maxPriorityFeePerGas: 'U256',
        maxFeePerGas: 'U256',
        gasLimit: 'U256',
        action: 'EthTransactionAction',
        value: 'U256',
        input: 'Bytes',
        accessList: 'EthAccessList',
        oddYParity: 'bool',
        r: 'H256',
        s: 'H256'
    },
    TransactionV2: {
        _enum: {
            Legacy: 'LegacyTransaction',
            EIP2930: 'EIP2930Transaction',
            EIP1559: 'EIP1559Transaction'
        }
    }
};
const types = objectSpread({}, V0, V1, V2, {
    EthereumAccountId: 'GenericEthereumAccountId',
    EthereumAddress: 'GenericEthereumAccountId',
    EthereumLookupSource: 'GenericEthereumLookupSource',
    EthereumSignature: '[u8; 65]',
    EthAccessListItem: {
        address: 'EthAddress',
        slots: 'Vec<H256>'
    },
    EthAccessList: 'Vec<EthAccessListItem>',
    EthAccount: {
        address: 'EthAddress',
        balance: 'U256',
        nonce: 'U256',
        codeHash: 'H256',
        storageHash: 'H256',
        accountProof: 'Vec<Bytes>',
        storageProof: 'Vec<EthStorageProof>'
    },
    EthAddress: 'H160',
    EthBlock: {
        header: 'EthHeader',
        transactions: 'Vec<EthTransaction>',
        ommers: 'Vec<EthHeader>'
    },
    EthHeader: {
        parentHash: 'H256',
        ommersHash: 'H256',
        beneficiary: 'EthAddress',
        stateRoot: 'H256',
        transactionsRoot: 'H256',
        receiptsRoot: 'H256',
        logsBloom: 'EthBloom',
        difficulty: 'U256',
        number: 'U256',
        gasLimit: 'U256',
        gasUsed: 'U256',
        timestamp: 'u64',
        extraData: 'Bytes',
        mixMash: 'H256',
        nonce: 'H64'
    },
    EthRichBlock: {
        _alias: {
            blockHash: 'hash',
            blockSize: 'size'
        },
        blockHash: 'Option<H256>',
        parentHash: 'H256',
        sha3Uncles: 'H256',
        author: 'EthAddress',
        miner: 'EthAddress',
        stateRoot: 'H256',
        transactionsRoot: 'H256',
        receiptsRoot: 'H256',
        number: 'Option<U256>',
        gasUsed: 'U256',
        gasLimit: 'U256',
        extraData: 'Bytes',
        logsBloom: 'EthBloom',
        timestamp: 'U256',
        difficulty: 'U256',
        totalDifficulty: 'Option<U256>',
        sealFields: 'Vec<Bytes>',
        uncles: 'Vec<H256>',
        transactions: 'Vec<EthTransaction>',
        blockSize: 'Option<U256>'
    },
    EthBloom: 'H2048',
    EthCallRequest: {
        from: 'Option<EthAddress>',
        to: 'Option<EthAddress>',
        gasPrice: 'Option<U256>',
        gas: 'Option<U256>',
        value: 'Option<U256>',
        data: 'Option<Bytes>',
        nonce: 'Option<U256>'
    },
    EthFeeHistory: {
        oldestBlock: 'U256',
        baseFeePerGas: 'Vec<U256>',
        gasUsedRatio: 'Vec<f64>',
        reward: 'Option<Vec<Vec<U256>>>'
    },
    EthFilter: {
        fromBlock: 'Option<BlockNumber>',
        toBlock: 'Option<BlockNumber>',
        blockHash: 'Option<H256>',
        address: 'Option<EthFilterAddress>',
        topics: 'Option<EthFilterTopic>'
    },
    EthFilterAddress: {
        _enum: {
            Single: 'EthAddress',
            Multiple: 'Vec<EthAddress>',
            Null: 'Null'
        }
    },
    EthFilterChanges: {
        _enum: {
            Logs: 'Vec<EthLog>',
            Hashes: 'Vec<H256>',
            Empty: 'Null'
        }
    },
    EthFilterTopic: {
        _enum: {
            Single: 'EthFilterTopicInner',
            Multiple: 'Vec<EthFilterTopicInner>',
            Null: 'Null'
        }
    },
    EthFilterTopicEntry: 'Option<H256>',
    EthFilterTopicInner: {
        _enum: {
            Single: 'EthFilterTopicEntry',
            Multiple: 'Vec<EthFilterTopicEntry>',
            Null: 'Null'
        }
    },
    EthRichHeader: {
        _alias: {
            blockHash: 'hash',
            blockSize: 'size'
        },
        blockHash: 'Option<H256>',
        parentHash: 'H256',
        sha3Uncles: 'H256',
        author: 'EthAddress',
        miner: 'EthAddress',
        stateRoot: 'H256',
        transactionsRoot: 'H256',
        receiptsRoot: 'H256',
        number: 'Option<U256>',
        gasUsed: 'U256',
        gasLimit: 'U256',
        extraData: 'Bytes',
        logsBloom: 'EthBloom',
        timestamp: 'U256',
        difficulty: 'U256',
        sealFields: 'Vec<Bytes>',
        blockSize: 'Option<U256>'
    },
    EthLog: {
        address: 'EthAddress',
        topics: 'Vec<H256>',
        data: 'Bytes',
        blockHash: 'Option<H256>',
        blockNumber: 'Option<U256>',
        transactionHash: 'Option<H256>',
        transactionIndex: 'Option<U256>',
        logIndex: 'Option<U256>',
        transactionLogIndex: 'Option<U256>',
        removed: 'bool'
    },
    EthReceipt: {
        transactionHash: 'Option<H256>',
        transactionIndex: 'Option<U256>',
        blockHash: 'Option<H256>',
        from: 'Option<EthAddress>',
        to: 'Option<EthAddress>',
        blockNumber: 'Option<U256>',
        cumulativeGasUsed: 'U256',
        gasUsed: 'Option<U256>',
        contractAddress: 'Option<EthAddress>',
        logs: 'Vec<EthLog>',
        root: 'Option<H256>',
        logsBloom: 'EthBloom',
        statusCode: 'Option<U64>'
    },
    // not convinced, however the original commit matches, so... (maybe V3 is incorrect?)
    EthReceiptV0: 'EthReceipt',
    EthReceiptV3: 'EthReceipt',
    EthStorageProof: {
        key: 'U256',
        value: 'U256',
        proof: 'Vec<Bytes>'
    },
    EthSubKind: {
        _enum: ['newHeads', 'logs', 'newPendingTransactions', 'syncing']
    },
    EthSubParams: {
        _enum: {
            None: 'Null',
            Logs: 'EthFilter'
        }
    },
    EthSubResult: {
        _enum: {
            Header: 'EthRichHeader',
            Log: 'EthLog',
            TransactionHash: 'H256',
            SyncState: 'EthSyncStatus'
        }
    },
    EthSyncInfo: {
        startingBlock: 'U256',
        currentBlock: 'U256',
        highestBlock: 'U256',
        warpChunksAmount: 'Option<U256>',
        warpChunksProcessed: 'Option<U256>'
    },
    EthSyncStatus: {
        _enum: {
            Info: 'EthSyncInfo',
            None: 'Null'
        }
    },
    EthTransaction: {
        hash: 'H256',
        nonce: 'U256',
        blockHash: 'Option<H256>',
        blockNumber: 'Option<U256>',
        transactionIndex: 'Option<U256>',
        from: 'H160',
        to: 'Option<H160>',
        value: 'U256',
        gasPrice: 'Option<U256>',
        maxFeePerGas: 'Option<U256>',
        maxPriorityFeePerGas: 'Option<U256>',
        gas: 'U256',
        input: 'Bytes',
        creates: 'Option<H160>',
        raw: 'Bytes',
        publicKey: 'Option<H512>',
        chainId: 'Option<U64>',
        standardV: 'U256',
        v: 'U256',
        r: 'U256',
        s: 'U256',
        accessList: 'Option<Vec<EthAccessListItem>>',
        transactionType: 'Option<U256>'
    },
    EthTransactionSignature: {
        v: 'u64',
        r: 'H256',
        s: 'H256'
    },
    EthTransactionAction: {
        _enum: {
            Call: 'H160',
            Create: 'Null'
        }
    },
    EthTransactionCondition: {
        _enum: {
            block: 'u64',
            time: 'u64'
        }
    },
    EthTransactionRequest: {
        from: 'Option<EthAddress>',
        to: 'Option<EthAddress>',
        gasPrice: 'Option<U256>',
        gas: 'Option<U256>',
        value: 'Option<U256>',
        data: 'Option<Bytes>',
        nonce: 'Option<U256>'
    },
    EthTransactionStatus: {
        transactionHash: 'H256',
        transactionIndex: 'u32',
        from: 'EthAddress',
        to: 'Option<EthAddress>',
        contractAddress: 'Option<EthAddress>',
        logs: 'Vec<EthLog>',
        logsBloom: 'EthBloom'
    },
    EthWork: {
        powHash: 'H256',
        seedHash: 'H256',
        target: 'H256',
        number: 'Option<u64>'
    }
});
var definitions$a = { rpc: rpc$7, runtime: runtime$5, types };

const runtime$4 = {
    // deprecated, the NimbusApi is current - this is for backwards compat
    AuthorFilterAPI: [
        {
            methods: {
                can_author: {
                    description: 'The runtime api used to predict whether an author will be eligible in the given slot',
                    params: [
                        {
                            name: 'author',
                            type: 'AccountId'
                        },
                        {
                            name: 'relayParent',
                            type: 'u32'
                        },
                        {
                            name: 'parentHeader',
                            type: 'Header'
                        }
                    ],
                    type: 'bool'
                }
            },
            version: 2
        },
        {
            methods: {
                can_author: {
                    description: 'The runtime api used to predict whether an author will be eligible in the given slot',
                    params: [
                        {
                            name: 'author',
                            type: 'AccountId'
                        },
                        {
                            name: 'relayParent',
                            type: 'u32'
                        }
                    ],
                    type: 'bool'
                }
            },
            version: 1
        }
    ],
    NimbusApi: [
        {
            methods: {
                can_author: {
                    description: 'The runtime api used to predict whether a Nimbus author will be eligible in the given slot',
                    params: [
                        {
                            name: 'author',
                            type: 'AccountId'
                        },
                        {
                            name: 'relayParent',
                            type: 'u32'
                        },
                        {
                            name: 'parentHeader',
                            type: 'Header'
                        }
                    ],
                    type: 'bool'
                }
            },
            version: 1
        }
    ]
};

var definitions$9 = {
    rpc: {},
    runtime: runtime$4,
    types: {}
};

const runtime$3 = {
    // https://github.com/open-web3-stack/open-runtime-module-library/blob/b57f88b39cd547e2fb51727d8bb9bcc64fddf8b5/oracle/rpc/runtime-api/src/lib.rs#L12-L21
    OracleApi: [
        {
            methods: {
                get_all_values: {
                    description: 'Retrieves all values',
                    params: [
                        {
                            name: 'providerId',
                            // This is a Codec type
                            type: 'Raw'
                        }
                    ],
                    // This won't actually work as expected - since we have
                    // no information about the actual Raw sizes, we cannot
                    // handle it in this format (it would need an override
                    // for the specific Codec). So return the Raw value.
                    // type: 'Vec<(Raw, Option<Raw>)>'
                    type: 'Raw'
                },
                get_value: {
                    description: 'Retrieves a single value',
                    params: [
                        {
                            name: 'providerId',
                            // This is a Codec type
                            type: 'Raw'
                        },
                        {
                            name: 'key',
                            // This is a Codec type
                            type: 'Raw'
                        }
                    ],
                    // This is an Option<Codec> type
                    type: 'Option<Raw>'
                }
            },
            version: 1
        }
    ]
};

var definitions$8 = {
    rpc: {},
    runtime: runtime$3,
    types: {}
};

const runtime$2 = {
    // https://github.com/open-web3-stack/open-runtime-module-library/blob/b57f88b39cd547e2fb51727d8bb9bcc64fddf8b5/tokens/rpc/runtime-api/src/lib.rs#L11-L18
    TokensApi: [
        {
            methods: {
                query_existential_deposit: {
                    description: 'Query the existential amount for a specific currency',
                    params: [
                        {
                            name: 'currencyId',
                            // This is CurrencyId, as per the return value, we are unsure
                            // if this is specialized and/or global to the chain or not
                            type: 'Raw'
                        }
                    ],
                    // This is Balance - since we don't understand enough about the way
                    // in which this is used, we default to u128 here (it certainly could
                    // be a specialized type that doesn't map to the on-chain Balance)
                    type: 'u128'
                }
            },
            version: 1
        }
    ]
};

var definitions$7 = {
    rpc: {},
    runtime: runtime$2,
    types: {}
};

const rpc$6 = {
    methods: {
        description: 'Retrieves the list of RPC methods that are exposed by the node',
        params: [],
        type: 'RpcMethods'
    }
};

var definitions$6 = {
    rpc: rpc$6,
    types: {
        RpcMethods: {
            version: 'u32',
            methods: 'Vec<Text>'
        }
    }
};

const rpc$5 = {
    hasKey: {
        description: 'Returns true if the keystore has private keys for the given public key and key type.',
        isUnsafe: true,
        params: [
            {
                name: 'publicKey',
                type: 'Bytes'
            },
            {
                name: 'keyType',
                type: 'Text'
            }
        ],
        type: 'bool'
    },
    hasSessionKeys: {
        description: 'Returns true if the keystore has private keys for the given session public keys.',
        isUnsafe: true,
        params: [
            {
                name: 'sessionKeys',
                type: 'Bytes'
            }
        ],
        type: 'bool'
    },
    insertKey: {
        description: 'Insert a key into the keystore.',
        isUnsafe: true,
        params: [
            {
                name: 'keyType',
                type: 'Text'
            },
            {
                name: 'suri',
                type: 'Text'
            },
            {
                name: 'publicKey',
                type: 'Bytes'
            }
        ],
        type: 'Bytes'
    },
    pendingExtrinsics: {
        description: 'Returns all pending extrinsics, potentially grouped by sender',
        params: [],
        type: 'Vec<Extrinsic>'
    },
    removeExtrinsic: {
        description: 'Remove given extrinsic from the pool and temporarily ban it to prevent reimporting',
        isUnsafe: true,
        params: [
            {
                name: 'bytesOrHash',
                type: 'Vec<ExtrinsicOrHash>'
            }
        ],
        type: 'Vec<Hash>'
    },
    rotateKeys: {
        description: 'Generate new session keys and returns the corresponding public keys',
        isUnsafe: true,
        params: [],
        type: 'Bytes'
    },
    submitAndWatchExtrinsic: {
        description: 'Submit and subscribe to watch an extrinsic until unsubscribed',
        isSigned: true,
        params: [
            {
                name: 'extrinsic',
                type: 'Extrinsic'
            }
        ],
        pubsub: [
            'extrinsicUpdate',
            'submitAndWatchExtrinsic',
            'unwatchExtrinsic'
        ],
        type: 'ExtrinsicStatus'
    },
    submitExtrinsic: {
        description: 'Submit a fully formatted extrinsic for block inclusion',
        isSigned: true,
        params: [
            {
                name: 'extrinsic',
                type: 'Extrinsic'
            }
        ],
        type: 'Hash'
    }
};

var definitions$5 = {
    rpc: rpc$5,
    types: {
        ExtrinsicOrHash: {
            _enum: {
                Hash: 'Hash',
                Extrinsic: 'Bytes'
            }
        },
        ExtrinsicStatus: {
            _enum: {
                Future: 'Null',
                Ready: 'Null',
                Broadcast: 'Vec<Text>',
                InBlock: 'Hash',
                Retracted: 'Hash',
                FinalityTimeout: 'Hash',
                Finalized: 'Hash',
                Usurped: 'Hash',
                Dropped: 'Null',
                Invalid: 'Null'
            }
        }
    }
};

const rpc$4 = {
    getBlock: {
        description: 'Get header and body of a relay chain block',
        params: [
            {
                isHistoric: true,
                isOptional: true,
                name: 'hash',
                type: 'BlockHash'
            }
        ],
        type: 'SignedBlock'
    },
    getBlockHash: {
        description: 'Get the block hash for a specific block',
        params: [
            {
                isOptional: true,
                name: 'blockNumber',
                type: 'BlockNumber'
            }
        ],
        type: 'BlockHash'
    },
    getFinalizedHead: {
        alias: ['chain_getFinalisedHead'],
        description: 'Get hash of the last finalized block in the canon chain',
        params: [],
        type: 'BlockHash'
    },
    getHeader: {
        alias: ['chain_getHead'],
        description: 'Retrieves the header for a specific block',
        params: [
            {
                isHistoric: true,
                isOptional: true,
                name: 'hash',
                type: 'BlockHash'
            }
        ],
        type: 'Header'
    },
    subscribeAllHeads: {
        description: 'Retrieves the newest header via subscription',
        params: [],
        pubsub: [
            'allHead',
            'subscribeAllHeads',
            'unsubscribeAllHeads'
        ],
        type: 'Header'
    },
    subscribeFinalizedHeads: {
        alias: ['chain_subscribeFinalisedHeads', 'chain_unsubscribeFinalisedHeads'],
        description: 'Retrieves the best finalized header via subscription',
        params: [],
        pubsub: [
            'finalizedHead',
            'subscribeFinalizedHeads',
            'unsubscribeFinalizedHeads'
        ],
        type: 'Header'
    },
    subscribeNewHeads: {
        alias: ['chain_unsubscribeNewHeads', 'subscribe_newHead', 'unsubscribe_newHead'],
        description: 'Retrieves the best header via subscription',
        params: [],
        // NOTE These still has the aliassed version, compatible with 1.x
        pubsub: [
            'newHead',
            'subscribeNewHead',
            'unsubscribeNewHead'
        ],
        type: 'Header'
    }
};

var definitions$4 = {
    rpc: rpc$4,
    types: {
        BlockHash: 'Hash'
    }
};

const rpc$3 = {
    getKeys: {
        description: 'Returns the keys with prefix from a child storage, leave empty to get all the keys',
        params: [
            {
                name: 'childKey',
                type: 'PrefixedStorageKey'
            },
            {
                name: 'prefix',
                type: 'StorageKey'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'Hash'
            }
        ],
        type: 'Vec<StorageKey>'
    },
    getKeysPaged: {
        alias: ['childstate_getKeysPagedAt'],
        description: 'Returns the keys with prefix from a child storage with pagination support',
        params: [
            {
                name: 'childKey',
                type: 'PrefixedStorageKey'
            },
            {
                name: 'prefix',
                type: 'StorageKey'
            },
            {
                name: 'count',
                type: 'u32'
            },
            {
                isOptional: true,
                name: 'startKey',
                type: 'StorageKey'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'Hash'
            }
        ],
        type: 'Vec<StorageKey>'
    },
    getStorage: {
        description: 'Returns a child storage entry at a specific block state',
        params: [
            {
                name: 'childKey',
                type: 'PrefixedStorageKey'
            },
            {
                name: 'key',
                type: 'StorageKey'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'Hash'
            }
        ],
        type: 'Option<StorageData>'
    },
    getStorageEntries: {
        description: 'Returns child storage entries for multiple keys at a specific block state',
        params: [
            {
                name: 'childKey',
                type: 'PrefixedStorageKey'
            },
            {
                name: 'keys',
                type: 'Vec<StorageKey>'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'Hash'
            }
        ],
        type: 'Vec<Option<StorageData>>'
    },
    getStorageHash: {
        description: 'Returns the hash of a child storage entry at a block state',
        params: [
            {
                name: 'childKey',
                type: 'PrefixedStorageKey'
            },
            {
                name: 'key',
                type: 'StorageKey'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'Hash'
            }
        ],
        type: 'Option<Hash>'
    },
    getStorageSize: {
        description: 'Returns the size of a child storage entry at a block state',
        params: [
            {
                name: 'childKey',
                type: 'PrefixedStorageKey'
            },
            {
                name: 'key',
                type: 'StorageKey'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'Hash'
            }
        ],
        type: 'Option<u64>'
    }
};

var definitions$3 = {
    rpc: rpc$3,
    types: {
        // StorageKey extends Bytes
        PrefixedStorageKey: 'StorageKey'
    }
};

const rpc$2 = {
    localStorageGet: {
        description: 'Get offchain local storage under given key and prefix',
        isUnsafe: true,
        params: [
            {
                name: 'kind',
                type: 'StorageKind'
            },
            {
                name: 'key',
                type: 'Bytes'
            }
        ],
        type: 'Option<Bytes>'
    },
    localStorageSet: {
        description: 'Set offchain local storage under given key and prefix',
        isUnsafe: true,
        params: [
            {
                name: 'kind',
                type: 'StorageKind'
            },
            {
                name: 'key',
                type: 'Bytes'
            },
            {
                name: 'value',
                type: 'Bytes'
            }
        ],
        type: 'Null'
    }
};

const runtime$1 = {
    OffchainWorkerApi: [
        {
            methods: {
                offchain_worker: {
                    description: 'Starts the off-chain task for given block header.',
                    params: [
                        {
                            name: 'header',
                            type: 'Header'
                        }
                    ],
                    type: 'Null'
                }
            },
            version: 2
        },
        {
            methods: {
                offchain_worker: {
                    description: 'Starts the off-chain task for given block header.',
                    params: [
                        {
                            name: 'number',
                            type: 'BlockNumber'
                        }
                    ],
                    type: 'Null'
                }
            },
            version: 1
        }
    ]
};

var definitions$2 = {
    rpc: rpc$2,
    runtime: runtime$1,
    types: {
        StorageKind: {
            _enum: {
                PERSISTENT: 1,
                LOCAL: 2
            }
        }
    }
};

const rpc$1 = {
    queryFeeDetails: {
        // NOTE: Not deprecated (yet) in Substrate, but it is the intent to do so
        deprecated: 'Use `api.call.transactionPaymentApi.queryFeeDetails` instead',
        description: 'Query the detailed fee of a given encoded extrinsic',
        params: [
            {
                name: 'extrinsic',
                type: 'Bytes'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'FeeDetails'
    },
    queryInfo: {
        // NOTE: Not deprecated (yet) in Substrate, but it is the intent to do so
        deprecated: 'Use `api.call.transactionPaymentApi.queryInfo` instead',
        description: 'Retrieves the fee information for an encoded extrinsic',
        params: [
            {
                name: 'extrinsic',
                type: 'Bytes'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        // NOTE: Stuck on V1 forever (at least for the time being)
        type: 'RuntimeDispatchInfoV1'
    }
};

const V1_V2_V3_SHARED_PAY = {
    query_fee_details: {
        description: 'The transaction fee details',
        params: [
            {
                name: 'uxt',
                type: 'Extrinsic'
            },
            {
                name: 'len',
                type: 'u32'
            }
        ],
        type: 'FeeDetails'
    }
};
const V1_V2_V3_SHARED_CALL = {
    query_call_fee_details: {
        description: 'The call fee details',
        params: [
            {
                name: 'call',
                type: 'Call'
            },
            {
                name: 'len',
                type: 'u32'
            }
        ],
        type: 'FeeDetails'
    }
};
const V2_V3_SHARED_PAY = {
    query_info: {
        description: 'The transaction info',
        params: [
            {
                name: 'uxt',
                type: 'Extrinsic'
            },
            {
                name: 'len',
                type: 'u32'
            }
        ],
        type: 'RuntimeDispatchInfo'
    }
};
const V2_V3_SHARED_CALL = {
    query_call_info: {
        description: 'The call info',
        params: [
            {
                name: 'call',
                type: 'Call'
            },
            {
                name: 'len',
                type: 'u32'
            }
        ],
        type: 'RuntimeDispatchInfo'
    }
};
const V3_SHARED_PAY_CALL = {
    query_length_to_fee: {
        description: 'Query the output of the current LengthToFee given some input',
        params: [
            {
                name: 'length',
                type: 'u32'
            }
        ],
        type: 'Balance'
    },
    query_weight_to_fee: {
        description: 'Query the output of the current WeightToFee given some input',
        params: [
            {
                name: 'weight',
                type: 'Weight'
            }
        ],
        type: 'Balance'
    }
};
const runtime = {
    TransactionPaymentApi: [
        {
            methods: objectSpread({}, V3_SHARED_PAY_CALL, V2_V3_SHARED_PAY, V1_V2_V3_SHARED_PAY),
            version: 3
        },
        {
            methods: objectSpread({}, V2_V3_SHARED_PAY, V1_V2_V3_SHARED_PAY),
            version: 2
        },
        {
            methods: objectSpread({
                query_info: {
                    description: 'The transaction info',
                    params: [
                        {
                            name: 'uxt',
                            type: 'Extrinsic'
                        },
                        {
                            name: 'len',
                            type: 'u32'
                        }
                    ],
                    // NOTE: _Should_ be V1 (as per current Substrate), however the interface was
                    // changed mid-flight between versions. So we have some of each depending on
                    // runtime. (We do detect the weight type, so correct)
                    type: 'RuntimeDispatchInfo'
                }
            }, V1_V2_V3_SHARED_PAY),
            version: 1
        }
    ],
    TransactionPaymentCallApi: [
        {
            methods: objectSpread({}, V3_SHARED_PAY_CALL, V2_V3_SHARED_CALL, V1_V2_V3_SHARED_CALL),
            version: 3
        },
        {
            methods: objectSpread({}, V2_V3_SHARED_CALL, V1_V2_V3_SHARED_CALL),
            version: 2
        },
        {
            methods: objectSpread({
                CALL: {
                    description: 'The call info',
                    params: [
                        {
                            name: 'call',
                            type: 'Call'
                        },
                        {
                            name: 'len',
                            type: 'u32'
                        }
                    ],
                    // NOTE: As per the above comment, the below is correct according to Substrate, but
                    // _may_ yield fallback decoding on some versions of the runtime
                    type: 'RuntimeDispatchInfo'
                }
            }, V1_V2_V3_SHARED_CALL),
            version: 1
        }
    ]
};

var definitions$1 = {
    rpc: rpc$1,
    runtime,
    types: {
        FeeDetails: {
            inclusionFee: 'Option<InclusionFee>'
            // skipped in serde
            // tip: 'Balance'
        },
        InclusionFee: {
            baseFee: 'Balance',
            lenFee: 'Balance',
            adjustedWeightFee: 'Balance'
        },
        RuntimeDispatchInfo: {
            weight: 'Weight',
            class: 'DispatchClass',
            partialFee: 'Balance'
        },
        RuntimeDispatchInfoV1: {
            weight: 'WeightV1',
            class: 'DispatchClass',
            partialFee: 'Balance'
        },
        RuntimeDispatchInfoV2: {
            weight: 'WeightV2',
            class: 'DispatchClass',
            partialFee: 'Balance'
        }
    }
};

const rpc = {
    call: {
        alias: ['state_callAt'],
        description: 'Perform a call to a builtin on the chain',
        params: [
            {
                name: 'method',
                type: 'Text'
            },
            {
                name: 'data',
                type: 'Bytes'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'Bytes'
    },
    getChildKeys: {
        description: 'Retrieves the keys with prefix of a specific child storage',
        params: [
            {
                name: 'childStorageKey',
                type: 'StorageKey'
            },
            {
                name: 'childDefinition',
                type: 'StorageKey'
            },
            {
                name: 'childType',
                type: 'u32'
            },
            {
                name: 'key',
                type: 'StorageKey'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'Vec<StorageKey>'
    },
    getChildReadProof: {
        description: 'Returns proof of storage for child key entries at a specific block state.',
        params: [
            {
                name: 'childStorageKey',
                type: 'PrefixedStorageKey'
            },
            {
                name: 'keys',
                type: 'Vec<StorageKey>'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'ReadProof'
    },
    getChildStorage: {
        description: 'Retrieves the child storage for a key',
        params: [
            {
                name: 'childStorageKey',
                type: 'StorageKey'
            },
            {
                name: 'childDefinition',
                type: 'StorageKey'
            },
            {
                name: 'childType',
                type: 'u32'
            },
            {
                name: 'key',
                type: 'StorageKey'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'StorageData'
    },
    getChildStorageHash: {
        description: 'Retrieves the child storage hash',
        params: [
            {
                name: 'childStorageKey',
                type: 'StorageKey'
            },
            {
                name: 'childDefinition',
                type: 'StorageKey'
            },
            {
                name: 'childType',
                type: 'u32'
            },
            {
                name: 'key',
                type: 'StorageKey'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'Hash'
    },
    getChildStorageSize: {
        description: 'Retrieves the child storage size',
        params: [
            {
                name: 'childStorageKey',
                type: 'StorageKey'
            },
            {
                name: 'childDefinition',
                type: 'StorageKey'
            },
            {
                name: 'childType',
                type: 'u32'
            },
            {
                name: 'key',
                type: 'StorageKey'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'u64'
    },
    getKeys: {
        deprecated: 'Use `api.rpc.state.getKeysPaged` to retrieve keys',
        description: 'Retrieves the keys with a certain prefix',
        params: [
            {
                name: 'key',
                type: 'StorageKey'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'Vec<StorageKey>'
    },
    getKeysPaged: {
        alias: ['state_getKeysPagedAt'],
        description: 'Returns the keys with prefix with pagination support.',
        params: [
            {
                name: 'key',
                type: 'StorageKey'
            },
            {
                name: 'count',
                type: 'u32'
            },
            {
                isOptional: true,
                name: 'startKey',
                type: 'StorageKey'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'Vec<StorageKey>'
    },
    getMetadata: {
        description: 'Returns the runtime metadata',
        params: [
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'Metadata'
    },
    getPairs: {
        deprecated: 'Use `api.rpc.state.getKeysPaged` to retrieve keys',
        description: 'Returns the keys with prefix, leave empty to get all the keys (deprecated: Use getKeysPaged)',
        isUnsafe: true,
        params: [
            {
                name: 'prefix',
                type: 'StorageKey'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'Vec<KeyValue>'
    },
    getReadProof: {
        description: 'Returns proof of storage entries at a specific block state',
        params: [
            {
                name: 'keys',
                type: 'Vec<StorageKey>'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'ReadProof'
    },
    getRuntimeVersion: {
        alias: ['chain_getRuntimeVersion'],
        description: 'Get the runtime version',
        params: [
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'RuntimeVersion'
    },
    getStorage: {
        alias: ['state_getStorageAt'],
        description: 'Retrieves the storage for a key',
        params: [
            {
                name: 'key',
                type: 'StorageKey'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'StorageData'
    },
    getStorageHash: {
        alias: ['state_getStorageHashAt'],
        description: 'Retrieves the storage hash',
        params: [
            {
                name: 'key',
                type: 'StorageKey'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'Hash'
    },
    getStorageSize: {
        alias: ['state_getStorageSizeAt'],
        description: 'Retrieves the storage size',
        params: [
            {
                name: 'key',
                type: 'StorageKey'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'u64'
    },
    queryStorage: {
        description: 'Query historical storage entries (by key) starting from a start block',
        isUnsafe: true,
        params: [
            {
                name: 'keys',
                type: 'Vec<StorageKey>'
            },
            {
                name: 'fromBlock',
                type: 'Hash'
            },
            {
                isOptional: true,
                name: 'toBlock',
                type: 'BlockHash'
            }
        ],
        type: 'Vec<StorageChangeSet>'
    },
    queryStorageAt: {
        description: 'Query storage entries (by key) starting at block hash given as the second parameter',
        params: [
            {
                name: 'keys',
                type: 'Vec<StorageKey>'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'Vec<StorageChangeSet>'
    },
    subscribeRuntimeVersion: {
        alias: ['chain_subscribeRuntimeVersion', 'chain_unsubscribeRuntimeVersion'],
        description: 'Retrieves the runtime version via subscription',
        params: [],
        pubsub: [
            'runtimeVersion',
            'subscribeRuntimeVersion',
            'unsubscribeRuntimeVersion'
        ],
        type: 'RuntimeVersion'
    },
    subscribeStorage: {
        description: 'Subscribes to storage changes for the provided keys',
        // NOTE Just marking it here to follow the logic - this is unsafe when no
        // keys are provided (i.e. subscribing to all), generally this is used
        // extensively with normal subscriptions
        // isUnsafe: true,
        params: [
            {
                isOptional: true,
                name: 'keys',
                type: 'Vec<StorageKey>'
            }
        ],
        pubsub: [
            'storage',
            'subscribeStorage',
            'unsubscribeStorage'
        ],
        type: 'StorageChangeSet'
    },
    traceBlock: {
        description: 'Provides a way to trace the re-execution of a single block',
        isUnsafe: true,
        params: [
            {
                name: 'block',
                type: 'Hash'
            },
            {
                name: 'targets',
                type: 'Option<Text>'
            },
            {
                name: 'storageKeys',
                type: 'Option<Text>'
            },
            {
                name: 'methods',
                type: 'Option<Text>'
            }
        ],
        type: 'TraceBlockResponse'
    },
    trieMigrationStatus: {
        description: 'Check current migration state',
        isUnsafe: true,
        params: [
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'MigrationStatusResult'
    }
};

var definitions = {
    rpc,
    types: {
        ApiId: '[u8; 8]',
        BlockTrace: {
            blockHash: 'Text',
            parentHash: 'Text',
            tracingTargets: 'Text',
            storageKeys: 'Text',
            spans: 'Vec<BlockTraceSpan>',
            events: 'Vec<BlockTraceEvent>'
        },
        BlockTraceEvent: {
            target: 'Text',
            data: 'BlockTraceEventData',
            parentId: 'Option<u64>'
        },
        BlockTraceEventData: {
            stringValues: 'HashMap<Text, Text>'
        },
        BlockTraceSpan: {
            id: 'u64',
            parentId: 'Option<u64>',
            name: 'Text',
            target: 'Text',
            wasm: 'bool'
        },
        KeyValueOption: '(StorageKey, Option<StorageData>)',
        MigrationStatusResult: {
            topRemainingToMigrate: 'u64',
            childRemainingToMigrate: 'u64'
        },
        ReadProof: {
            at: 'Hash',
            proof: 'Vec<Bytes>'
        },
        RuntimeVersionApi: '(ApiId, u32)',
        RuntimeVersion: {
            specName: 'Text',
            implName: 'Text',
            authoringVersion: 'u32',
            specVersion: 'u32',
            implVersion: 'u32',
            apis: 'Vec<RuntimeVersionApi>',
            transactionVersion: 'u32',
            stateVersion: 'u8'
        },
        RuntimeVersionPre4: {
            specName: 'Text',
            implName: 'Text',
            authoringVersion: 'u32',
            specVersion: 'u32',
            implVersion: 'u32',
            apis: 'Vec<RuntimeVersionApi>',
            transactionVersion: 'u32'
        },
        RuntimeVersionPre3: {
            specName: 'Text',
            implName: 'Text',
            authoringVersion: 'u32',
            specVersion: 'u32',
            implVersion: 'u32',
            apis: 'Vec<RuntimeVersionApi>'
        },
        RuntimeVersionPartial: {
            specName: 'Text',
            specVersion: 'u32',
            apis: 'Vec<RuntimeVersionApi>'
        },
        SpecVersion: 'u32',
        StorageChangeSet: {
            block: 'Hash',
            changes: 'Vec<KeyValueOption>'
        },
        TraceBlockResponse: {
            _enum: {
                TraceError: 'TraceError',
                BlockTrace: 'BlockTrace'
            }
        },
        TraceError: {
            error: 'Text'
        }
    }
};

var typeDefinitions = /*#__PURE__*/Object.freeze({
    __proto__: null,
    assets: definitions$11,
    attestations: definitions$l,
    aura: definitions$$,
    author: definitions$5,
    authorship: definitions$10,
    babe: definitions$_,
    balances: definitions$Z,
    beefy: definitions$Y,
    benchmark: definitions$X,
    blockbuilder: definitions$W,
    bridges: definitions$k,
    chain: definitions$4,
    childstate: definitions$3,
    claims: definitions$j,
    collective: definitions$V,
    consensus: definitions$U,
    contracts: definitions$T,
    contractsAbi: definitions$b,
    crowdloan: definitions$i,
    cumulus: definitions$h,
    democracy: definitions$S,
    dev: definitions$R,
    discovery: definitions$Q,
    elections: definitions$P,
    engine: definitions$O,
    eth: definitions$a,
    evm: definitions$N,
    extrinsics: definitions$M,
    finality: definitions$g,
    genericAsset: definitions$L,
    gilt: definitions$K,
    grandpa: definitions$J,
    identity: definitions$I,
    imOnline: definitions$H,
    lottery: definitions$G,
    metadata: definitions$14,
    mmr: definitions$F,
    nfts: definitions$E,
    nimbus: definitions$9,
    nompools: definitions$D,
    offchain: definitions$2,
    offences: definitions$C,
    ormlOracle: definitions$8,
    ormlTokens: definitions$7,
    parachains: definitions$f,
    payment: definitions$1,
    poll: definitions$e,
    pow: definitions$B,
    proxy: definitions$A,
    purchase: definitions$d,
    recovery: definitions$z,
    rpc: definitions$6,
    runtime: definitions$13,
    scaleInfo: definitions$12,
    scheduler: definitions$y,
    session: definitions$x,
    society: definitions$w,
    staking: definitions$v,
    state: definitions,
    support: definitions$u,
    syncstate: definitions$t,
    system: definitions$s,
    treasury: definitions$r,
    txpayment: definitions$q,
    txqueue: definitions$p,
    uniques: definitions$o,
    utility: definitions$n,
    vesting: definitions$m,
    xcm: definitions$c
});

const jsonrpc = {};
Object.keys(typeDefinitions).forEach((s) => Object.entries(typeDefinitions[s].rpc || {}).forEach(([method, def]) => {
    // allow for section overrides
    const section = def.aliasSection || s;
    if (!jsonrpc[section]) {
        jsonrpc[section] = {};
    }
    jsonrpc[section][method] = objectSpread({}, def, {
        isSubscription: !!def.pubsub,
        jsonrpc: `${section}_${method}`,
        method,
        section
    });
}));
var rpcDefinitions = jsonrpc;

function lazyVariants(lookup, { type }, getName, creator) {
    const result = {};
    const variants = lookup.getSiType(type).def.asVariant.variants;
    for (let i = 0; i < variants.length; i++) {
        lazyMethod(result, variants[i], creator, getName, i);
    }
    return result;
}

const emptyCheck = {
    extrinsic: {},
    payload: {}
};

const polkadot$1 = {
    LimitParathreadCommits: emptyCheck,
    OnlyStakingAndClaims: emptyCheck,
    PrevalidateAttests: emptyCheck,
    RestrictFunctionality: emptyCheck,
    TransactionCallFilter: emptyCheck,
    ValidateDoubleVoteReports: emptyCheck
};

const shell$1 = {
    DisallowSigned: emptyCheck
};

const statemint$1 = {
    ChargeAssetTxPayment: {
        extrinsic: {
            tip: 'Compact<Balance>',
            // eslint-disable-next-line sort-keys
            assetId: 'Option<AssetId>'
        },
        payload: {}
    }
};

const CheckMortality = {
    extrinsic: {
        era: 'ExtrinsicEra'
    },
    payload: {
        blockHash: 'Hash'
    }
};
const substrate$1 = {
    ChargeTransactionPayment: {
        extrinsic: {
            tip: 'Compact<Balance>'
        },
        payload: {}
    },
    CheckBlockGasLimit: emptyCheck,
    CheckEra: CheckMortality,
    CheckGenesis: {
        extrinsic: {},
        payload: {
            genesisHash: 'Hash'
        }
    },
    CheckMortality,
    CheckNonZeroSender: emptyCheck,
    CheckNonce: {
        extrinsic: {
            nonce: 'Compact<Index>'
        },
        payload: {}
    },
    CheckSpecVersion: {
        extrinsic: {},
        payload: {
            specVersion: 'u32'
        }
    },
    CheckTxVersion: {
        extrinsic: {},
        payload: {
            transactionVersion: 'u32'
        }
    },
    CheckVersion: {
        extrinsic: {},
        payload: {
            specVersion: 'u32'
        }
    },
    CheckWeight: emptyCheck,
    LockStakingStatus: emptyCheck,
    ValidateEquivocationReport: emptyCheck
};

const allExtensions = objectSpread({}, substrate$1, polkadot$1, shell$1, statemint$1);
const fallbackExtensions = [
    'CheckVersion',
    'CheckGenesis',
    'CheckEra',
    'CheckNonce',
    'CheckWeight',
    'ChargeTransactionPayment',
    'CheckBlockGasLimit'
];
function findUnknownExtensions(extensions, userExtensions = {}) {
    const names = [...Object.keys(allExtensions), ...Object.keys(userExtensions)];
    return extensions.filter((k) => !names.includes(k));
}
function expandExtensionTypes(extensions, type, userExtensions = {}) {
    return extensions
        // Always allow user extensions first - these should provide overrides
        .map((k) => userExtensions[k] || allExtensions[k])
        .filter((info) => !!info)
        .reduce((result, info) => objectSpread(result, info[type]), {});
}

var _GenericEventData_meta, _GenericEventData_method, _GenericEventData_names, _GenericEventData_section, _GenericEventData_typeDef;
/** @internal */
function decodeEvent(registry, value) {
    if (!value || !value.length) {
        return { DataType: Null };
    }
    const index = value.subarray(0, 2);
    return {
        DataType: registry.findMetaEvent(index),
        value: {
            data: value.subarray(2),
            index
        }
    };
}
/**
 * @name GenericEventData
 * @description
 * Wrapper for the actual data that forms part of an [[Event]]
 */
class GenericEventData extends Tuple {
    constructor(registry, value, meta, section = '<unknown>', method = '<unknown>') {
        const fields = meta?.fields || [];
        super(registry, fields.map(({ type }) => registry.createLookupType(type)), value);
        _GenericEventData_meta.set(this, void 0);
        _GenericEventData_method.set(this, void 0);
        _GenericEventData_names.set(this, null);
        _GenericEventData_section.set(this, void 0);
        _GenericEventData_typeDef.set(this, void 0);
        __classPrivateFieldSet(this, _GenericEventData_meta, meta, "f");
        __classPrivateFieldSet(this, _GenericEventData_method, method, "f");
        __classPrivateFieldSet(this, _GenericEventData_section, section, "f");
        __classPrivateFieldSet(this, _GenericEventData_typeDef, fields.map(({ type }) => registry.lookup.getTypeDef(type)), "f");
        const names = fields
            .map(({ name }) => registry.lookup.sanitizeField(name)[0])
            .filter((n) => !!n);
        if (names.length === fields.length) {
            __classPrivateFieldSet(this, _GenericEventData_names, names, "f");
            objectProperties(this, names, (_, i) => this[i]);
        }
    }
    /**
     * @description The wrapped [[EventMetadata]]
     */
    get meta() {
        return __classPrivateFieldGet(this, _GenericEventData_meta, "f");
    }
    /**
     * @description The method as a string
     */
    get method() {
        return __classPrivateFieldGet(this, _GenericEventData_method, "f");
    }
    /**
     * @description The field names (as available)
     */
    get names() {
        return __classPrivateFieldGet(this, _GenericEventData_names, "f");
    }
    /**
     * @description The section as a string
     */
    get section() {
        return __classPrivateFieldGet(this, _GenericEventData_section, "f");
    }
    /**
     * @description The [[TypeDef]] for this event
     */
    get typeDef() {
        return __classPrivateFieldGet(this, _GenericEventData_typeDef, "f");
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
        if (__classPrivateFieldGet(this, _GenericEventData_names, "f") !== null) {
            const json = {};
            for (let i = 0; i < __classPrivateFieldGet(this, _GenericEventData_names, "f").length; i++) {
                json[__classPrivateFieldGet(this, _GenericEventData_names, "f")[i]] = this[i].toHuman(isExtended);
            }
            return json;
        }
        return super.toHuman(isExtended);
    }
}
_GenericEventData_meta = new WeakMap(), _GenericEventData_method = new WeakMap(), _GenericEventData_names = new WeakMap(), _GenericEventData_section = new WeakMap(), _GenericEventData_typeDef = new WeakMap();
/**
 * @name GenericEvent
 * @description
 * A representation of a system event. These are generated via the [[Metadata]] interfaces and
 * specific to a specific Substrate runtime
 */
class GenericEvent extends Struct {
    // Currently we _only_ decode from Uint8Array, since we expect it to
    // be used via EventRecord
    constructor(registry, _value) {
        const { DataType, value } = decodeEvent(registry, _value);
        super(registry, {
            index: 'EventId',
            // eslint-disable-next-line sort-keys
            data: DataType
        }, value);
    }
    /**
     * @description The wrapped [[EventData]]
     */
    get data() {
        return this.getT('data');
    }
    /**
     * @description The [[EventId]], identifying the raw event
     */
    get index() {
        return this.getT('index');
    }
    /**
     * @description The [[EventMetadata]] with the documentation
     */
    get meta() {
        return this.data.meta;
    }
    /**
     * @description The method string identifying the event
     */
    get method() {
        return this.data.method;
    }
    /**
     * @description The section string identifying the event
     */
    get section() {
        return this.data.section;
    }
    /**
     * @description The [[TypeDef]] for the event
     */
    get typeDef() {
        return this.data.typeDef;
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExpanded) {
        return objectSpread({
            method: this.method,
            section: this.section
        }, isExpanded
            ? { docs: this.meta.docs.map((d) => d.toString()) }
            : null, super.toHuman(isExpanded));
    }
}

const EXTRINSIC_VERSION = 4;
/**
 * @name GenericExtrinsicV4
 * @description
 * The third generation of compact extrinsics
 */
class GenericExtrinsicV4 extends Struct {
    constructor(registry, value, { isSigned } = {}) {
        super(registry, {
            signature: 'ExtrinsicSignatureV4',
            // eslint-disable-next-line sort-keys
            method: 'Call'
        }, GenericExtrinsicV4.decodeExtrinsic(registry, value, isSigned));
    }
    /** @internal */
    static decodeExtrinsic(registry, value, isSigned = false) {
        if (value instanceof GenericExtrinsicV4) {
            return value;
        }
        else if (value instanceof registry.createClassUnsafe('Call')) {
            return { method: value };
        }
        else if (isU8a(value)) {
            // here we decode manually since we need to pull through the version information
            const signature = registry.createTypeUnsafe('ExtrinsicSignatureV4', [value, { isSigned }]);
            const method = registry.createTypeUnsafe('Call', [value.subarray(signature.encodedLength)]);
            return {
                method,
                signature
            };
        }
        return value || {};
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        return this.toU8a().length;
    }
    /**
     * @description The [[Call]] this extrinsic wraps
     */
    get method() {
        return this.getT('method');
    }
    /**
     * @description The [[ExtrinsicSignatureV4]]
     */
    get signature() {
        return this.getT('signature');
    }
    /**
     * @description The version for the signature
     */
    get version() {
        return EXTRINSIC_VERSION;
    }
    /**
     * @description Add an [[ExtrinsicSignatureV4]] to the extrinsic (already generated)
     */
    addSignature(signer, signature, payload) {
        this.signature.addSignature(signer, signature, payload);
        return this;
    }
    /**
     * @description Sign the extrinsic with a specific keypair
     */
    sign(account, options) {
        this.signature.sign(this.method, account, options);
        return this;
    }
    /**
     * @describe Adds a fake signature to the extrinsic
     */
    signFake(signer, options) {
        this.signature.signFake(this.method, signer, options);
        return this;
    }
}

const BIT_SIGNED = 0b10000000;
const BIT_UNSIGNED = 0;
const EMPTY_U8A = new Uint8Array();
const DEFAULT_VERSION = 4;
const IMMORTAL_ERA = new Uint8Array([0]);
const UNMASK_VERSION = 0b01111111;

var _GenericExtrinsic_hashCache;
const VERSIONS$1 = [
    'ExtrinsicUnknown',
    'ExtrinsicUnknown',
    'ExtrinsicUnknown',
    'ExtrinsicUnknown',
    'ExtrinsicV4'
];
/** @internal */
function newFromValue(registry, value, version) {
    if (value instanceof GenericExtrinsic) {
        return value.unwrap();
    }
    const isSigned = (version & BIT_SIGNED) === BIT_SIGNED;
    const type = VERSIONS$1[version & UNMASK_VERSION] || VERSIONS$1[0];
    // we cast here since the VERSION definition is incredibly broad - we don't have a
    // slice for "only add extrinsic types", and more string definitions become unwieldy
    return registry.createTypeUnsafe(type, [value, { isSigned, version }]);
}
/** @internal */
function decodeExtrinsic(registry, value, version = DEFAULT_VERSION) {
    if (isU8a(value) || Array.isArray(value) || isHex(value)) {
        return decodeU8a$4(registry, u8aToU8a(value), version);
    }
    else if (value instanceof registry.createClassUnsafe('Call')) {
        return newFromValue(registry, { method: value }, version);
    }
    return newFromValue(registry, value, version);
}
/** @internal */
function decodeU8a$4(registry, value, version) {
    if (!value.length) {
        return newFromValue(registry, new Uint8Array(), version);
    }
    const [offset, length] = compactFromU8a(value);
    const total = offset + length.toNumber();
    if (total > value.length) {
        throw new Error(`Extrinsic: length less than remainder, expected at least ${total}, found ${value.length}`);
    }
    const data = value.subarray(offset, total);
    return newFromValue(registry, data.subarray(1), data[0]);
}
class ExtrinsicBase extends AbstractBase {
    constructor(registry, value, initialU8aLength) {
        super(registry, value, initialU8aLength);
        const signKeys = Object.keys(registry.getSignedExtensionTypes());
        const getter = (key) => this.inner.signature[key];
        // This is on the abstract class, ensuring that hasOwnProperty operates
        // correctly, i.e. it needs to be on the base class exposing it
        for (let i = 0; i < signKeys.length; i++) {
            objectProperty(this, signKeys[i], getter);
        }
    }
    /**
     * @description The arguments passed to for the call, exposes args so it is compatible with [[Call]]
     */
    get args() {
        return this.method.args;
    }
    /**
     * @description The argument definitions, compatible with [[Call]]
     */
    get argsDef() {
        return this.method.argsDef;
    }
    /**
     * @description The actual `[sectionIndex, methodIndex]` as used in the Call
     */
    get callIndex() {
        return this.method.callIndex;
    }
    /**
     * @description The actual data for the Call
     */
    get data() {
        return this.method.data;
    }
    /**
     * @description The era for this extrinsic
     */
    get era() {
        return this.inner.signature.era;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        return this.toU8a().length;
    }
    /**
     * @description `true` id the extrinsic is signed
     */
    get isSigned() {
        return this.inner.signature.isSigned;
    }
    /**
     * @description The length of the actual data, excluding prefix
     */
    get length() {
        return this.toU8a(true).length;
    }
    /**
     * @description The [[FunctionMetadataLatest]] that describes the extrinsic
     */
    get meta() {
        return this.method.meta;
    }
    /**
     * @description The [[Call]] this extrinsic wraps
     */
    get method() {
        return this.inner.method;
    }
    /**
     * @description The nonce for this extrinsic
     */
    get nonce() {
        return this.inner.signature.nonce;
    }
    /**
     * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
     */
    get signature() {
        return this.inner.signature.signature;
    }
    /**
     * @description The [[Address]] that signed
     */
    get signer() {
        return this.inner.signature.signer;
    }
    /**
     * @description Forwards compat
     */
    get tip() {
        return this.inner.signature.tip;
    }
    /**
     * @description Returns the raw transaction version (not flagged with signing information)
    */
    get type() {
        return this.inner.version;
    }
    get inner() {
        return this.unwrap();
    }
    /**
     * @description Returns the encoded version flag
    */
    get version() {
        return this.type | (this.isSigned ? BIT_SIGNED : BIT_UNSIGNED);
    }
    /**
     * @description Checks if the source matches this in type
     */
    is(other) {
        return this.method.is(other);
    }
    unwrap() {
        return super.unwrap();
    }
}
/**
 * @name GenericExtrinsic
 * @description
 * Representation of an Extrinsic in the system. It contains the actual call,
 * (optional) signature and encodes with an actual length prefix
 *
 * {@link https://github.com/paritytech/wiki/blob/master/Extrinsic.md#the-extrinsic-format-for-node}.
 *
 * Can be:
 * - signed, to create a transaction
 * - left as is, to create an inherent
 */
class GenericExtrinsic extends ExtrinsicBase {
    constructor(registry, value, { version } = {}) {
        super(registry, decodeExtrinsic(registry, value, version));
        _GenericExtrinsic_hashCache.set(this, void 0);
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        if (!__classPrivateFieldGet(this, _GenericExtrinsic_hashCache, "f")) {
            __classPrivateFieldSet(this, _GenericExtrinsic_hashCache, super.hash, "f");
        }
        return __classPrivateFieldGet(this, _GenericExtrinsic_hashCache, "f");
    }
    /**
     * @description Injects an already-generated signature into the extrinsic
     */
    addSignature(signer, signature, payload) {
        this.inner.addSignature(signer, signature, payload);
        __classPrivateFieldSet(this, _GenericExtrinsic_hashCache, undefined, "f");
        return this;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        const encoded = u8aConcat(...this.toU8aInner());
        return {
            inner: this.isSigned
                ? this.inner.inspect().inner
                : this.inner.method.inspect().inner,
            outer: [compactToU8a(encoded.length), new Uint8Array([this.version])]
        };
    }
    /**
     * @description Sign the extrinsic with a specific keypair
     */
    sign(account, options) {
        this.inner.sign(account, options);
        __classPrivateFieldSet(this, _GenericExtrinsic_hashCache, undefined, "f");
        return this;
    }
    /**
     * @describe Adds a fake signature to the extrinsic
     */
    signFake(signer, options) {
        this.inner.signFake(signer, options);
        __classPrivateFieldSet(this, _GenericExtrinsic_hashCache, undefined, "f");
        return this;
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex(isBare) {
        return u8aToHex(this.toU8a(isBare));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExpanded) {
        return objectSpread({}, {
            isSigned: this.isSigned,
            method: this.method.toHuman(isExpanded)
        }, this.isSigned
            ? {
                era: this.era.toHuman(isExpanded),
                nonce: this.nonce.toHuman(isExpanded),
                signature: this.signature.toHex(),
                signer: this.signer.toHuman(isExpanded),
                tip: this.tip.toHuman(isExpanded)
            }
            : null);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return this.toHex();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'Extrinsic';
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value is not length-prefixed
     */
    toU8a(isBare) {
        const encoded = u8aConcat(...this.toU8aInner());
        return isBare
            ? encoded
            : compactAddLength(encoded);
    }
    toU8aInner() {
        // we do not apply bare to the internal values, rather this only determines out length addition,
        // where we strip all lengths this creates an extrinsic that cannot be decoded
        return [
            new Uint8Array([this.version]),
            this.inner.toU8a()
        ];
    }
}
_GenericExtrinsic_hashCache = new WeakMap();
GenericExtrinsic.LATEST_EXTRINSIC_VERSION = EXTRINSIC_VERSION;

function getTrailingZeros(period) {
    const binary = period.toString(2);
    let index = 0;
    while (binary[binary.length - 1 - index] === '0') {
        index++;
    }
    return index;
}
/** @internal */
function decodeMortalEra(registry, value) {
    if (isU8a(value) || isHex(value) || Array.isArray(value)) {
        return decodeMortalU8a(registry, u8aToU8a(value));
    }
    else if (!value) {
        return [new u64(registry), new u64(registry)];
    }
    else if (isObject(value)) {
        return decodeMortalObject(registry, value);
    }
    throw new Error('Invalid data passed to Mortal era');
}
/** @internal */
function decodeMortalObject(registry, value) {
    const { current, period } = value;
    let calPeriod = Math.pow(2, Math.ceil(Math.log2(period)));
    calPeriod = Math.min(Math.max(calPeriod, 4), 1 << 16);
    const phase = current % calPeriod;
    const quantizeFactor = Math.max(calPeriod >> 12, 1);
    const quantizedPhase = phase / quantizeFactor * quantizeFactor;
    return [new u64(registry, calPeriod), new u64(registry, quantizedPhase)];
}
/** @internal */
function decodeMortalU8a(registry, value) {
    if (value.length === 0) {
        return [new u64(registry), new u64(registry)];
    }
    const first = u8aToBn(value.subarray(0, 1)).toNumber();
    const second = u8aToBn(value.subarray(1, 2)).toNumber();
    const encoded = first + (second << 8);
    const period = 2 << (encoded % (1 << 4));
    const quantizeFactor = Math.max(period >> 12, 1);
    const phase = (encoded >> 4) * quantizeFactor;
    if (period < 4 || phase >= period) {
        throw new Error('Invalid data passed to Mortal era');
    }
    return [new u64(registry, period), new u64(registry, phase)];
}
/** @internal */
function decodeExtrinsicEra(value = new Uint8Array()) {
    if (isU8a(value)) {
        return (!value.length || value[0] === 0)
            ? new Uint8Array([0])
            : new Uint8Array([1, value[0], value[1]]);
    }
    else if (!value) {
        return new Uint8Array([0]);
    }
    else if (value instanceof GenericExtrinsicEra) {
        return decodeExtrinsicEra(value.toU8a());
    }
    else if (isHex(value)) {
        return decodeExtrinsicEra(hexToU8a(value));
    }
    else if (isObject(value)) {
        const entries = Object.entries(value).map(([k, v]) => [k.toLowerCase(), v]);
        const mortal = entries.find(([k]) => k.toLowerCase() === 'mortalera');
        const immortal = entries.find(([k]) => k.toLowerCase() === 'immortalera');
        // this is to de-serialize from JSON
        return mortal
            ? { MortalEra: mortal[1] }
            : immortal
                ? { ImmortalEra: immortal[1] }
                : { MortalEra: value };
    }
    throw new Error('Invalid data passed to Era');
}
/**
 * @name ImmortalEra
 * @description
 * The ImmortalEra for an extrinsic
 */
class ImmortalEra extends Raw {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    constructor(registry, value) {
        // For immortals, we always provide the known value (i.e. treated as a
        // constant no matter how it is constructed - it is a fixed structure)
        super(registry, IMMORTAL_ERA);
    }
}
/**
 * @name MortalEra
 * @description
 * The MortalEra for an extrinsic, indicating period and phase
 */
class MortalEra extends Tuple {
    constructor(registry, value) {
        super(registry, {
            period: u64,
            phase: u64
        }, decodeMortalEra(registry, value));
    }
    /**
     * @description Encoded length for mortals occupy 2 bytes, different from the actual Tuple since it is encoded. This is a shortcut fro `toU8a().length`
     */
    get encodedLength() {
        return 2;
    }
    /**
     * @description The period of this Mortal wraps as a [[U64]]
     */
    get period() {
        return this[0];
    }
    /**
     * @description The phase of this Mortal wraps as a [[U64]]
     */
    get phase() {
        return this[1];
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
        return {
            period: formatNumber(this.period),
            phase: formatNumber(this.phase)
        };
    }
    /**
     * @description Returns a JSON representation of the actual value
     */
    toJSON() {
        return this.toHex();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the parity-codec specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     * Period and phase are encoded:
     *   - The period of validity from the block hash found in the signing material.
     *   - The phase in the period that this transaction's lifetime begins (and, importantly,
     *     implies which block hash is included in the signature material). If the `period` is
     *     greater than 1 << 12, then it will be a factor of the times greater than 1<<12 that
     *     `period` is.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    toU8a(isBare) {
        const period = this.period.toNumber();
        const encoded = Math.min(15, Math.max(1, getTrailingZeros(period) - 1)) + ((this.phase.toNumber() / Math.max(period >> 12, 1)) << 4);
        return new Uint8Array([
            encoded & 0xff,
            encoded >> 8
        ]);
    }
    /**
     * @description Get the block number of the start of the era whose properties this object describes that `current` belongs to.
     */
    birth(current) {
        const phase = this.phase.toNumber();
        const period = this.period.toNumber();
        // FIXME No toNumber() here
        return (~~((Math.max(bnToBn(current).toNumber(), phase) - phase) / period) * period) + phase;
    }
    /**
     * @description Get the block number of the first block at which the era has ended.
     */
    death(current) {
        // FIXME No toNumber() here
        return this.birth(current) + this.period.toNumber();
    }
}
/**
 * @name GenericExtrinsicEra
 * @description
 * The era for an extrinsic, indicating either a mortal or immortal extrinsic
 */
class GenericExtrinsicEra extends Enum {
    constructor(registry, value) {
        super(registry, {
            ImmortalEra,
            MortalEra
        }, decodeExtrinsicEra(value));
    }
    /**
     * @description Override the encoded length method
     */
    get encodedLength() {
        return this.isImmortalEra
            ? this.asImmortalEra.encodedLength
            : this.asMortalEra.encodedLength;
    }
    /**
     * @description Returns the item as a [[ImmortalEra]]
     */
    get asImmortalEra() {
        if (!this.isImmortalEra) {
            throw new Error(`Cannot convert '${this.type}' via asImmortalEra`);
        }
        return this.inner;
    }
    /**
     * @description Returns the item as a [[MortalEra]]
     */
    get asMortalEra() {
        if (!this.isMortalEra) {
            throw new Error(`Cannot convert '${this.type}' via asMortalEra`);
        }
        return this.inner;
    }
    /**
     * @description `true` if Immortal
     */
    get isImmortalEra() {
        return this.index === 0;
    }
    /**
     * @description `true` if Mortal
     */
    get isMortalEra() {
        return this.index > 0;
    }
    /**
     * @description Encodes the value as a Uint8Array as per the parity-codec specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        return this.isMortalEra
            ? this.asMortalEra.toU8a(isBare)
            : this.asImmortalEra.toU8a(isBare);
    }
}

const VERSIONS = [
    'ExtrinsicPayloadUnknown',
    'ExtrinsicPayloadUnknown',
    'ExtrinsicPayloadUnknown',
    'ExtrinsicPayloadUnknown',
    'ExtrinsicPayloadV4'
];
/** @internal */
function decodeExtrinsicPayload(registry, value, version = DEFAULT_VERSION) {
    if (value instanceof GenericExtrinsicPayload) {
        return value.unwrap();
    }
    return registry.createTypeUnsafe(VERSIONS[version] || VERSIONS[0], [value, { version }]);
}
/**
 * @name GenericExtrinsicPayload
 * @description
 * A signing payload for an [[Extrinsic]]. For the final encoding, it is variable length based
 * on the contents included
 */
class GenericExtrinsicPayload extends AbstractBase {
    constructor(registry, value, { version } = {}) {
        super(registry, decodeExtrinsicPayload(registry, value, version));
    }
    /**
     * @description The block [[BlockHash]] the signature applies to (mortal/immortal)
     */
    get blockHash() {
        return this.inner.blockHash;
    }
    /**
     * @description The [[ExtrinsicEra]]
     */
    get era() {
        return this.inner.era;
    }
    /**
     * @description The genesis block [[BlockHash]] the signature applies to
     */
    get genesisHash() {
        // NOTE only v3+
        return this.inner.genesisHash || this.registry.createTypeUnsafe('Hash', []);
    }
    /**
     * @description The [[Bytes]] contained in the payload
     */
    get method() {
        return this.inner.method;
    }
    /**
     * @description The [[Index]]
     */
    get nonce() {
        return this.inner.nonce;
    }
    /**
     * @description The specVersion as a [[u32]] for this payload
     */
    get specVersion() {
        // NOTE only v3+
        return this.inner.specVersion || this.registry.createTypeUnsafe('u32', []);
    }
    /**
     * @description The [[Balance]]
     */
    get tip() {
        // NOTE from v2+
        return this.inner.tip || this.registry.createTypeUnsafe('Compact<Balance>', []);
    }
    /**
     * @description The transaction version as a [[u32]] for this payload
     */
    get transactionVersion() {
        // NOTE only v4+
        return this.inner.transactionVersion || this.registry.createTypeUnsafe('u32', []);
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        return this.inner.eq(other);
    }
    /**
     * @description Sign the payload with the keypair
     */
    sign(signerPair) {
        const signature = this.inner.sign(signerPair);
        // This is extensible, so we could quite readily extend to send back extra
        // information, such as for instance the payload, i.e. `payload: this.toHex()`
        // For the case here we sign via the extrinsic, we ignore the return, so generally
        // this is applicable for external signing
        return {
            signature: u8aToHex(signature)
        };
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
        return this.inner.toHuman(isExtended);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return this.toHex();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'ExtrinsicPayload';
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return this.toHex();
    }
    /**
     * @description Returns a serialized u8a form
     */
    toU8a(isBare) {
        // call our parent, with only the method stripped
        return super.toU8a(isBare ? { method: true } : false);
    }
}

/**
 * @name GenericExtrinsicPayloadUnknown
 * @description
 * A default handler for payloads where the version is not known (default throw)
 */
class GenericExtrinsicPayloadUnknown extends Struct {
    constructor(registry, value, { version = 0 } = {}) {
        super(registry, {});
        throw new Error(`Unsupported extrinsic payload version ${version}`);
    }
}

/**
 * @name GenericExtrinsicUnknown
 * @description
 * A default handler for extrinsics where the version is not known (default throw)
 */
class GenericExtrinsicUnknown extends Struct {
    constructor(registry, value, { isSigned = false, version = 0 } = {}) {
        super(registry, {});
        throw new Error(`Unsupported ${isSigned ? '' : 'un'}signed extrinsic version ${version & UNMASK_VERSION}`);
    }
}

var _GenericSignerPayload_extraTypes;
const knownTypes = {
    address: 'Address',
    blockHash: 'Hash',
    blockNumber: 'BlockNumber',
    era: 'ExtrinsicEra',
    genesisHash: 'Hash',
    method: 'Call',
    nonce: 'Compact<Index>',
    runtimeVersion: 'RuntimeVersion',
    signedExtensions: 'Vec<Text>',
    tip: 'Compact<Balance>',
    version: 'u8'
};
/**
 * @name GenericSignerPayload
 * @description
 * A generic signer payload that can be used for serialization between API and signer
 */
class GenericSignerPayload extends Struct {
    constructor(registry, value) {
        const extensionTypes = objectSpread({}, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra());
        super(registry, objectSpread({}, extensionTypes, knownTypes), value);
        _GenericSignerPayload_extraTypes.set(this, void 0);
        __classPrivateFieldSet(this, _GenericSignerPayload_extraTypes, {}, "f");
        const getter = (key) => this.get(key);
        // add all extras that are not in the base types
        for (const [key, type] of Object.entries(extensionTypes)) {
            if (!knownTypes[key]) {
                __classPrivateFieldGet(this, _GenericSignerPayload_extraTypes, "f")[key] = type;
            }
            objectProperty(this, key, getter);
        }
    }
    get address() {
        return this.getT('address');
    }
    get blockHash() {
        return this.getT('blockHash');
    }
    get blockNumber() {
        return this.getT('blockNumber');
    }
    get era() {
        return this.getT('era');
    }
    get genesisHash() {
        return this.getT('genesisHash');
    }
    get method() {
        return this.getT('method');
    }
    get nonce() {
        return this.getT('nonce');
    }
    get runtimeVersion() {
        return this.getT('runtimeVersion');
    }
    get signedExtensions() {
        return this.getT('signedExtensions');
    }
    get tip() {
        return this.getT('tip');
    }
    get version() {
        return this.getT('version');
    }
    /**
     * @description Creates an representation of the structure as an ISignerPayload JSON
     */
    toPayload() {
        const result = {};
        const keys = Object.keys(__classPrivateFieldGet(this, _GenericSignerPayload_extraTypes, "f"));
        // add any explicit overrides we may have
        for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            const value = this.get(key);
            const isOption = value instanceof Option;
            // Don't include Option.isNone
            if (!isOption || value.isSome) {
                result[key] = value.toHex();
            }
        }
        return objectSpread(result, {
            // the known defaults as managed explicitly and has different
            // formatting in cases, e.g. we mostly expose a hex format here
            address: this.address.toString(),
            blockHash: this.blockHash.toHex(),
            blockNumber: this.blockNumber.toHex(),
            era: this.era.toHex(),
            genesisHash: this.genesisHash.toHex(),
            method: this.method.toHex(),
            nonce: this.nonce.toHex(),
            signedExtensions: this.signedExtensions.map((e) => e.toString()),
            specVersion: this.runtimeVersion.specVersion.toHex(),
            tip: this.tip.toHex(),
            transactionVersion: this.runtimeVersion.transactionVersion.toHex(),
            version: this.version.toNumber()
        });
    }
    /**
     * @description Creates a representation of the payload in raw Exrinsic form
     */
    toRaw() {
        const payload = this.toPayload();
        const data = u8aToHex(this.registry
            .createTypeUnsafe('ExtrinsicPayload', [payload, { version: payload.version }])
            // NOTE Explicitly pass the bare flag so the method is encoded un-prefixed (non-decodable, for signing only)
            .toU8a({ method: true }));
        return {
            address: payload.address,
            data,
            type: 'payload'
        };
    }
}
_GenericSignerPayload_extraTypes = new WeakMap();

function sign(registry, signerPair, u8a, options) {
    const encoded = u8a.length > 256
        ? registry.hash(u8a)
        : u8a;
    return signerPair.sign(encoded, options);
}

var _GenericExtrinsicPayloadV4_signOptions;
/**
 * @name GenericExtrinsicPayloadV4
 * @description
 * A signing payload for an [[Extrinsic]]. For the final encoding, it is
 * variable length based on the contents included
 */
class GenericExtrinsicPayloadV4 extends Struct {
    constructor(registry, value) {
        super(registry, objectSpread({ method: 'Bytes' }, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra()), value);
        _GenericExtrinsicPayloadV4_signOptions.set(this, void 0);
        // Do detection for the type of extrinsic, in the case of MultiSignature
        // this is an enum, in the case of AnySignature, this is a Hash only
        // (which may be 64 or 65 bytes)
        __classPrivateFieldSet(this, _GenericExtrinsicPayloadV4_signOptions, {
            withType: registry.createTypeUnsafe('ExtrinsicSignature', []) instanceof Enum
        }, "f");
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return super.inspect({ method: true });
    }
    /**
     * @description The block [[BlockHash]] the signature applies to (mortal/immortal)
     */
    get blockHash() {
        return this.getT('blockHash');
    }
    /**
     * @description The [[ExtrinsicEra]]
     */
    get era() {
        return this.getT('era');
    }
    /**
     * @description The genesis [[BlockHash]] the signature applies to (mortal/immortal)
     */
    get genesisHash() {
        return this.getT('genesisHash');
    }
    /**
     * @description The [[Bytes]] contained in the payload
     */
    get method() {
        return this.getT('method');
    }
    /**
     * @description The [[Index]]
     */
    get nonce() {
        return this.getT('nonce');
    }
    /**
     * @description The specVersion for this signature
     */
    get specVersion() {
        return this.getT('specVersion');
    }
    /**
     * @description The tip [[Balance]]
     */
    get tip() {
        return this.getT('tip');
    }
    /**
     * @description The transactionVersion for this signature
     */
    get transactionVersion() {
        return this.getT('transactionVersion');
    }
    /**
     * @description The (optional) asset id for this signature for chains that support transaction fees in assets
     */
    get assetId() {
        return this.getT('assetId');
    }
    /**
     * @description Sign the payload with the keypair
     */
    sign(signerPair) {
        // NOTE The `toU8a({ method: true })` argument is absolutely critical, we
        // don't want the method (Bytes) to have the length prefix included. This
        // means that the data-as-signed is un-decodable, but is also doesn't need
        // the extra information, only the pure data (and is not decoded) ...
        // The same applies to V1..V3, if we have a V5, carry this comment
        return sign(this.registry, signerPair, this.toU8a({ method: true }), __classPrivateFieldGet(this, _GenericExtrinsicPayloadV4_signOptions, "f"));
    }
}
_GenericExtrinsicPayloadV4_signOptions = new WeakMap();

var _GenericExtrinsicSignatureV4_signKeys;
const FAKE_SIGNATURE = new Uint8Array(256).fill(1);
function toAddress(registry, address) {
    return registry.createTypeUnsafe('Address', [isU8a(address) ? u8aToHex(address) : address]);
}
/**
 * @name GenericExtrinsicSignatureV4
 * @description
 * A container for the [[Signature]] associated with a specific [[Extrinsic]]
 */
class GenericExtrinsicSignatureV4 extends Struct {
    constructor(registry, value, { isSigned } = {}) {
        const signTypes = registry.getSignedExtensionTypes();
        super(registry, objectSpread(
        // eslint-disable-next-line sort-keys
        { signer: 'Address', signature: 'ExtrinsicSignature' }, signTypes), GenericExtrinsicSignatureV4.decodeExtrinsicSignature(value, isSigned));
        _GenericExtrinsicSignatureV4_signKeys.set(this, void 0);
        __classPrivateFieldSet(this, _GenericExtrinsicSignatureV4_signKeys, Object.keys(signTypes), "f");
        objectProperties(this, __classPrivateFieldGet(this, _GenericExtrinsicSignatureV4_signKeys, "f"), (k) => this.get(k));
    }
    /** @internal */
    static decodeExtrinsicSignature(value, isSigned = false) {
        if (!value) {
            return EMPTY_U8A;
        }
        else if (value instanceof GenericExtrinsicSignatureV4) {
            return value;
        }
        return isSigned
            ? value
            : EMPTY_U8A;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        return this.isSigned
            ? super.encodedLength
            : 0;
    }
    /**
     * @description `true` if the signature is valid
     */
    get isSigned() {
        return !this.signature.isEmpty;
    }
    /**
     * @description The [[ExtrinsicEra]] (mortal or immortal) this signature applies to
     */
    get era() {
        return this.getT('era');
    }
    /**
     * @description The [[Index]] for the signature
     */
    get nonce() {
        return this.getT('nonce');
    }
    /**
     * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
     */
    get signature() {
        // the second case here is when we don't have an enum signature, treat as raw
        return (this.multiSignature.value || this.multiSignature);
    }
    /**
     * @description The raw [[ExtrinsicSignature]]
     */
    get multiSignature() {
        return this.getT('signature');
    }
    /**
     * @description The [[Address]] that signed
     */
    get signer() {
        return this.getT('signer');
    }
    /**
     * @description The [[Balance]] tip
     */
    get tip() {
        return this.getT('tip');
    }
    _injectSignature(signer, signature, payload) {
        // use the fields exposed to guide the getters
        for (let i = 0; i < __classPrivateFieldGet(this, _GenericExtrinsicSignatureV4_signKeys, "f").length; i++) {
            const k = __classPrivateFieldGet(this, _GenericExtrinsicSignatureV4_signKeys, "f")[i];
            const v = payload.get(k);
            if (!isUndefined(v)) {
                this.set(k, v);
            }
        }
        // additional fields (exposed in struct itself)
        this.set('signer', signer);
        this.set('signature', signature);
        return this;
    }
    /**
     * @description Adds a raw signature
     */
    addSignature(signer, signature, payload) {
        return this._injectSignature(toAddress(this.registry, signer), this.registry.createTypeUnsafe('ExtrinsicSignature', [signature]), new GenericExtrinsicPayloadV4(this.registry, payload));
    }
    /**
     * @description Creates a payload from the supplied options
     */
    createPayload(method, options) {
        const { era, runtimeVersion: { specVersion, transactionVersion } } = options;
        return new GenericExtrinsicPayloadV4(this.registry, objectSpread({}, options, {
            era: era || IMMORTAL_ERA,
            method: method.toHex(),
            specVersion,
            transactionVersion
        }));
    }
    /**
     * @description Generate a payload and applies the signature from a keypair
     */
    sign(method, account, options) {
        if (!account || !account.addressRaw) {
            throw new Error(`Expected a valid keypair for signing, found ${stringify(account)}`);
        }
        const payload = this.createPayload(method, options);
        return this._injectSignature(toAddress(this.registry, account.addressRaw), this.registry.createTypeUnsafe('ExtrinsicSignature', [payload.sign(account)]), payload);
    }
    /**
     * @description Generate a payload and applies a fake signature
     */
    signFake(method, address, options) {
        if (!address) {
            throw new Error(`Expected a valid address for signing, found ${stringify(address)}`);
        }
        const payload = this.createPayload(method, options);
        return this._injectSignature(toAddress(this.registry, address), this.registry.createTypeUnsafe('ExtrinsicSignature', [FAKE_SIGNATURE]), payload);
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        return this.isSigned
            ? super.toU8a(isBare)
            : EMPTY_U8A;
    }
}
_GenericExtrinsicSignatureV4_signKeys = new WeakMap();

/** @internal */
function decodeAccountId$1(value) {
    if (isU8a(value) || Array.isArray(value)) {
        return u8aToU8a(value);
    }
    else if (isHex(value) || isEthereumAddress(value.toString())) {
        return hexToU8a(value.toString());
    }
    else if (isString(value)) {
        return u8aToU8a(value);
    }
    return value;
}
/**
 * @name GenericEthereumAccountId
 * @description
 * A wrapper around an Ethereum-compatible AccountId. Since we are dealing with
 * underlying addresses (20 bytes in length), we extend from U8aFixed which is
 * just a Uint8Array wrapper with a fixed length.
 */
class GenericEthereumAccountId extends U8aFixed {
    constructor(registry, value = new Uint8Array()) {
        super(registry, decodeAccountId$1(value), 160);
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        return super.eq(decodeAccountId$1(other));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
        return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return this.toString();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return this.toJSON();
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return ethereumEncode(this);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'AccountId';
    }
}

const PREFIX_1BYTE = 0xef;
const PREFIX_2BYTE = 0xfc;
const PREFIX_4BYTE = 0xfd;
const PREFIX_8BYTE = 0xfe;
const MAX_1BYTE = new BN(PREFIX_1BYTE);
const MAX_2BYTE = new BN(1).shln(16);
const MAX_4BYTE = new BN(1).shln(32);
/** @internal */
function decodeAccountIndex(value) {
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    if (value instanceof GenericAccountIndex) {
        // `value.toBn()` on AccountIndex returns a pure BN (i.e. not an
        // AccountIndex), which has the initial `toString()` implementation.
        return value.toBn();
    }
    else if (isBn(value) || isNumber(value) || isHex(value) || isU8a(value) || isBigInt(value)) {
        return value;
    }
    return decodeAccountIndex(decodeAddress(value));
}
/**
 * @name GenericAccountIndex
 * @description
 * A wrapper around an AccountIndex, which is a shortened, variable-length encoding
 * for an Account. We extends from [[U32]] to provide the number-like properties.
 */
class GenericAccountIndex extends u32 {
    constructor(registry, value = new BN(0)) {
        super(registry, decodeAccountIndex(value));
    }
    static calcLength(_value) {
        const value = bnToBn(_value);
        if (value.lte(MAX_1BYTE)) {
            return 1;
        }
        else if (value.lt(MAX_2BYTE)) {
            return 2;
        }
        else if (value.lt(MAX_4BYTE)) {
            return 4;
        }
        return 8;
    }
    static readLength(input) {
        const first = input[0];
        if (first === PREFIX_2BYTE) {
            return [1, 2];
        }
        else if (first === PREFIX_4BYTE) {
            return [1, 4];
        }
        else if (first === PREFIX_8BYTE) {
            return [1, 8];
        }
        return [0, 1];
    }
    static writeLength(input) {
        switch (input.length) {
            case 2: return new Uint8Array([PREFIX_2BYTE]);
            case 4: return new Uint8Array([PREFIX_4BYTE]);
            case 8: return new Uint8Array([PREFIX_8BYTE]);
            default: return new Uint8Array([]);
        }
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        // shortcut for BN or Number, don't create an object
        if (isBn(other) || isNumber(other)) {
            return super.eq(other);
        }
        // convert and compare
        return super.eq(this.registry.createTypeUnsafe('AccountIndex', [other]));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
        return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return this.toString();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return this.toJSON();
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        const length = GenericAccountIndex.calcLength(this);
        return encodeAddress(this.toU8a().subarray(0, length), this.registry.chainSS58);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'AccountIndex';
    }
}

const ACCOUNT_ID_PREFIX$1 = new Uint8Array([0xff]);
/** @internal */
function decodeString$1(registry, value) {
    const decoded = decodeAddress(value);
    return decoded.length === 20
        ? registry.createTypeUnsafe('EthereumAccountId', [decoded])
        : registry.createTypeUnsafe('AccountIndex', [u8aToBn(decoded)]);
}
/** @internal */
function decodeU8a$3(registry, value) {
    // This allows us to instantiate an address with a raw publicKey. Do this first before
    // we checking the first byte, otherwise we may split an already-existent valid address
    if (value.length === 20) {
        return registry.createTypeUnsafe('EthereumAccountId', [value]);
    }
    else if (value[0] === 0xff) {
        return registry.createTypeUnsafe('EthereumAccountId', [value.subarray(1)]);
    }
    const [offset, length] = GenericAccountIndex.readLength(value);
    return registry.createTypeUnsafe('AccountIndex', [u8aToBn(value.subarray(offset, offset + length))]);
}
function decodeAddressOrIndex$1(registry, value) {
    return value instanceof GenericEthereumLookupSource
        ? value.inner
        : value instanceof GenericEthereumAccountId || value instanceof GenericAccountIndex
            ? value
            : isU8a(value) || Array.isArray(value) || isHex(value)
                ? decodeU8a$3(registry, u8aToU8a(value))
                : isBn(value) || isNumber(value) || isBigInt(value)
                    ? registry.createTypeUnsafe('AccountIndex', [value])
                    : decodeString$1(registry, value);
}
/**
 * @name GenericEthereumLookupSource
 * @description
 * A wrapper around an EthereumAccountId and/or AccountIndex that is encoded with a prefix.
 * Since we are dealing with underlying publicKeys (or shorter encoded addresses),
 * we extend from Base with an AccountId/AccountIndex wrapper. Basically the Address
 * is encoded as `[ <prefix-byte>, ...publicKey/...bytes ]` as per spec
 */
class GenericEthereumLookupSource extends AbstractBase {
    constructor(registry, value = new Uint8Array()) {
        super(registry, decodeAddressOrIndex$1(registry, value));
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        const rawLength = this._rawLength;
        return rawLength + (
        // for 1 byte AccountIndexes, we are not adding a specific prefix
        rawLength > 1
            ? 1
            : 0);
    }
    /**
     * @description The length of the raw value, either AccountIndex or AccountId
     */
    get _rawLength() {
        return this.inner instanceof GenericAccountIndex
            ? GenericAccountIndex.calcLength(this.inner)
            : this.inner.encodedLength;
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
        return u8aToHex(this.toU8a());
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'Address';
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        const encoded = this.inner.toU8a().subarray(0, this._rawLength);
        return isBare
            ? encoded
            : u8aConcat(this.inner instanceof GenericAccountIndex
                ? GenericAccountIndex.writeLength(encoded)
                : ACCOUNT_ID_PREFIX$1, encoded);
    }
}

/** @internal */
function decodeAccountId(value) {
    if (isU8a(value) || Array.isArray(value)) {
        return u8aToU8a(value);
    }
    else if (!value) {
        return new Uint8Array();
    }
    else if (isHex(value)) {
        return hexToU8a(value);
    }
    else if (isString(value)) {
        return decodeAddress(value.toString());
    }
    throw new Error(`Unknown type passed to AccountId constructor, found typeof ${typeof value}`);
}
class BaseAccountId extends U8aFixed {
    constructor(registry, allowedBits = 256 | 264, value) {
        const decoded = decodeAccountId(value);
        const decodedBits = decoded.length * 8;
        // Part of stream containing >= 32 bytes or a all empty (defaults)
        if (decodedBits < allowedBits && decoded.some((b) => b)) {
            throw new Error(`Invalid AccountId provided, expected ${allowedBits >> 3} bytes, found ${decoded.length}`);
        }
        super(registry, decoded, allowedBits);
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        return super.eq(decodeAccountId(other));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
        return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return this.toString();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return this.toJSON();
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return encodeAddress(this, this.registry.chainSS58);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'AccountId';
    }
}
/**
 * @name GenericAccountId
 * @description
 * A wrapper around an AccountId/PublicKey representation. Since we are dealing with
 * underlying PublicKeys (32 bytes in length), we extend from U8aFixed which is
 * just a Uint8Array wrapper with a fixed length.
 */
class GenericAccountId extends BaseAccountId {
    constructor(registry, value) {
        super(registry, 256, value);
    }
}
class GenericAccountId33 extends BaseAccountId {
    constructor(registry, value) {
        super(registry, 264, value);
    }
}

/**
 * @name GenericBlock
 * @description
 * A block encoded with header and extrinsics
 */
class GenericBlock extends Struct {
    constructor(registry, value) {
        super(registry, {
            header: 'Header',
            // eslint-disable-next-line sort-keys
            extrinsics: 'Vec<Extrinsic>'
        }, value);
    }
    /**
     * @description Encodes a content [[Hash]] for the block
     */
    get contentHash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description The [[Extrinsic]] contained in the block
     */
    get extrinsics() {
        return this.getT('extrinsics');
    }
    /**
     * @description Block/header [[Hash]]
     */
    get hash() {
        return this.header.hash;
    }
    /**
     * @description The [[Header]] of the block
     */
    get header() {
        return this.getT('header');
    }
}

/**
 * Get a mapping of `argument name -> argument type` for the function, from
 * its metadata.
 *
 * @param meta - The function metadata used to get the definition.
 * @internal
 */
function getArgsDef(registry, meta) {
    return meta.fields.reduce((result, { name, type }, index) => {
        result[name.unwrapOr(`param${index}`).toString()] = registry.createLookupType(type);
        return result;
    }, {});
}
/** @internal */
function decodeCallViaObject(registry, value, _meta) {
    // we only pass args/methodsIndex out
    const { args, callIndex } = value;
    // Get the correct lookupIndex
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    const lookupIndex = callIndex instanceof GenericCallIndex
        ? callIndex.toU8a()
        : callIndex;
    // Find metadata with callIndex
    const meta = _meta || registry.findMetaCall(lookupIndex).meta;
    return {
        args,
        argsDef: getArgsDef(registry, meta),
        callIndex,
        meta
    };
}
/** @internal */
function decodeCallViaU8a(registry, value, _meta) {
    // We need 2 bytes for the callIndex
    const callIndex = registry.firstCallIndex.slice();
    callIndex.set(value.subarray(0, 2), 0);
    // Find metadata with callIndex
    const meta = _meta || registry.findMetaCall(callIndex).meta;
    return {
        args: value.subarray(2),
        argsDef: getArgsDef(registry, meta),
        callIndex,
        meta
    };
}
/**
 * Decode input to pass into constructor.
 *
 * @param value - Value to decode, one of:
 * - hex
 * - Uint8Array
 * - {@see DecodeMethodInput}
 * @param _meta - Metadata to use, so that `injectMethods` lookup is not
 * necessary.
 * @internal
 */
function decodeCall(registry, value = new Uint8Array(), _meta) {
    if (isU8a(value) || isHex(value)) {
        return decodeCallViaU8a(registry, u8aToU8a(value), _meta);
    }
    else if (isObject(value) && value.callIndex && value.args) {
        return decodeCallViaObject(registry, value, _meta);
    }
    throw new Error(`Call: Cannot decode value '${value}' of type ${typeof value}`);
}
/**
 * @name GenericCallIndex
 * @description
 * A wrapper around the `[sectionIndex, methodIndex]` value that uniquely identifies a method
 */
class GenericCallIndex extends U8aFixed {
    constructor(registry, value) {
        super(registry, value, 16);
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return this.toHex();
    }
}
/**
 * @name GenericCall
 * @description
 * Extrinsic function descriptor
 */
class GenericCall extends Struct {
    constructor(registry, value, meta) {
        const decoded = decodeCall(registry, value, meta);
        try {
            super(registry, {
                callIndex: GenericCallIndex,
                // eslint-disable-next-line sort-keys
                args: Struct.with(decoded.argsDef)
            }, decoded);
        }
        catch (error) {
            let method = 'unknown.unknown';
            try {
                const c = registry.findMetaCall(decoded.callIndex);
                method = `${c.section}.${c.method}`;
            }
            catch (error) {
                // ignore
            }
            throw new Error(`Call: failed decoding ${method}:: ${error.message}`);
        }
        this._meta = decoded.meta;
    }
    /**
     * @description The arguments for the function call
     */
    get args() {
        return [...this.getT('args').values()];
    }
    /**
     * @description The argument definitions
     */
    get argsDef() {
        return getArgsDef(this.registry, this.meta);
    }
    /**
     * @description The argument entries
     */
    get argsEntries() {
        return [...this.getT('args').entries()];
    }
    /**
     * @description The encoded `[sectionIndex, methodIndex]` identifier
     */
    get callIndex() {
        return this.getT('callIndex').toU8a();
    }
    /**
     * @description The encoded data
     */
    get data() {
        return this.getT('args').toU8a();
    }
    /**
     * @description The [[FunctionMetadata]]
     */
    get meta() {
        return this._meta;
    }
    /**
     * @description Returns the name of the method
     */
    get method() {
        return this.registry.findMetaCall(this.callIndex).method;
    }
    /**
     * @description Returns the module containing the method
     */
    get section() {
        return this.registry.findMetaCall(this.callIndex).section;
    }
    /**
     * @description Checks if the source matches this in type
     */
    is(other) {
        return other.callIndex[0] === this.callIndex[0] && other.callIndex[1] === this.callIndex[1];
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExpanded) {
        let call;
        try {
            call = this.registry.findMetaCall(this.callIndex);
        }
        catch (error) {
            // swallow
        }
        return objectSpread({
            args: this.argsEntries.reduce((args, [n, a]) => objectSpread(args, { [n]: a.toHuman(isExpanded) }), {}),
            method: call?.method,
            section: call?.section
        }, isExpanded && call
            ? { docs: call.meta.docs.map((d) => d.toString()) }
            : null);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'Call';
    }
}

function createValue(registry, type, value, asArray = true) {
    // We detect codec here as well - when found, generally this is constructed from itself
    if (value && isFunction$1(value.unwrapOrDefault)) {
        return value;
    }
    return registry.createTypeUnsafe(type, [
        asArray
            ? isNull(value) || isUndefined(value)
                ? null
                : Array.isArray(value)
                    ? value
                    : [value]
            : value
    ]);
}
function decodeValue(registry, key, value) {
    return key === 'ss58Format'
        ? createValue(registry, 'Option<u32>', value, false)
        : key === 'tokenDecimals'
            ? createValue(registry, 'Option<Vec<u32>>', value)
            : key === 'tokenSymbol'
                ? createValue(registry, 'Option<Vec<Text>>', value)
                : value;
}
function decode(registry, value) {
    return (
    // allow decoding from a map as well (ourselves)
    value && isFunction$1(value.entries)
        ? [...value.entries()]
        : Object.entries(value || {})).reduce((all, [key, value]) => {
        all[key] = decodeValue(registry, key, value);
        return all;
    }, {
        ss58Format: registry.createTypeUnsafe('Option<u32>', []),
        tokenDecimals: registry.createTypeUnsafe('Option<Vec<u32>>', []),
        tokenSymbol: registry.createTypeUnsafe('Option<Vec<Text>>', [])
    });
}
class GenericChainProperties extends Json {
    constructor(registry, value) {
        super(registry, decode(registry, value));
    }
    /**
     * @description The chain ss58Format
     */
    get ss58Format() {
        return this.getT('ss58Format');
    }
    /**
     * @description The decimals for each of the tokens
     */
    get tokenDecimals() {
        return this.getT('tokenDecimals');
    }
    /**
     * @description The symbols for the tokens
     */
    get tokenSymbol() {
        return this.getT('tokenSymbol');
    }
}

const CID_AURA = stringToU8a('aura');
const CID_BABE = stringToU8a('BABE');
const CID_GRPA = stringToU8a('FRNK');
const CID_POW = stringToU8a('pow_');
function getAuraAuthor(registry, bytes, sessionValidators) {
    return sessionValidators[registry.createTypeUnsafe('RawAuraPreDigest', [bytes.toU8a(true)])
        .slotNumber
        .mod(new BN(sessionValidators.length))
        .toNumber()];
}
function getBabeAuthor(registry, bytes, sessionValidators) {
    const digest = registry.createTypeUnsafe('RawBabePreDigestCompat', [bytes.toU8a(true)]);
    return sessionValidators[digest.value.toNumber()];
}
function getBytesAsAuthor(registry, bytes) {
    return registry.createTypeUnsafe('AccountId', [bytes]);
}
/**
 * @name GenericConsensusEngineId
 * @description
 * A 4-byte identifier identifying the engine
 */
class GenericConsensusEngineId extends U8aFixed {
    constructor(registry, value) {
        super(registry, isNumber(value)
            ? bnToU8a(value, { isLe: false })
            : value, 32);
    }
    /**
     * @description `true` if the engine matches aura
     */
    get isAura() {
        return this.eq(CID_AURA);
    }
    /**
     * @description `true` is the engine matches babe
     */
    get isBabe() {
        return this.eq(CID_BABE);
    }
    /**
     * @description `true` is the engine matches grandpa
     */
    get isGrandpa() {
        return this.eq(CID_GRPA);
    }
    /**
     * @description `true` is the engine matches pow
     */
    get isPow() {
        return this.eq(CID_POW);
    }
    /**
     * @description From the input bytes, decode into an author
     */
    extractAuthor(bytes, sessionValidators) {
        if (sessionValidators?.length) {
            if (this.isAura) {
                return getAuraAuthor(this.registry, bytes, sessionValidators);
            }
            else if (this.isBabe) {
                return getBabeAuthor(this.registry, bytes, sessionValidators);
            }
        }
        // For pow & Moonbeam, the bytes are the actual author
        if (this.isPow || bytes.length === 20) {
            return getBytesAsAuthor(this.registry, bytes);
        }
        return undefined;
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
        return this.toString();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'ConsensusEngineId';
    }
    /**
     * @description Override the default toString to return a 4-byte string
     */
    toString() {
        return this.isAscii
            ? u8aToString(this)
            : u8aToHex(this);
    }
}

const ACCOUNT_ID_PREFIX = new Uint8Array([0xff]);
/** @internal */
function decodeString(registry, value) {
    const decoded = decodeAddress(value);
    return decoded.length === 32
        ? registry.createTypeUnsafe('AccountId', [decoded])
        : registry.createTypeUnsafe('AccountIndex', [u8aToBn(decoded)]);
}
/** @internal */
function decodeU8a$2(registry, value) {
    // This allows us to instantiate an address with a raw publicKey. Do this first before
    // we checking the first byte, otherwise we may split an already-existent valid address
    if (value.length === 32) {
        return registry.createTypeUnsafe('AccountId', [value]);
    }
    else if (value[0] === 0xff) {
        return registry.createTypeUnsafe('AccountId', [value.subarray(1)]);
    }
    const [offset, length] = GenericAccountIndex.readLength(value);
    return registry.createTypeUnsafe('AccountIndex', [u8aToBn(value.subarray(offset, offset + length))]);
}
/** @internal */
function decodeAddressOrIndex(registry, value) {
    return value instanceof GenericLookupSource
        ? value.inner
        : value instanceof GenericAccountId || value instanceof GenericAccountIndex
            ? value
            : isBn(value) || isNumber(value) || isBigInt(value)
                ? registry.createTypeUnsafe('AccountIndex', [value])
                : Array.isArray(value) || isHex(value) || isU8a(value)
                    ? decodeU8a$2(registry, u8aToU8a(value))
                    : decodeString(registry, value);
}
/**
 * @name LookupSource
 * @description
 * A wrapper around an AccountId and/or AccountIndex that is encoded with a prefix.
 * Since we are dealing with underlying publicKeys (or shorter encoded addresses),
 * we extend from Base with an AccountId/AccountIndex wrapper. Basically the Address
 * is encoded as `[ <prefix-byte>, ...publicKey/...bytes ]` as per spec
 */
class GenericLookupSource extends AbstractBase {
    constructor(registry, value = new Uint8Array()) {
        super(registry, decodeAddressOrIndex(registry, value));
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        const rawLength = this._rawLength;
        return rawLength + (
        // for 1 byte AccountIndexes, we are not adding a specific prefix
        rawLength > 1
            ? 1
            : 0);
    }
    /**
     * @description The length of the raw value, either AccountIndex or AccountId
     */
    get _rawLength() {
        return this.inner instanceof GenericAccountIndex
            ? GenericAccountIndex.calcLength(this.inner)
            : this.inner.encodedLength;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        const value = this.inner.toU8a().subarray(0, this._rawLength);
        return {
            outer: [
                new Uint8Array(this.inner instanceof GenericAccountIndex
                    ? GenericAccountIndex.writeLength(value)
                    : ACCOUNT_ID_PREFIX),
                value
            ]
        };
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
        return u8aToHex(this.toU8a());
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'Address';
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        const encoded = this.inner.toU8a().subarray(0, this._rawLength);
        return isBare
            ? encoded
            : u8aConcat(this.inner instanceof GenericAccountIndex
                ? GenericAccountIndex.writeLength(encoded)
                : ACCOUNT_ID_PREFIX, encoded);
    }
}

function decodeU8a$1(registry, u8a) {
    if ([0, 32].includes(u8a.length)) {
        return { Id: u8a };
    }
    else if (u8a.length === 20) {
        return { Address20: u8a };
    }
    else if (u8a.length <= 8) {
        return { Index: registry.createTypeUnsafe('AccountIndex', [u8a]).toNumber() };
    }
    return u8a;
}
function decodeMultiAny(registry, value) {
    if (value instanceof GenericAccountId) {
        return { Id: value };
    }
    else if (isU8a(value)) {
        // NOTE This is after the AccountId check (which is U8a)
        return decodeU8a$1(registry, value);
    }
    else if (value instanceof GenericMultiAddress) {
        return value;
    }
    else if (value instanceof GenericAccountIndex || isBn(value) || isNumber(value)) {
        return { Index: isNumber(value) ? value : value.toNumber() };
    }
    else if (isString(value)) {
        return decodeU8a$1(registry, decodeAddress(value.toString()));
    }
    return value;
}
class GenericMultiAddress extends Enum {
    constructor(registry, value) {
        super(registry, {
            Id: 'AccountId',
            Index: 'Compact<AccountIndex>',
            Raw: 'Bytes',
            // eslint-disable-next-line sort-keys
            Address32: 'H256',
            // eslint-disable-next-line sort-keys
            Address20: 'H160'
        }, decodeMultiAny(registry, value));
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        const { inner, outer = [] } = this.inner.inspect();
        return {
            inner,
            outer: [new Uint8Array([this.index]), ...outer]
        };
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return this.value.toString();
    }
}

var _GenericVote_aye, _GenericVote_conviction;
const AYE_BITS = 0b10000000;
const NAY_BITS = 0b00000000;
const CON_MASK = 0b01111111;
const DEF_CONV = 0b00000000; // the default conviction, None
/** @internal */
function decodeVoteBool(value) {
    return value
        ? new Uint8Array([AYE_BITS | DEF_CONV])
        : new Uint8Array([NAY_BITS]);
}
/** @internal */
function decodeVoteU8a(value) {
    return value.length
        ? value.subarray(0, 1)
        : new Uint8Array([NAY_BITS]);
}
/** @internal */
function decodeVoteType(registry, value) {
    return new Uint8Array([
        (new bool(registry, value.aye).isTrue
            ? AYE_BITS
            : NAY_BITS) |
            registry.createTypeUnsafe('Conviction', [value.conviction || DEF_CONV]).index
    ]);
}
/** @internal */
function decodeVote(registry, value) {
    if (isU8a(value)) {
        return decodeVoteU8a(value);
    }
    else if (isUndefined(value) || value instanceof Boolean || isBoolean(value)) {
        return decodeVoteBool(new bool(registry, value).isTrue);
    }
    else if (isNumber(value)) {
        return decodeVoteBool(value < 0);
    }
    return decodeVoteType(registry, value);
}
/**
 * @name GenericVote
 * @description
 * A number of lock periods, plus a vote, one way or the other.
 */
class GenericVote extends U8aFixed {
    constructor(registry, value) {
        // decoded is just 1 byte
        // Aye: Most Significant Bit
        // Conviction: 0000 - 0101
        const decoded = decodeVote(registry, value);
        super(registry, decoded, 8);
        _GenericVote_aye.set(this, void 0);
        _GenericVote_conviction.set(this, void 0);
        __classPrivateFieldSet(this, _GenericVote_aye, (decoded[0] & AYE_BITS) === AYE_BITS, "f");
        __classPrivateFieldSet(this, _GenericVote_conviction, this.registry.createTypeUnsafe('Conviction', [decoded[0] & CON_MASK]), "f");
    }
    /**
     * @description returns a V2 conviction
     */
    get conviction() {
        return __classPrivateFieldGet(this, _GenericVote_conviction, "f");
    }
    /**
     * @description true if the wrapped value is a positive vote
     */
    get isAye() {
        return __classPrivateFieldGet(this, _GenericVote_aye, "f");
    }
    /**
     * @description true if the wrapped value is a negative vote
     */
    get isNay() {
        return !this.isAye;
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExpanded) {
        return {
            conviction: this.conviction.toHuman(isExpanded),
            vote: this.isAye ? 'Aye' : 'Nay'
        };
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return {
            aye: this.isAye,
            conviction: this.conviction.toPrimitive()
        };
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'Vote';
    }
}
_GenericVote_aye = new WeakMap(), _GenericVote_conviction = new WeakMap();

/** @internal */
function decodeDataU8a(registry, value) {
    const indicator = value[0];
    if (!indicator) {
        return [undefined, undefined];
    }
    else if (indicator >= 1 && indicator <= 33) {
        const length = indicator - 1;
        const data = value.subarray(1, length + 1);
        // in this case, we are passing a Raw back (since we have no length)
        return [registry.createTypeUnsafe('Raw', [data]), 1];
    }
    else if (indicator >= 34 && indicator <= 37) {
        return [value.subarray(1, 32 + 1), indicator - 32]; // 34 becomes 2
    }
    throw new Error(`Unable to decode Data, invalid indicator byte ${indicator}`);
}
/** @internal */
function decodeData(registry, value) {
    if (isU8a(value) || isString(value)) {
        return decodeDataU8a(registry, u8aToU8a(value));
    }
    else if (!value) {
        return [undefined, undefined];
    }
    // assume we have an Enum or an  object input, handle this via the normal Enum decoding
    return [value, undefined];
}
/**
 * @name Data
 * @description
 * A [[Data]] container with node, raw or hashed data
 */
class Data extends Enum {
    constructor(registry, value) {
        super(registry, {
            None: 'Null',
            Raw: 'Bytes',
            // eslint-disable-next-line sort-keys
            BlakeTwo256: 'H256',
            Sha256: 'H256',
            // eslint-disable-next-line sort-keys
            Keccak256: 'H256',
            ShaThree256: 'H256' // 5
        }, ...decodeData(registry, value));
        if (this.isRaw && this.asRaw.length > 32) {
            throw new Error('Data.Raw values are limited to a maximum length of 32 bytes');
        }
    }
    get asBlakeTwo256() {
        return this.value;
    }
    get asKeccak256() {
        return this.value;
    }
    get asRaw() {
        return this.value;
    }
    get asSha256() {
        return this.value;
    }
    get asShaThree256() {
        return this.value;
    }
    get isBlakeTwo256() {
        return this.index === 2;
    }
    get isKeccak256() {
        return this.index === 4;
    }
    get isNone() {
        return this.index === 0;
    }
    get isRaw() {
        return this.index === 1;
    }
    get isSha256() {
        return this.index === 3;
    }
    get isShaThree256() {
        return this.index === 5;
    }
    /**
     * @description The encoded length
     */
    get encodedLength() {
        return this.toU8a().length;
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */
    toU8a() {
        if (this.index === 0) {
            return new Uint8Array(1);
        }
        else if (this.index === 1) {
            // don't add the length, just the data
            const data = this.value.toU8a(true);
            const length = Math.min(data.length, 32);
            const u8a = new Uint8Array(length + 1);
            u8a.set([length + 1], 0);
            u8a.set(data.subarray(0, length), 1);
            return u8a;
        }
        // otherwise we simply have a hash
        const u8a = new Uint8Array(33);
        u8a.set([this.index + 32], 0);
        u8a.set(this.value.toU8a(), 1);
        return u8a;
    }
}

/** @internal */
function flattenUniq(list, result = []) {
    for (let i = 0; i < list.length; i++) {
        const entry = list[i];
        if (Array.isArray(entry)) {
            flattenUniq(entry, result);
        }
        else {
            result.push(entry);
        }
    }
    return [...new Set(result)];
}

function getSiName(lookup, type) {
    const typeDef = lookup.getTypeDef(type);
    return typeDef.lookupName || typeDef.type;
}

function extractSubSingle(_, { sub }) {
    const { lookupName, type } = sub;
    return extractTypes$1([lookupName || type]);
}
function extractSubArray(_, { sub }) {
    return extractTypes$1(sub.map(({ lookupName, type }) => lookupName || type));
}
function unhandled(type, { info }) {
    throw new Error(`Unhandled: Unable to create and validate type from ${type} (info=${TypeDefInfo[info]})`);
}
const mapping = {
    [TypeDefInfo.BTreeMap]: extractSubArray,
    [TypeDefInfo.BTreeSet]: extractSubSingle,
    [TypeDefInfo.Compact]: extractSubSingle,
    [TypeDefInfo.DoNotConstruct]: unhandled,
    [TypeDefInfo.Enum]: extractSubArray,
    [TypeDefInfo.HashMap]: extractSubArray,
    [TypeDefInfo.Int]: unhandled,
    [TypeDefInfo.Linkage]: extractSubSingle,
    [TypeDefInfo.Null]: unhandled,
    [TypeDefInfo.Option]: extractSubSingle,
    [TypeDefInfo.Plain]: (_, typeDef) => typeDef.lookupName || typeDef.type,
    [TypeDefInfo.Range]: extractSubSingle,
    [TypeDefInfo.RangeInclusive]: extractSubSingle,
    [TypeDefInfo.Result]: extractSubArray,
    [TypeDefInfo.Set]: extractSubArray,
    [TypeDefInfo.Si]: unhandled,
    [TypeDefInfo.Struct]: extractSubArray,
    [TypeDefInfo.Tuple]: extractSubArray,
    [TypeDefInfo.UInt]: unhandled,
    [TypeDefInfo.Vec]: extractSubSingle,
    [TypeDefInfo.VecFixed]: extractSubSingle,
    [TypeDefInfo.WrapperKeepOpaque]: extractSubSingle,
    [TypeDefInfo.WrapperOpaque]: extractSubSingle
};
/** @internal */
function extractTypes$1(types) {
    const count = types.length;
    const result = new Array(count);
    for (let i = 0; i < count; i++) {
        const type = types[i];
        const typeDef = getTypeDef(type);
        result[i] = mapping[typeDef.info](type, typeDef);
    }
    return result;
}

const l$7 = logger('metadata');
/** @internal */
function validateTypes(registry, throwError, types) {
    const missing = flattenUniq(extractTypes$1(types))
        .filter((type) => !registry.hasType(type) &&
        !registry.isLookupType(type))
        .sort();
    if (missing.length !== 0) {
        const message = `Unknown types found, no types for ${missing.join(', ')}`;
        if (throwError) {
            throw new Error(message);
        }
        else {
            l$7.warn(message);
        }
    }
    return types;
}

/** @internal */
function extractTypes(lookup, types) {
    return types.map(({ type }) => lookup.getTypeDef(type).type);
}
/** @internal */
function extractFieldTypes(lookup, type) {
    return lookup.getSiType(type).def.asVariant.variants.map(({ fields }) => extractTypes(lookup, fields));
}
/** @internal */
function getPalletNames({ lookup, pallets }) {
    return pallets.reduce((all, { calls, constants, events, storage }) => {
        all.push([extractTypes(lookup, constants)]);
        if (calls.isSome) {
            all.push(extractFieldTypes(lookup, calls.unwrap().type));
        }
        if (events.isSome) {
            all.push(extractFieldTypes(lookup, events.unwrap().type));
        }
        if (storage.isSome) {
            all.push(storage.unwrap().items.map(({ type }) => {
                if (type.isPlain) {
                    return [lookup.getTypeDef(type.asPlain).type];
                }
                const { hashers, key, value } = type.asMap;
                return hashers.length === 1
                    ? [
                        lookup.getTypeDef(value).type,
                        lookup.getTypeDef(key).type
                    ]
                    : [
                        lookup.getTypeDef(value).type,
                        ...lookup.getSiType(key).def.asTuple.map((t) => lookup.getTypeDef(t).type)
                    ];
            }));
        }
        return all;
    }, []);
}
/** @internal */
function getUniqTypes(registry, meta, throwError) {
    return validateTypes(registry, throwError, flattenUniq(getPalletNames(meta)));
}

function trimDocs(docs) {
    const strings = docs.map((d) => d.toString().trim());
    const firstEmpty = strings.findIndex((d) => !d.length);
    return firstEmpty === -1
        ? strings
        : strings.slice(0, firstEmpty);
}
/** @internal */
function toCallsOnly(registry, { extrinsic, lookup, pallets }) {
    return registry.createTypeUnsafe('MetadataLatest', [{
            extrinsic,
            lookup: {
                types: lookup.types.map(({ id, type }) => registry.createTypeUnsafe('PortableType', [{
                        id,
                        type: objectSpread({}, type, { docs: trimDocs(type.docs) })
                    }]))
            },
            pallets: pallets.map(({ calls, index, name }) => ({
                calls: registry.createTypeUnsafe('Option<PalletCallMetadataLatest>', [calls.unwrapOr(null)]),
                index,
                name
            }))
        }]).toJSON();
}

var _StorageKey_args, _StorageKey_meta, _StorageKey_outputType, _StorageKey_method, _StorageKey_section;
const HASHER_MAP = {
    // opaque
    Blake2_128: [16, false],
    Blake2_128Concat: [16, true],
    Blake2_256: [32, false],
    Identity: [0, true],
    Twox128: [16, false],
    Twox256: [32, false],
    Twox64Concat: [8, true]
};
function unwrapStorageSi(type) {
    return type.isPlain
        ? type.asPlain
        : type.asMap.value;
}
/** @internal */
function unwrapStorageType(registry, type, isOptional) {
    const outputType = getSiName(registry.lookup, unwrapStorageSi(type));
    return isOptional
        ? `Option<${outputType}>`
        : outputType;
}
/** @internal */
function decodeStorageKey(value) {
    if (isU8a(value) || !value || isString(value)) {
        // let Bytes handle these inputs
        return { key: value };
    }
    else if (value instanceof StorageKey) {
        return {
            key: value,
            method: value.method,
            section: value.section
        };
    }
    else if (isFunction$1(value)) {
        return {
            key: value(),
            method: value.method,
            section: value.section
        };
    }
    else if (Array.isArray(value)) {
        const [fn, args = []] = value;
        if (!isFunction$1(fn)) {
            throw new Error('Expected function input for key construction');
        }
        if (fn.meta && fn.meta.type.isMap) {
            const map = fn.meta.type.asMap;
            if (!Array.isArray(args) || args.length !== map.hashers.length) {
                throw new Error(`Expected an array of ${map.hashers.length} values as params to a Map query`);
            }
        }
        return {
            // This is unknown[] above (also where assigned), the linter thinks it is any[] here
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            key: fn(...args),
            method: fn.method,
            section: fn.section
        };
    }
    throw new Error(`Unable to convert input ${value} to StorageKey`);
}
/** @internal */
function decodeHashers(registry, value, hashers) {
    // the storage entry is xxhashAsU8a(prefix, 128) + xxhashAsU8a(method, 128), 256 bits total
    let offset = 32;
    const result = new Array(hashers.length);
    for (let i = 0; i < hashers.length; i++) {
        const [hasher, type] = hashers[i];
        const [hashLen, canDecode] = HASHER_MAP[hasher.type];
        const decoded = canDecode
            ? registry.createTypeUnsafe(getSiName(registry.lookup, type), [value.subarray(offset + hashLen)])
            : registry.createTypeUnsafe('Raw', [value.subarray(offset, offset + hashLen)]);
        offset += hashLen + (canDecode ? decoded.encodedLength : 0);
        result[i] = decoded;
    }
    return result;
}
/** @internal */
function decodeArgsFromMeta(registry, value, meta) {
    if (!meta || !meta.type.isMap) {
        return [];
    }
    const { hashers, key } = meta.type.asMap;
    const keys = hashers.length === 1
        ? [key]
        : registry.lookup.getSiType(key).def.asTuple;
    return decodeHashers(registry, value, hashers.map((h, i) => [h, keys[i]]));
}
/** @internal */
function getMeta(value) {
    if (value instanceof StorageKey) {
        return value.meta;
    }
    else if (isFunction$1(value)) {
        return value.meta;
    }
    else if (Array.isArray(value)) {
        const [fn] = value;
        return fn.meta;
    }
    return undefined;
}
/** @internal */
function getType(registry, value) {
    if (value instanceof StorageKey) {
        return value.outputType;
    }
    else if (isFunction$1(value)) {
        return unwrapStorageType(registry, value.meta.type);
    }
    else if (Array.isArray(value)) {
        const [fn] = value;
        if (fn.meta) {
            return unwrapStorageType(registry, fn.meta.type);
        }
    }
    // If we have no type set, default to Raw
    return 'Raw';
}
/**
 * @name StorageKey
 * @description
 * A representation of a storage key (typically hashed) in the system. It can be
 * constructed by passing in a raw key or a StorageEntry with (optional) arguments.
 */
class StorageKey extends Bytes {
    constructor(registry, value, override = {}) {
        const { key, method, section } = decodeStorageKey(value);
        super(registry, key);
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore This is assigned via this.decodeArgsFromMeta()
        _StorageKey_args.set(this, void 0);
        _StorageKey_meta.set(this, void 0);
        _StorageKey_outputType.set(this, void 0);
        _StorageKey_method.set(this, void 0);
        _StorageKey_section.set(this, void 0);
        __classPrivateFieldSet(this, _StorageKey_outputType, getType(registry, value), "f");
        // decode the args (as applicable based on the key and the hashers, after all init)
        this.setMeta(getMeta(value), override.section || section, override.method || method);
    }
    /**
     * @description Return the decoded arguments (applicable to map with decodable values)
     */
    get args() {
        return __classPrivateFieldGet(this, _StorageKey_args, "f");
    }
    /**
     * @description The metadata or `undefined` when not available
     */
    get meta() {
        return __classPrivateFieldGet(this, _StorageKey_meta, "f");
    }
    /**
     * @description The key method or `undefined` when not specified
     */
    get method() {
        return __classPrivateFieldGet(this, _StorageKey_method, "f");
    }
    /**
     * @description The output type
     */
    get outputType() {
        return __classPrivateFieldGet(this, _StorageKey_outputType, "f");
    }
    /**
     * @description The key section or `undefined` when not specified
     */
    get section() {
        return __classPrivateFieldGet(this, _StorageKey_section, "f");
    }
    is(key) {
        return key.section === this.section && key.method === this.method;
    }
    /**
     * @description Sets the meta for this key
     */
    setMeta(meta, section, method) {
        __classPrivateFieldSet(this, _StorageKey_meta, meta, "f");
        __classPrivateFieldSet(this, _StorageKey_method, method || __classPrivateFieldGet(this, _StorageKey_method, "f"), "f");
        __classPrivateFieldSet(this, _StorageKey_section, section || __classPrivateFieldGet(this, _StorageKey_section, "f"), "f");
        if (meta) {
            __classPrivateFieldSet(this, _StorageKey_outputType, unwrapStorageType(this.registry, meta.type), "f");
        }
        try {
            __classPrivateFieldSet(this, _StorageKey_args, decodeArgsFromMeta(this.registry, this.toU8a(true), meta), "f");
        }
        catch (error) {
            // ignore...
        }
        return this;
    }
    /**
     * @description Returns the Human representation for this type
     */
    toHuman() {
        return __classPrivateFieldGet(this, _StorageKey_args, "f").length
            ? __classPrivateFieldGet(this, _StorageKey_args, "f").map((a) => a.toHuman())
            : super.toHuman();
    }
    /**
     * @description Returns the raw type for this
     */
    toRawType() {
        return 'StorageKey';
    }
}
_StorageKey_args = new WeakMap(), _StorageKey_meta = new WeakMap(), _StorageKey_outputType = new WeakMap(), _StorageKey_method = new WeakMap(), _StorageKey_section = new WeakMap();

var baseTypes = /*#__PURE__*/Object.freeze({
    __proto__: null,
    BitVec: BitVec,
    Bool: bool,
    Bytes: Bytes,
    Data: Data,
    F32: f32,
    F64: f64,
    GenericAccountId: GenericAccountId,
    GenericAccountId32: GenericAccountId,
    GenericAccountId33: GenericAccountId33,
    GenericAccountIndex: GenericAccountIndex,
    GenericAddress: GenericMultiAddress,
    GenericBlock: GenericBlock,
    GenericCall: GenericCall,
    GenericChainProperties: GenericChainProperties,
    GenericConsensusEngineId: GenericConsensusEngineId,
    GenericEthereumAccountId: GenericEthereumAccountId,
    GenericEthereumLookupSource: GenericEthereumLookupSource,
    GenericEvent: GenericEvent,
    GenericEventData: GenericEventData,
    GenericExtrinsic: GenericExtrinsic,
    GenericExtrinsicEra: GenericExtrinsicEra,
    GenericExtrinsicPayload: GenericExtrinsicPayload,
    GenericExtrinsicPayloadUnknown: GenericExtrinsicPayloadUnknown,
    GenericExtrinsicPayloadV4: GenericExtrinsicPayloadV4,
    GenericExtrinsicSignatureV4: GenericExtrinsicSignatureV4,
    GenericExtrinsicUnknown: GenericExtrinsicUnknown,
    GenericExtrinsicV4: GenericExtrinsicV4,
    GenericImmortalEra: ImmortalEra,
    GenericLookupSource: GenericLookupSource,
    GenericMortalEra: MortalEra,
    GenericMultiAddress: GenericMultiAddress,
    GenericSignerPayload: GenericSignerPayload,
    GenericVote: GenericVote,
    I128: i128,
    I16: i16,
    I256: i256,
    I32: i32,
    I64: i64,
    I8: i8,
    Null: Null,
    OptionBool: OptionBool,
    StorageKey: StorageKey,
    Text: Text,
    Type: Type,
    U128: u128,
    U16: u16,
    U256: u256,
    U32: u32,
    U64: u64,
    U8: u8,
    USize: usize,
    bool: bool,
    f32: f32,
    f64: f64,
    i128: i128,
    i16: i16,
    i256: i256,
    i32: i32,
    i64: i64,
    i8: i8,
    u128: u128,
    u16: u16,
    u256: u256,
    u32: u32,
    u64: u64,
    u8: u8,
    usize: usize
});

function convert(fn) {
    return ({ name }) => fn(name);
}
const objectNameToCamel = convert(stringCamelCase);
const objectNameToString = convert((n) => n.toString());

function isTx(tx, callIndex) {
    return tx.callIndex[0] === callIndex[0] && tx.callIndex[1] === callIndex[1];
}
/** @internal */
function createUnchecked(registry, section, callIndex, callMetadata) {
    const expectedArgs = callMetadata.fields;
    const funcName = stringCamelCase(callMetadata.name);
    const extrinsicFn = (...args) => {
        if (expectedArgs.length !== args.length) {
            throw new Error(`Extrinsic ${section}.${funcName} expects ${expectedArgs.length} arguments, got ${args.length}.`);
        }
        return registry.createTypeUnsafe('Call', [{ args, callIndex }, callMetadata]);
    };
    extrinsicFn.is = (tx) => isTx(tx, callIndex);
    extrinsicFn.callIndex = callIndex;
    extrinsicFn.meta = callMetadata;
    extrinsicFn.method = funcName;
    extrinsicFn.section = section;
    extrinsicFn.toJSON = () => callMetadata.toJSON();
    return extrinsicFn;
}

function filterCallsSome({ calls }) {
    return calls.isSome;
}
function createCallFunction(registry, lookup, variant, sectionName, sectionIndex) {
    const { fields, index } = variant;
    const args = new Array(fields.length);
    for (let a = 0; a < fields.length; a++) {
        const { name, type, typeName } = fields[a];
        args[a] = objectSpread({
            name: stringCamelCase(name.unwrapOr(`param${a}`)),
            type: getSiName(lookup, type)
        }, typeName.isSome
            ? { typeName: typeName.unwrap() }
            : null);
    }
    return createUnchecked(registry, sectionName, new Uint8Array([sectionIndex, index.toNumber()]), registry.createTypeUnsafe('FunctionMetadataLatest', [objectSpread({ args }, variant)]));
}
/** @internal */
function decorateExtrinsics(registry, { lookup, pallets }, version) {
    const result = {};
    const filtered = pallets.filter(filterCallsSome);
    for (let i = 0; i < filtered.length; i++) {
        const { calls, index, name } = filtered[i];
        const sectionName = stringCamelCase(name);
        const sectionIndex = version >= 12 ? index.toNumber() : i;
        lazyMethod(result, sectionName, () => lazyVariants(lookup, calls.unwrap(), objectNameToCamel, (variant) => createCallFunction(registry, lookup, variant, sectionName, sectionIndex)));
    }
    return result;
}

/** @internal */
function createStorageHasher(registry, hasher) {
    // Blake2_128_Concat has been added at index 2, so we increment all the
    // indexes greater than 2
    if (hasher.toNumber() >= 2) {
        return registry.createTypeUnsafe('StorageHasherV10', [hasher.toNumber() + 1]);
    }
    return registry.createTypeUnsafe('StorageHasherV10', [hasher]);
}
/** @internal */
function createStorageType(registry, entryType) {
    if (entryType.isMap) {
        return [objectSpread({}, entryType.asMap, {
                hasher: createStorageHasher(registry, entryType.asMap.hasher)
            }), 1];
    }
    if (entryType.isDoubleMap) {
        return [objectSpread({}, entryType.asDoubleMap, {
                hasher: createStorageHasher(registry, entryType.asDoubleMap.hasher),
                key2Hasher: createStorageHasher(registry, entryType.asDoubleMap.key2Hasher)
            }), 2];
    }
    return [entryType.asPlain, 0];
}
/** @internal */
function convertModule(registry, mod) {
    const storage = mod.storage.unwrapOr(null);
    return registry.createTypeUnsafe('ModuleMetadataV10', [objectSpread({}, mod, {
            storage: storage
                ? objectSpread({}, storage, {
                    items: storage.items.map((item) => objectSpread({}, item, {
                        type: registry.createTypeUnsafe('StorageEntryTypeV10', createStorageType(registry, item.type))
                    }))
                })
                : null
        })]);
}
/** @internal */
function toV10(registry, { modules }) {
    return registry.createTypeUnsafe('MetadataV10', [{
            modules: modules.map((mod) => convertModule(registry, mod))
        }]);
}

/** @internal */
function toV11(registry, { modules }) {
    return registry.createTypeUnsafe('MetadataV11', [{
            // This is new in V11, pass V0 here - something non-existing, telling the API to use
            // the fallback for this information (on-chain detection)
            extrinsic: {
                signedExtensions: [],
                version: 0
            },
            modules
        }]);
}

/**
 * @internal
 **/
function toV12(registry, { extrinsic, modules }) {
    return registry.createTypeUnsafe('MetadataV12', [{
            extrinsic,
            modules: modules.map((mod) => registry.createTypeUnsafe('ModuleMetadataV12', [objectSpread({}, mod, { index: 255 })]))
        }]);
}

/**
 * @internal
 **/
function toV13(registry, metadata) {
    return registry.createTypeUnsafe('MetadataV13', [metadata]);
}

const typesAlias = {
    assets: {
        Approval: 'AssetApproval',
        ApprovalKey: 'AssetApprovalKey',
        Balance: 'TAssetBalance',
        DestroyWitness: 'AssetDestroyWitness'
    },
    babe: {
        EquivocationProof: 'BabeEquivocationProof'
    },
    balances: {
        Status: 'BalanceStatus'
    },
    beefy: {
        AuthorityId: 'BeefyId'
    },
    contracts: {
        StorageKey: 'ContractStorageKey'
    },
    electionProviderMultiPhase: {
        Phase: 'ElectionPhase'
    },
    ethereum: {
        Block: 'EthBlock',
        Header: 'EthHeader',
        Receipt: 'EthReceipt',
        Transaction: 'EthTransaction',
        TransactionStatus: 'EthTransactionStatus'
    },
    evm: {
        Account: 'EvmAccount',
        Log: 'EvmLog',
        Vicinity: 'EvmVicinity'
    },
    grandpa: {
        Equivocation: 'GrandpaEquivocation',
        EquivocationProof: 'GrandpaEquivocationProof'
    },
    identity: {
        Judgement: 'IdentityJudgement'
    },
    inclusion: {
        ValidatorIndex: 'ParaValidatorIndex'
    },
    paraDisputes: {
        ValidatorIndex: 'ParaValidatorIndex'
    },
    paraInclusion: {
        ValidatorIndex: 'ParaValidatorIndex'
    },
    paraScheduler: {
        ValidatorIndex: 'ParaValidatorIndex'
    },
    paraShared: {
        ValidatorIndex: 'ParaValidatorIndex'
    },
    parachains: {
        Id: 'ParaId'
    },
    parasDisputes: {
        ValidatorIndex: 'ParaValidatorIndex'
    },
    parasInclusion: {
        ValidatorIndex: 'ParaValidatorIndex'
    },
    parasScheduler: {
        ValidatorIndex: 'ParaValidatorIndex'
    },
    parasShared: {
        ValidatorIndex: 'ParaValidatorIndex'
    },
    proposeParachain: {
        Proposal: 'ParachainProposal'
    },
    proxy: {
        Announcement: 'ProxyAnnouncement'
    },
    scheduler: {
        ValidatorIndex: 'ParaValidatorIndex'
    },
    shared: {
        ValidatorIndex: 'ParaValidatorIndex'
    },
    society: {
        Judgement: 'SocietyJudgement',
        Vote: 'SocietyVote'
    },
    staking: {
        Compact: 'CompactAssignments'
    },
    treasury: {
        Proposal: 'TreasuryProposal'
    },
    xcm: {
        AssetId: 'XcmAssetId'
    },
    xcmPallet: {
        AssetId: 'XcmAssetId'
    }
};
/**
 * @description Get types for specific modules (metadata override)
 */
function getAliasTypes({ knownTypes }, section) {
    return objectSpread({}, typesAlias[section], knownTypes.typesAlias?.[section]);
}

const BOXES = [['<', '>'], ['<', ','], [',', '>'], ['(', ')'], ['(', ','], [',', ','], [',', ')']];
/**
 * Creates a compatible type mapping
 * @internal
 **/
function compatType(specs, _type) {
    const type = _type.toString();
    const index = specs.findIndex(({ def }) => def.HistoricMetaCompat === type);
    if (index !== -1) {
        return index;
    }
    return specs.push({
        def: {
            HistoricMetaCompat: type
        }
    }) - 1;
}
function compatTypes(specs, ...types) {
    for (let i = 0; i < types.length; i++) {
        compatType(specs, types[i]);
    }
}
function makeTupleType(specs, entries) {
    return specs.push({
        def: {
            Tuple: entries
        }
    }) - 1;
}
function makeVariantType(modName, variantType, specs, variants) {
    return specs.push({
        def: {
            Variant: { variants }
        },
        path: [`pallet_${modName.toString()}`, 'pallet', variantType]
    }) - 1;
}
/**
 * @internal
 * generate & register the OriginCaller type
 **/
function registerOriginCaller(registry, modules, metaVersion) {
    registry.register({
        OriginCaller: {
            _enum: modules
                .map((mod, index) => [
                mod.name.toString(),
                metaVersion >= 12
                    ? mod.index.toNumber()
                    : index
            ])
                .sort((a, b) => a[1] - b[1])
                .reduce((result, [name, index]) => {
                for (let i = Object.keys(result).length; i < index; i++) {
                    result[`Empty${i}`] = 'Null';
                }
                result[name] = knownOrigins[name] || 'Null';
                return result;
            }, {})
        }
    });
}
/**
 * Find and apply the correct type override
 * @internal
 **/
function setTypeOverride(sectionTypes, types) {
    types.forEach((type) => {
        const override = Object.keys(sectionTypes).find((aliased) => type.eq(aliased));
        if (override) {
            type.setOverride(sectionTypes[override]);
        }
        else {
            // FIXME: NOT happy with this approach, but gets over the initial hump cased by (Vec<Announcement>,BalanceOf)
            const orig = type.toString();
            const alias = Object
                .entries(sectionTypes)
                .reduce((result, [src, dst]) => BOXES.reduce((result, [a, z]) => result.replace(`${a}${src}${z}`, `${a}${dst}${z}`), result), orig);
            if (orig !== alias) {
                type.setOverride(alias);
            }
        }
    });
}
/**
 * Apply module-specific type overrides (always be done as part of toV14)
 * @internal
 **/
function convertCalls(specs, registry, modName, calls, sectionTypes) {
    const variants = calls.map(({ args, docs, name }, index) => {
        setTypeOverride(sectionTypes, args.map(({ type }) => type));
        return registry.createTypeUnsafe('SiVariant', [{
                docs,
                fields: args.map(({ name, type }) => registry.createTypeUnsafe('SiField', [{ name, type: compatType(specs, type) }])),
                index,
                name
            }]);
    });
    return registry.createTypeUnsafe('PalletCallMetadataV14', [{
            type: makeVariantType(modName, 'Call', specs, variants)
        }]);
}
/**
 * Apply module-specific type overrides (always be done as part of toV14)
 * @internal
 */
function convertConstants(specs, registry, constants, sectionTypes) {
    return constants.map(({ docs, name, type, value }) => {
        setTypeOverride(sectionTypes, [type]);
        return registry.createTypeUnsafe('PalletConstantMetadataV14', [{
                docs,
                name,
                type: compatType(specs, type),
                value
            }]);
    });
}
/**
 * Apply module-specific type overrides (always be done as part of toV14)
 * @internal
 */
function convertErrors(specs, registry, modName, errors, _sectionTypes) {
    const variants = errors.map(({ docs, name }, index) => registry.createTypeUnsafe('SiVariant', [{
            docs,
            fields: [],
            index,
            name
        }]));
    return registry.createTypeUnsafe('PalletErrorMetadataV14', [{
            type: makeVariantType(modName, 'Error', specs, variants)
        }]);
}
/**
 * Apply module-specific type overrides (always be done as part of toV14)
 * @internal
 **/
function convertEvents(specs, registry, modName, events, sectionTypes) {
    const variants = events.map(({ args, docs, name }, index) => {
        setTypeOverride(sectionTypes, args);
        return registry.createTypeUnsafe('SiVariant', [{
                docs,
                fields: args.map((t) => registry.createTypeUnsafe('SiField', [{ type: compatType(specs, t) }])),
                index,
                name
            }]);
    });
    return registry.createTypeUnsafe('PalletEventMetadataV14', [{
            type: makeVariantType(modName, 'Event', specs, variants)
        }]);
}
function createMapEntry(specs, registry, sectionTypes, { hashers, isLinked, isOptional, keys, value }) {
    setTypeOverride(sectionTypes, [value, ...(Array.isArray(keys) ? keys : [keys])]);
    return registry.createTypeUnsafe('StorageEntryTypeV14', [{
            Map: {
                hashers,
                key: hashers.length === 1
                    ? compatType(specs, keys[0])
                    : makeTupleType(specs, keys.map((t) => compatType(specs, t))),
                value: isLinked
                    // For previous-generation linked-map support, the actual storage result
                    // is a Tuple with the value and the Linkage (Option appears in teh value-part only)
                    ? compatType(specs, `(${isOptional ? `Option<${value.toString()}>` : value.toString()}, Linkage<${keys[0].toString()}>)`)
                    : compatType(specs, value)
            }
        }]);
}
/**
 * Apply module-specific storage type overrides (always part of toV14)
 * @internal
 **/
function convertStorage(specs, registry, { items, prefix }, sectionTypes) {
    return registry.createTypeUnsafe('PalletStorageMetadataV14', [{
            items: items.map(({ docs, fallback, modifier, name, type }) => {
                let entryType;
                if (type.isPlain) {
                    const plain = type.asPlain;
                    setTypeOverride(sectionTypes, [plain]);
                    entryType = registry.createTypeUnsafe('StorageEntryTypeV14', [{
                            Plain: compatType(specs, plain)
                        }]);
                }
                else if (type.isMap) {
                    const map = type.asMap;
                    entryType = createMapEntry(specs, registry, sectionTypes, {
                        hashers: [map.hasher],
                        isLinked: map.linked.isTrue,
                        isOptional: modifier.isOptional,
                        keys: [map.key],
                        value: map.value
                    });
                }
                else if (type.isDoubleMap) {
                    const dm = type.asDoubleMap;
                    entryType = createMapEntry(specs, registry, sectionTypes, {
                        hashers: [dm.hasher, dm.key2Hasher],
                        isLinked: false,
                        isOptional: modifier.isOptional,
                        keys: [dm.key1, dm.key2],
                        value: dm.value
                    });
                }
                else {
                    const nm = type.asNMap;
                    entryType = createMapEntry(specs, registry, sectionTypes, {
                        hashers: nm.hashers,
                        isLinked: false,
                        isOptional: modifier.isOptional,
                        keys: nm.keyVec,
                        value: nm.value
                    });
                }
                return registry.createTypeUnsafe('StorageEntryMetadataV14', [{
                        docs,
                        fallback,
                        modifier,
                        name,
                        type: entryType
                    }]);
            }),
            prefix
        }]);
}
/** @internal */
function convertExtrinsic(registry, { signedExtensions, version }) {
    return registry.createTypeUnsafe('ExtrinsicMetadataV14', [{
            signedExtensions: signedExtensions.map((identifier) => ({
                identifier,
                type: 0 // we don't map the fields at all
            })),
            type: 0,
            version
        }]);
}
/** @internal */
function createPallet(specs, registry, mod, { calls, constants, errors, events, storage }) {
    const sectionTypes = getAliasTypes(registry, stringCamelCase(mod.name));
    return registry.createTypeUnsafe('PalletMetadataV14', [{
            calls: calls && convertCalls(specs, registry, mod.name, calls, sectionTypes),
            constants: convertConstants(specs, registry, constants, sectionTypes),
            errors: errors && convertErrors(specs, registry, mod.name, errors),
            events: events && convertEvents(specs, registry, mod.name, events, sectionTypes),
            index: mod.index,
            name: mod.name,
            storage: storage && convertStorage(specs, registry, storage, sectionTypes)
        }]);
}
/**
 * Convert the Metadata to v14
 * @internal
 **/
function toV14(registry, v13, metaVersion) {
    const specs = [];
    // position 0 always has Null, additionally add internal defaults
    compatTypes(specs, 'Null', 'u8', 'u16', 'u32', 'u64');
    registerOriginCaller(registry, v13.modules, metaVersion);
    const extrinsic = convertExtrinsic(registry, v13.extrinsic);
    const pallets = v13.modules.map((mod) => createPallet(specs, registry, mod, {
        calls: mod.calls.unwrapOr(null),
        constants: mod.constants,
        errors: mod.errors.length ? mod.errors : null,
        events: mod.events.unwrapOr(null),
        storage: mod.storage.unwrapOr(null)
    }));
    return registry.createTypeUnsafe('MetadataV14', [{
            extrinsic,
            lookup: {
                types: specs.map((type, id) => registry.createTypeUnsafe('PortableType', [{ id, type }]))
            },
            pallets
        }]);
}

/**
 * Convert the Metadata (which is an alias) to latest
 * @internal
 **/
function toLatest(registry, v14, _metaVersion) {
    return v14;
}

const MAGIC_NUMBER = 0x6174656d; // `meta`, reversed for Little Endian encoding
class MagicNumber extends u32 {
    constructor(registry, value) {
        super(registry, value);
        if (!this.isEmpty && !this.eq(MAGIC_NUMBER)) {
            throw new Error(`MagicNumber mismatch: expected ${registry.createTypeUnsafe('u32', [MAGIC_NUMBER]).toHex()}, found ${this.toHex()}`);
        }
    }
}

var _MetadataVersioned_converted, _MetadataVersioned_assertVersion, _MetadataVersioned_getVersion, _MetadataVersioned_metadata;
const KNOWN_VERSIONS = [14, 13, 12, 11, 10, 9];
const LATEST_VERSION = KNOWN_VERSIONS[0];
/**
 * @name MetadataVersioned
 * @description
 * The versioned runtime metadata as a decoded structure
 */
class MetadataVersioned extends Struct {
    constructor(registry, value) {
        // const timeStart = performance.now()
        super(registry, {
            magicNumber: MagicNumber,
            metadata: 'MetadataAll'
        }, value);
        _MetadataVersioned_converted.set(this, new Map());
        _MetadataVersioned_assertVersion.set(this, (version) => {
            if (this.version > version) {
                throw new Error(`Cannot convert metadata from version ${this.version} to ${version}`);
            }
            return this.version === version;
        });
        _MetadataVersioned_getVersion.set(this, (version, fromPrev) => {
            const asCurr = `asV${version}`;
            const asPrev = version === 'latest'
                ? `asV${LATEST_VERSION}`
                : `asV${version - 1}`;
            if (version !== 'latest' && __classPrivateFieldGet(this, _MetadataVersioned_assertVersion, "f").call(this, version)) {
                return __classPrivateFieldGet(this, _MetadataVersioned_metadata, "f").call(this)[asCurr];
            }
            if (!__classPrivateFieldGet(this, _MetadataVersioned_converted, "f").has(version)) {
                __classPrivateFieldGet(this, _MetadataVersioned_converted, "f").set(version, fromPrev(this.registry, this[asPrev], this.version));
            }
            return __classPrivateFieldGet(this, _MetadataVersioned_converted, "f").get(version);
        });
        /**
         * @description the metadata wrapped
         */
        _MetadataVersioned_metadata.set(this, () => {
            return this.getT('metadata');
        });
        // console.log('MetadataVersioned', `${(performance.now() - timeStart).toFixed(2)}ms`)
    }
    /**
     * @description Returns the wrapped metadata as a limited calls-only (latest) version
     */
    get asCallsOnly() {
        return new MetadataVersioned(this.registry, {
            magicNumber: this.magicNumber,
            metadata: this.registry.createTypeUnsafe('MetadataAll', [toCallsOnly(this.registry, this.asLatest), LATEST_VERSION])
        });
    }
    /**
     * @description Returns the wrapped metadata as a V9 object
     */
    get asV9() {
        __classPrivateFieldGet(this, _MetadataVersioned_assertVersion, "f").call(this, 9);
        return __classPrivateFieldGet(this, _MetadataVersioned_metadata, "f").call(this).asV9;
    }
    /**
     * @description Returns the wrapped values as a V10 object
     */
    get asV10() {
        return __classPrivateFieldGet(this, _MetadataVersioned_getVersion, "f").call(this, 10, toV10);
    }
    /**
     * @description Returns the wrapped values as a V11 object
     */
    get asV11() {
        return __classPrivateFieldGet(this, _MetadataVersioned_getVersion, "f").call(this, 11, toV11);
    }
    /**
     * @description Returns the wrapped values as a V12 object
     */
    get asV12() {
        return __classPrivateFieldGet(this, _MetadataVersioned_getVersion, "f").call(this, 12, toV12);
    }
    /**
     * @description Returns the wrapped values as a V13 object
     */
    get asV13() {
        return __classPrivateFieldGet(this, _MetadataVersioned_getVersion, "f").call(this, 13, toV13);
    }
    /**
     * @description Returns the wrapped values as a V14 object
     */
    get asV14() {
        return __classPrivateFieldGet(this, _MetadataVersioned_getVersion, "f").call(this, 14, toV14);
    }
    /**
     * @description Returns the wrapped values as a latest version object
     */
    get asLatest() {
        return __classPrivateFieldGet(this, _MetadataVersioned_getVersion, "f").call(this, 'latest', toLatest);
    }
    /**
     * @description The magicNumber for the Metadata (known constant)
     */
    get magicNumber() {
        return this.getT('magicNumber');
    }
    /**
     * @description the metadata version this structure represents
     */
    get version() {
        return __classPrivateFieldGet(this, _MetadataVersioned_metadata, "f").call(this).index;
    }
    getUniqTypes(throwError) {
        return getUniqTypes(this.registry, this.asLatest, throwError);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        // HACK(y): ensure that we apply the aliases if we have not done so already, this is
        // needed to ensure we have the correct overrides (which is only applied in toLatest)
        // eslint-disable-next-line no-unused-expressions
        this.asLatest;
        return super.toJSON();
    }
}
_MetadataVersioned_converted = new WeakMap(), _MetadataVersioned_assertVersion = new WeakMap(), _MetadataVersioned_getVersion = new WeakMap(), _MetadataVersioned_metadata = new WeakMap();

const EMPTY_METADATA = new Uint8Array([0x6d, 0x65, 0x74, 0x61, 9]);
const VERSION_IDX = EMPTY_METADATA.length - 1;
/** @internal */
function decodeU8a(registry, u8a) {
    if (u8a.length === 0) {
        return EMPTY_METADATA;
    }
    else if (u8a[VERSION_IDX] === 9) {
        // This is an f-ing hack as a follow-up to another ugly hack
        // https://github.com/polkadot-js/api/commit/a9211690be6b68ad6c6dad7852f1665cadcfa5b2
        // when we fail on V9, try to re-parse it as v10...
        try {
            return new MetadataVersioned(registry, u8a);
        }
        catch (error) {
            u8a[VERSION_IDX] = 10;
            return u8a;
        }
    }
    return u8a;
}
/**
 * @name Metadata
 * @description
 * The versioned runtime metadata as a decoded structure
 */
class Metadata extends MetadataVersioned {
    constructor(registry, value) {
        // const timeStart = performance.now()
        super(registry, isU8a(value) || isString(value)
            ? decodeU8a(registry, u8aToU8a(value))
            : value);
        // console.log('Metadata', `${(performance.now() - timeStart).toFixed(2)}ms`)
    }
}

/** @internal */
function decorateConstants(registry, { pallets }, _version) {
    const result = {};
    for (let i = 0; i < pallets.length; i++) {
        const { constants, name } = pallets[i];
        if (!constants.isEmpty) {
            lazyMethod(result, stringCamelCase(name), () => lazyMethods({}, constants, (constant) => {
                const codec = registry.createTypeUnsafe(registry.createLookupType(constant.type), [hexToU8a(constant.value.toHex())]);
                codec.meta = constant;
                return codec;
            }, objectNameToCamel));
        }
    }
    return result;
}

function variantToMeta(lookup, variant) {
    return objectSpread({ args: variant.fields.map(({ type }) => lookup.getTypeDef(type).type) }, variant);
}
/** @internal */
function decorateErrors(registry, { lookup, pallets }, version) {
    const result = {};
    for (let i = 0; i < pallets.length; i++) {
        const { errors, index, name } = pallets[i];
        if (errors.isSome) {
            const sectionIndex = version >= 12 ? index.toNumber() : i;
            lazyMethod(result, stringCamelCase(name), () => lazyVariants(lookup, errors.unwrap(), objectNameToString, (variant) => ({
                // We sprinkle in isCodec & isU8a to ensure we are dealing with the correct objects
                is: (errorMod) => isCodec$1(errorMod) &&
                    isCodec$1(errorMod.index) &&
                    errorMod.index.eq(sectionIndex) && (isU8a(errorMod.error)
                    ? errorMod.error[0] === variant.index.toNumber()
                    : isCodec$1(errorMod.error) && errorMod.error.eq(variant.index)),
                meta: registry.createTypeUnsafe('ErrorMetadataLatest', [variantToMeta(lookup, variant)])
            })));
        }
    }
    return result;
}

function filterEventsSome({ events }) {
    return events.isSome;
}
/** @internal */
function decorateEvents(registry, { lookup, pallets }, version) {
    const result = {};
    const filtered = pallets.filter(filterEventsSome);
    for (let i = 0; i < filtered.length; i++) {
        const { events, index, name } = filtered[i];
        const sectionIndex = version >= 12 ? index.toNumber() : i;
        lazyMethod(result, stringCamelCase(name), () => lazyVariants(lookup, events.unwrap(), objectNameToString, (variant) => ({
            // We sprinkle in isCodec & isU8a to ensure we are dealing with the correct objects
            is: (eventRecord) => isCodec$1(eventRecord) &&
                isU8a(eventRecord.index) &&
                sectionIndex === eventRecord.index[0] &&
                variant.index.eq(eventRecord.index[1]),
            meta: registry.createTypeUnsafe('EventMetadataLatest', [variantToMeta(lookup, variant)])
        })));
    }
    return result;
}

const DEFAULT_FN = (data) => xxhashAsU8a(data, 128);
const HASHERS = {
    Blake2_128: (data) => // eslint-disable-line camelcase
     blake2AsU8a(data, 128),
    Blake2_128Concat: (data) => // eslint-disable-line camelcase
     u8aConcat(blake2AsU8a(data, 128), u8aToU8a(data)),
    Blake2_256: (data) => // eslint-disable-line camelcase
     blake2AsU8a(data, 256),
    Identity: (data) => u8aToU8a(data),
    Twox128: (data) => xxhashAsU8a(data, 128),
    Twox256: (data) => xxhashAsU8a(data, 256),
    Twox64Concat: (data) => u8aConcat(xxhashAsU8a(data, 64), u8aToU8a(data))
};
/** @internal */
function getHasher(hasher) {
    return HASHERS[hasher.type] || DEFAULT_FN;
}

const NO_RAW_ARGS = {
    args: [],
    hashers: [],
    keys: []
};
/** @internal */
function filterDefined(a) {
    return !isUndefined(a);
}
/** @internal */
function assertArgs({ method, section }, { args, keys }) {
    if (!Array.isArray(args)) {
        throw new Error(`Call to ${stringCamelCase(section || 'unknown')}.${stringCamelCase(method || 'unknown')} needs ${keys.length} arguments`);
    }
    else if (args.filter(filterDefined).length !== keys.length) {
        throw new Error(`Call to ${stringCamelCase(section || 'unknown')}.${stringCamelCase(method || 'unknown')} needs ${keys.length} arguments, found [${args.join(', ')}]`);
    }
}
/** @internal */
function createKeyRawParts(registry, itemFn, { args, hashers, keys }) {
    const extra = new Array(keys.length);
    for (let i = 0; i < keys.length; i++) {
        extra[i] = getHasher(hashers[i])(registry.createTypeUnsafe(registry.createLookupType(keys[i]), [args[i]]).toU8a());
    }
    return [
        [
            xxhashAsU8a(itemFn.prefix, 128),
            xxhashAsU8a(itemFn.method, 128)
        ],
        extra
    ];
}
/** @internal */
function createKeyInspect(registry, itemFn, args) {
    assertArgs(itemFn, args);
    const { meta } = itemFn;
    const [prefix, extra] = createKeyRawParts(registry, itemFn, args);
    let types = [];
    if (meta.type.isMap) {
        const { hashers, key } = meta.type.asMap;
        types = hashers.length === 1
            ? [`${hashers[0].type}(${getSiName(registry.lookup, key)})`]
            : registry.lookup.getSiType(key).def.asTuple.map((k, i) => `${hashers[i].type}(${getSiName(registry.lookup, k)})`);
    }
    const names = ['module', 'method'].concat(...args.args.map((_, i) => types[i]));
    return {
        inner: prefix
            .concat(...extra)
            .map((v, i) => ({ name: names[i], outer: [v] }))
    };
}
/** @internal */
function createKeyRaw(registry, itemFn, args) {
    const [prefix, extra] = createKeyRawParts(registry, itemFn, args);
    return u8aConcat(...prefix, ...extra);
}
/** @internal */
function createKey(registry, itemFn, args) {
    assertArgs(itemFn, args);
    // always add the length prefix (underlying it is Bytes)
    return compactAddLength(createKeyRaw(registry, itemFn, args));
}
/** @internal */
function createStorageInspect(registry, itemFn, options) {
    const { meta: { type } } = itemFn;
    return (...args) => {
        if (type.isPlain) {
            return options.skipHashing
                ? { inner: [], name: 'wellKnown', outer: [u8aToU8a(options.key)] }
                : createKeyInspect(registry, itemFn, NO_RAW_ARGS);
        }
        const { hashers, key } = type.asMap;
        return hashers.length === 1
            ? createKeyInspect(registry, itemFn, { args, hashers, keys: [key] })
            : createKeyInspect(registry, itemFn, { args, hashers, keys: registry.lookup.getSiType(key).def.asTuple });
    };
}
/** @internal */
function createStorageFn(registry, itemFn, options) {
    const { meta: { type } } = itemFn;
    let cacheKey = null;
    // Can only have zero or one argument:
    //   - storage.system.account(address)
    //   - storage.timestamp.blockPeriod()
    // For higher-map queries the params are passed in as an tuple, [key1, key2]
    return (...args) => {
        if (type.isPlain) {
            if (!cacheKey) {
                cacheKey = options.skipHashing
                    ? compactAddLength(u8aToU8a(options.key))
                    : createKey(registry, itemFn, NO_RAW_ARGS);
            }
            return cacheKey;
        }
        const { hashers, key } = type.asMap;
        return hashers.length === 1
            ? createKey(registry, itemFn, { args, hashers, keys: [key] })
            : createKey(registry, itemFn, { args, hashers, keys: registry.lookup.getSiType(key).def.asTuple });
    };
}
/** @internal */
function createWithMeta(registry, itemFn, options) {
    const { meta, method, prefix, section } = itemFn;
    const storageFn = createStorageFn(registry, itemFn, options);
    storageFn.inspect = createStorageInspect(registry, itemFn, options);
    storageFn.meta = meta;
    storageFn.method = stringCamelCase(method);
    storageFn.prefix = prefix;
    storageFn.section = section;
    // explicitly add the actual method in the toJSON, this gets used to determine caching and without it
    // instances (e.g. collective) will not work since it is only matched on param meta
    storageFn.toJSON = () => objectSpread({ storage: { method, prefix, section } }, meta.toJSON());
    return storageFn;
}
/** @internal */
function extendHeadMeta(registry, { meta: { docs, name, type }, section }, { method }, iterFn) {
    // metadata with a fallback value using the type of the key, the normal
    // meta fallback only applies to actual entry values, create one for head
    const meta = registry.createTypeUnsafe('StorageEntryMetadataLatest', [{
            docs,
            fallback: registry.createTypeUnsafe('Bytes', []),
            modifier: registry.createTypeUnsafe('StorageEntryModifierLatest', [1]),
            name,
            type: registry.createTypeUnsafe('StorageEntryTypeLatest', [type.asMap.key, 0])
        }]);
    iterFn.meta = meta;
    const fn = (...args) => registry.createTypeUnsafe('StorageKey', [iterFn(...args), { method, section }]);
    fn.meta = meta;
    return fn;
}
/** @internal */
function extendPrefixedMap(registry, itemFn, storageFn) {
    const { meta: { type }, method, section } = itemFn;
    storageFn.iterKey = extendHeadMeta(registry, itemFn, storageFn, (...args) => {
        if (args.length && (type.isPlain || (args.length >= type.asMap.hashers.length))) {
            throw new Error(`Iteration of ${stringCamelCase(section || 'unknown')}.${stringCamelCase(method || 'unknown')} needs arguments to be at least one less than the full arguments, found [${args.join(', ')}]`);
        }
        if (args.length) {
            if (type.isMap) {
                const { hashers, key } = type.asMap;
                const keysVec = hashers.length === 1
                    ? [key]
                    : registry.lookup.getSiType(key).def.asTuple;
                return new Raw(registry, createKeyRaw(registry, itemFn, { args, hashers: hashers.slice(0, args.length), keys: keysVec.slice(0, args.length) }));
            }
        }
        return new Raw(registry, createKeyRaw(registry, itemFn, NO_RAW_ARGS));
    });
    return storageFn;
}
/** @internal */
function createFunction(registry, itemFn, options) {
    const { meta: { type } } = itemFn;
    const storageFn = createWithMeta(registry, itemFn, options);
    if (type.isMap) {
        extendPrefixedMap(registry, itemFn, storageFn);
    }
    storageFn.keyPrefix = (...args) => (storageFn.iterKey && storageFn.iterKey(...args)) ||
        compactStripLength(storageFn())[1];
    return storageFn;
}

function findSiPrimitive(registry, _prim) {
    const prim = _prim.toLowerCase();
    return registry.lookup.types.find((t) => (t.type.def.isPrimitive &&
        t.type.def.asPrimitive.toString().toLowerCase() === prim) || (t.type.def.isHistoricMetaCompat &&
        t.type.def.asHistoricMetaCompat.toString().toLowerCase() === prim));
}
function findSiType(registry, orig) {
    let portable = findSiPrimitive(registry, orig);
    if (!portable && orig === 'Bytes') {
        const u8 = findSiPrimitive(registry, 'u8');
        if (u8) {
            portable = registry.lookup.types.find((t) => (t.type.def.isSequence &&
                t.type.def.asSequence.type.eq(u8.id)) || (t.type.def.isHistoricMetaCompat &&
                t.type.def.asHistoricMetaCompat.eq(orig)));
        }
    }
    if (!portable) {
        console.warn(`Unable to map ${orig} to a lookup index`);
    }
    return portable;
}
/** @internal */
function createRuntimeFunction({ method, prefix, section }, key, { docs, type }) {
    return (registry) => createFunction(registry, {
        meta: registry.createTypeUnsafe('StorageEntryMetadataLatest', [{
                docs: registry.createTypeUnsafe('Vec<Text>', [[docs]]),
                modifier: registry.createTypeUnsafe('StorageEntryModifierLatest', ['Required']),
                name: registry.createTypeUnsafe('Text', [method]),
                toJSON: () => key,
                type: registry.createTypeUnsafe('StorageEntryTypeLatest', [{ Plain: findSiType(registry, type)?.id || 0 }])
            }]),
        method,
        prefix,
        section
    }, { key, skipHashing: true });
}

const prefix = 'Substrate';
const section = 'substrate';
function createSubstrateFn(method, key, meta) {
    return createRuntimeFunction({ method, prefix, section }, key, meta);
}
const substrate = {
    changesTrieConfig: createSubstrateFn('changesTrieConfig', ':changes_trie', {
        docs: 'Changes trie configuration is stored under this key.',
        type: 'u32'
    }),
    childStorageKeyPrefix: createSubstrateFn('childStorageKeyPrefix', ':child_storage:', {
        docs: 'Prefix of child storage keys.',
        type: 'u32'
    }),
    code: createSubstrateFn('code', ':code', {
        docs: 'Wasm code of the runtime.',
        type: 'Bytes'
    }),
    extrinsicIndex: createSubstrateFn('extrinsicIndex', ':extrinsic_index', {
        docs: 'Current extrinsic index (u32) is stored under this key.',
        type: 'u32'
    }),
    heapPages: createSubstrateFn('heapPages', ':heappages', {
        docs: 'Number of wasm linear memory pages required for execution of the runtime.',
        type: 'u64'
    })
};

/** @internal */
function getStorage(registry) {
    const storage = {};
    const entries = Object.entries(substrate);
    for (let e = 0; e < entries.length; e++) {
        storage[entries[e][0]] = entries[e][1](registry);
    }
    return { substrate: storage };
}

const VERSION_NAME = 'palletVersion';
const VERSION_KEY = ':__STORAGE_VERSION__:';
const VERSION_DOCS = { docs: 'Returns the current pallet version from storage', type: 'u16' };
/** @internal */
function decorateStorage(registry, { pallets }, _metaVersion) {
    const result = getStorage(registry);
    for (let i = 0; i < pallets.length; i++) {
        const { name, storage } = pallets[i];
        if (storage.isSome) {
            const section = stringCamelCase(name);
            const { items, prefix: _prefix } = storage.unwrap();
            const prefix = _prefix.toString();
            lazyMethod(result, section, () => lazyMethods({
                palletVersion: createRuntimeFunction({ method: VERSION_NAME, prefix, section }, createKeyRaw(registry, { method: VERSION_KEY, prefix: name.toString() }, NO_RAW_ARGS), VERSION_DOCS)(registry)
            }, items, (meta) => createFunction(registry, { meta, method: meta.name.toString(), prefix, section }, {}), objectNameToCamel));
        }
    }
    return result;
}

/**
 * Expands the metadata by decoration into consts, query and tx sections
 */
function expandMetadata(registry, metadata) {
    if (!(metadata instanceof Metadata)) {
        throw new Error('You need to pass a valid Metadata instance to Decorated');
    }
    const latest = metadata.asLatest;
    const version = metadata.version;
    return {
        consts: decorateConstants(registry, latest),
        errors: decorateErrors(registry, latest, version),
        events: decorateEvents(registry, latest, version),
        query: decorateStorage(registry, latest),
        registry,
        tx: decorateExtrinsics(registry, latest, version)
    };
}

var _PortableRegistry_instances, _PortableRegistry_alias, _PortableRegistry_lookups, _PortableRegistry_names, _PortableRegistry_params, _PortableRegistry_typeDefs, _PortableRegistry_types, _PortableRegistry_createSiDef, _PortableRegistry_getLookupId, _PortableRegistry_extract, _PortableRegistry_extractArray, _PortableRegistry_extractBitSequence, _PortableRegistry_extractCompact, _PortableRegistry_extractComposite, _PortableRegistry_extractCompositeSet, _PortableRegistry_extractFields, _PortableRegistry_extractFieldsAlias, _PortableRegistry_extractHistoric, _PortableRegistry_extractPrimitive, _PortableRegistry_extractAliasPath, _PortableRegistry_extractSequence, _PortableRegistry_extractTuple, _PortableRegistry_extractVariant, _PortableRegistry_extractVariantEnum;
const l$6 = logger('PortableRegistry');
const TYPE_UNWRAP = { toNumber: () => -1 };
const PRIMITIVE_ALIAS = {
    Char: 'u32',
    Str: 'Text'
};
const PATHS_ALIAS = splitNamespace([
    // full matching on exact names...
    // these are well-known types with additional encoding
    'sp_core::crypto::AccountId32',
    'sp_runtime::generic::era::Era',
    'sp_runtime::multiaddress::MultiAddress',
    // ethereum overrides (Frontier, Moonbeam, Polkadot claims)
    'account::AccountId20',
    'polkadot_runtime_common::claims::EthereumAddress',
    // weights 2 is a structure, however for 1.5. with a single field it
    // should be flatenned (can appear in Compact<Weight> extrinsics)
    'frame_support::weights::weight_v2::Weight',
    'sp_weights::weight_v2::Weight',
    // wildcard matching in place...
    // these have a specific encoding or logic, use a wildcard for {pallet, darwinia}_democracy
    '*_democracy::vote::Vote',
    '*_conviction_voting::vote::Vote',
    '*_identity::types::Data',
    // these are opaque Vec<u8> wrappers
    'sp_core::OpaqueMetadata',
    'sp_core::OpaquePeerId',
    'sp_core::offchain::OpaqueMultiaddr',
    // shorten some well-known types
    'primitive_types::*',
    'sp_arithmetic::per_things::*',
    // runtime
    '*_runtime::RuntimeCall',
    '*_runtime::RuntimeEvent',
    // ink!
    'ink::env::types::*',
    'ink::primitives::types::*',
    'ink_env::types::*',
    'ink_primitives::types::*'
]);
const PATHS_SET = splitNamespace([
    'pallet_identity::types::BitFlags'
]);
const BITVEC_NS_LSB = ['bitvec::order::Lsb0', 'BitOrderLsb0'];
const BITVEC_NS_MSB = ['bitvec::order::Msb0', 'BitOrderMsb0'];
const BITVEC_NS = [...BITVEC_NS_LSB, ...BITVEC_NS_MSB];
const WRAPPERS = ['BoundedBTreeMap', 'BoundedBTreeSet', 'BoundedVec', 'Box', 'BTreeMap', 'BTreeSet', 'Cow', 'Option', 'Range', 'RangeInclusive', 'Result', 'WeakBoundedVec', 'WrapperKeepOpaque', 'WrapperOpaque'];
const RESERVED = [
    // JS reserved words
    'entries', 'keys', 'new', 'size',
    // exposed by all Codec objects
    'hash', 'registry'
];
const PATH_RM_INDEX_1 = ['generic', 'misc', 'pallet', 'traits', 'types'];
/** @internal Converts a Text[] into string[] (used as part of definitions) */
function sanitizeDocs(docs) {
    const result = new Array(docs.length);
    for (let i = 0; i < docs.length; i++) {
        result[i] = docs[i].toString();
    }
    return result;
}
/** @internal Split a namespace with :: into individual parts */
function splitNamespace(values) {
    const result = new Array(values.length);
    for (let i = 0; i < values.length; i++) {
        result[i] = values[i].split('::');
    }
    return result;
}
/** @internal Match a namespace based on parts (alongside wildcards) */
function matchParts(first, second) {
    return first.length === second.length && first.every((a, index) => {
        const b = second[index].toString();
        if ((a === '*') || (a === b)) {
            return true;
        }
        if (a.includes('*') && a.includes('_') && b.includes('_')) {
            let suba = a.split('_');
            let subb = b.split('_');
            // match initial *'s to multiples if we have a match for the other
            if (suba[0] === '*') {
                const indexOf = subb.indexOf(suba[1]);
                if (indexOf !== -1) {
                    suba = suba.slice(1);
                    subb = subb.slice(indexOf);
                }
            }
            // check for * matches at the end, adjust accordingly
            if ((suba.length === 2) && (suba[1] === '*') && (suba[0] === subb[0])) {
                return true;
            }
            return matchParts(suba, subb);
        }
        return false;
    });
}
/** @internal check if the path matches the PATHS_ALIAS (with wildcards) */
function getAliasPath({ def, path }) {
    // specific logic for weights - we override when non-complex struct
    // (as applied in Weight 1.5 where we also have `Compact<{ refTime: u64 }>)
    if (['frame_support::weights::weight_v2::Weight', 'sp_weights::weight_v2::Weight'].includes(path.join('::'))) {
        return !def.isComposite || def.asComposite.fields.length === 1
            ? 'WeightV1'
            : null;
    }
    // TODO We need to handle ink! Balance in some way
    return path.length && PATHS_ALIAS.some((a) => matchParts(a, path))
        ? path[path.length - 1].toString()
        : null;
}
/** @internal Converts a type name into a JS-API compatible name */
function extractNameFlat(portable, lookupIndex, params, path, isInternal = false) {
    const count = path.length;
    // if we have no path or determined as a wrapper, we just skip it
    if (count === 0 || WRAPPERS.includes(path[count - 1].toString())) {
        return null;
    }
    const camels = new Array(count);
    const lowers = new Array(count);
    // initially just create arrays of the camelCase and lowercase path
    // parts - we will check these to extract the final values. While
    // we have 2 loops here, we also don't do the same operation twice
    for (let i = 0; i < count; i++) {
        const c = stringPascalCase(isInternal
            ? path[i].replace('pallet_', '')
            : path[i]);
        const l = c.toLowerCase();
        camels[i] = c;
        lowers[i] = l;
    }
    let name = '';
    for (let i = 0; i < count; i++) {
        const l = lowers[i];
        // Remove ::{generic, misc, pallet, traits, types}::
        if (i !== 1 || !PATH_RM_INDEX_1.includes(l)) {
            // sp_runtime::generic::digest::Digest -> sp_runtime::generic::Digest
            // sp_runtime::multiaddress::MultiAddress -> sp_runtime::MultiAddress
            if (l !== lowers[i + 1]) {
                name += camels[i];
            }
        }
    }
    // do magic for RawOrigin lookup, e.g. pallet_collective::RawOrigin
    if (camels[1] === 'RawOrigin' && count === 2 && params.length === 2 && params[1].type.isSome) {
        const instanceType = portable[params[1].type.unwrap().toNumber()];
        if (instanceType.type.path.length === 2) {
            name = `${name}${instanceType.type.path[1].toString()}`;
        }
    }
    return { lookupIndex, name, params };
}
/** @internal Alias for extractNameFlat with PortableType as a last parameter */
function extractName(portable, lookupIndex, { type: { params, path } }) {
    return extractNameFlat(portable, lookupIndex, params, path);
}
/** @internal Check for dupes from a specific index onwards */
function nextDupeMatches(name, startAt, names) {
    const result = [names[startAt]];
    for (let i = startAt + 1; i < names.length; i++) {
        const v = names[i];
        if (v.name === name) {
            result.push(v);
        }
    }
    return result;
}
/** @internal Checks to see if a type is a full duplicate (with all params matching) */
function rewriteDupes(input, rewrite) {
    const count = input.length;
    for (let i = 0; i < count; i++) {
        const a = input[i];
        for (let j = i + 1; j < count; j++) {
            const b = input[j];
            // if the indexes are not the same and the names match, we have a dupe
            if (a.lookupIndex !== b.lookupIndex && a.name === b.name) {
                return false;
            }
        }
    }
    // add all the adjusted values to the rewite map
    for (let i = 0; i < count; i++) {
        const p = input[i];
        rewrite[p.lookupIndex] = p.name;
    }
    return true;
}
/** @internal Find duplicates and adjust the names based on parameters */
function removeDupeNames(lookup, portable, names) {
    const rewrite = {};
    return names
        .map((original, startAt) => {
        const { lookupIndex, name, params } = original;
        if (!name) {
            // the name is empty (this is not expected, but have a failsafe)
            return null;
        }
        else if (rewrite[lookupIndex]) {
            // we have already rewritten this one, we can skip it
            return original;
        }
        // those where the name is matching starting from this index
        const allSame = nextDupeMatches(name, startAt, names);
        // we only have one, so all ok
        if (allSame.length === 1) {
            return original;
        }
        // are there param differences between matching names
        const anyDiff = allSame.some((o) => params.length !== o.params.length ||
            params.some((p, index) => !p.name.eq(o.params[index].name) ||
                p.type.unwrapOr(TYPE_UNWRAP).toNumber() !== o.params[index].type.unwrapOr(TYPE_UNWRAP).toNumber()));
        // everything matches, we can combine these
        if (!anyDiff) {
            return original;
        }
        // TODO We probably want to attach all the indexes with differences,
        // not just the first
        // find the first parameter that yields differences
        const paramIdx = params.findIndex(({ type }, index) => allSame.every(({ params }, aIndex) => params[index].type.isSome && (aIndex === 0 ||
            !params[index].type.eq(type))));
        // No param found that is different
        if (paramIdx === -1) {
            return original;
        }
        // see if using the param type helps
        const adjusted = new Array(allSame.length);
        // loop through all, specifically checking that index where the
        // first param yields differences
        for (let i = 0; i < allSame.length; i++) {
            const { lookupIndex, name, params } = allSame[i];
            const { def, path } = lookup.getSiType(params[paramIdx].type.unwrap());
            // if it is not a primitive and it doesn't have a path, we really cannot
            // do anything at this point
            if (!def.isPrimitive && !path.length) {
                return null;
            }
            adjusted[i] = {
                lookupIndex,
                name: def.isPrimitive
                    ? `${name}${def.asPrimitive.toString()}`
                    : `${name}${path[path.length - 1].toString()}`
            };
        }
        // check to see if the adjusted names have no issues
        if (rewriteDupes(adjusted, rewrite)) {
            return original;
        }
        // TODO This is duplicated from the section just above...
        // ... we certainly need a better solution here
        //
        // Last-ditch effort to use the full type path - ugly
        // loop through all, specifically checking that index where the
        // first param yields differences
        for (let i = 0; i < allSame.length; i++) {
            const { lookupIndex, name, params } = allSame[i];
            const { def, path } = lookup.getSiType(params[paramIdx].type.unwrap());
            const flat = extractNameFlat(portable, lookupIndex, params, path, true);
            if (def.isPrimitive || !flat) {
                return null;
            }
            adjusted[i] = {
                lookupIndex,
                name: `${name}${flat.name}`
            };
        }
        // check to see if the adjusted names have no issues
        if (rewriteDupes(adjusted, rewrite)) {
            return original;
        }
        return null;
    })
        .filter((n) => !!n)
        .map(({ lookupIndex, name, params }) => ({
        lookupIndex,
        name: rewrite[lookupIndex] || name,
        params
    }));
}
/** @internal Detect on-chain types (AccountId/Signature) as set as the default */
function registerTypes(lookup, lookups, names, params) {
    // Register the types we extracted
    lookup.registry.register(lookups);
    // Try and extract the AccountId/Address/Signature type from UncheckedExtrinsic
    if (params.SpRuntimeUncheckedExtrinsic) {
        // Address, Call, Signature, Extra
        const [addrParam, , sigParam] = params.SpRuntimeUncheckedExtrinsic;
        const siAddress = lookup.getSiType(addrParam.type.unwrap());
        const siSignature = lookup.getSiType(sigParam.type.unwrap());
        const nsSignature = siSignature.path.join('::');
        let nsAccountId = siAddress.path.join('::');
        const isMultiAddress = nsAccountId === 'sp_runtime::multiaddress::MultiAddress';
        // With multiaddress, we check the first type param again
        if (isMultiAddress) {
            // AccountId, AccountIndex
            const [idParam] = siAddress.params;
            nsAccountId = lookup.getSiType(idParam.type.unwrap()).path.join('::');
        }
        lookup.registry.register({
            AccountId: ['sp_core::crypto::AccountId32'].includes(nsAccountId)
                ? 'AccountId32'
                : ['account::AccountId20', 'primitive_types::H160'].includes(nsAccountId)
                    ? 'AccountId20'
                    : 'AccountId32',
            Address: isMultiAddress
                ? 'MultiAddress'
                : 'AccountId',
            ExtrinsicSignature: ['sp_runtime::MultiSignature'].includes(nsSignature)
                ? 'MultiSignature'
                : names[sigParam.type.unwrap().toNumber()] || 'MultiSignature'
        });
    }
}
/**
 * @internal Extracts aliases based on what we know the runtime config looks like in a
 * Substrate chain. Specifically we want to have access to the Call and Event params
 **/
function extractAliases(params, isContract) {
    const hasParams = Object.keys(params).some((k) => !k.startsWith('Pallet'));
    const alias = {};
    if (params.SpRuntimeUncheckedExtrinsic) {
        // Address, Call, Signature, Extra
        const [, { type }] = params.SpRuntimeUncheckedExtrinsic;
        alias[type.unwrap().toNumber()] = 'Call';
    }
    else if (hasParams && !isContract) {
        l$6.warn('Unable to determine runtime Call type, cannot inspect sp_runtime::generic::unchecked_extrinsic::UncheckedExtrinsic');
    }
    if (params.FrameSystemEventRecord) {
        // Event, Topic
        const [{ type }] = params.FrameSystemEventRecord;
        alias[type.unwrap().toNumber()] = 'Event';
    }
    else if (hasParams && !isContract) {
        l$6.warn('Unable to determine runtime Event type, cannot inspect frame_system::EventRecord');
    }
    return alias;
}
/** @internal Extracts all the intreresting type information for this registry */
function extractTypeInfo(lookup, portable) {
    const nameInfo = [];
    const types = {};
    const porCount = portable.length;
    for (let i = 0; i < porCount; i++) {
        const type = portable[i];
        const lookupIndex = type.id.toNumber();
        const extracted = extractName(portable, lookupIndex, portable[i]);
        if (extracted) {
            nameInfo.push(extracted);
        }
        types[lookupIndex] = type;
    }
    const lookups = {};
    const names = {};
    const params = {};
    const dedup = removeDupeNames(lookup, portable, nameInfo);
    const dedupCount = dedup.length;
    for (let i = 0; i < dedupCount; i++) {
        const { lookupIndex, name, params: p } = dedup[i];
        names[lookupIndex] = name;
        lookups[name] = lookup.registry.createLookupType(lookupIndex);
        params[name] = p;
    }
    return { lookups, names, params, types };
}
class PortableRegistry extends Struct {
    constructor(registry, value, isContract) {
        // const timeStart = performance.now()
        super(registry, {
            types: 'Vec<PortableType>'
        }, value);
        _PortableRegistry_instances.add(this);
        _PortableRegistry_alias.set(this, void 0);
        _PortableRegistry_lookups.set(this, void 0);
        _PortableRegistry_names.set(this, void 0);
        _PortableRegistry_params.set(this, void 0);
        _PortableRegistry_typeDefs.set(this, {});
        _PortableRegistry_types.set(this, void 0);
        const { lookups, names, params, types } = extractTypeInfo(this, this.types);
        __classPrivateFieldSet(this, _PortableRegistry_alias, extractAliases(params, isContract), "f");
        __classPrivateFieldSet(this, _PortableRegistry_lookups, lookups, "f");
        __classPrivateFieldSet(this, _PortableRegistry_names, names, "f");
        __classPrivateFieldSet(this, _PortableRegistry_params, params, "f");
        __classPrivateFieldSet(this, _PortableRegistry_types, types, "f");
        // console.log('PortableRegistry', `${(performance.now() - timeStart).toFixed(2)}ms`)
    }
    /**
     * @description Returns all the available type names for this chain
     **/
    get names() {
        return Object.values(__classPrivateFieldGet(this, _PortableRegistry_names, "f")).sort();
    }
    /**
     * @description The types of the registry
     */
    get types() {
        return this.getT('types');
    }
    /**
     * @description Register all available types into the registry (generally for internal usage)
     */
    register() {
        registerTypes(this, __classPrivateFieldGet(this, _PortableRegistry_lookups, "f"), __classPrivateFieldGet(this, _PortableRegistry_names, "f"), __classPrivateFieldGet(this, _PortableRegistry_params, "f"));
    }
    /**
     * @description Returns the name for a specific lookup
     */
    getName(lookupId) {
        return __classPrivateFieldGet(this, _PortableRegistry_names, "f")[__classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_getLookupId).call(this, lookupId)];
    }
    /**
     * @description Finds a specific type in the registry
     */
    getSiType(lookupId) {
        // NOTE catch-22 - this may already be used as part of the constructor, so
        // ensure that we have actually initialized it correctly
        const found = (__classPrivateFieldGet(this, _PortableRegistry_types, "f") || this.types)[__classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_getLookupId).call(this, lookupId)];
        if (!found) {
            throw new Error(`PortableRegistry: Unable to find type with lookupId ${lookupId.toString()}`);
        }
        return found.type;
    }
    /**
     * @description Lookup the type definition for the index
     */
    getTypeDef(lookupId) {
        const lookupIndex = __classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_getLookupId).call(this, lookupId);
        if (!__classPrivateFieldGet(this, _PortableRegistry_typeDefs, "f")[lookupIndex]) {
            const lookupName = __classPrivateFieldGet(this, _PortableRegistry_names, "f")[lookupIndex];
            const empty = {
                info: TypeDefInfo.DoNotConstruct,
                lookupIndex,
                lookupName,
                type: this.registry.createLookupType(lookupIndex)
            };
            // Set named items since we will get into circular lookups along the way
            if (lookupName) {
                __classPrivateFieldGet(this, _PortableRegistry_typeDefs, "f")[lookupIndex] = empty;
            }
            const extracted = __classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_extract).call(this, this.getSiType(lookupId), lookupIndex);
            // For non-named items, we only set this right at the end
            if (!lookupName) {
                __classPrivateFieldGet(this, _PortableRegistry_typeDefs, "f")[lookupIndex] = empty;
            }
            Object.keys(extracted).forEach((k) => {
                if (k !== 'lookupName' || extracted[k]) {
                    // these are safe since we are looking through the keys as set
                    __classPrivateFieldGet(this, _PortableRegistry_typeDefs, "f")[lookupIndex][k] = extracted[k];
                }
            });
            // don't set lookupName on lower-level, we want to always direct to the type
            if (extracted.info === TypeDefInfo.Plain) {
                __classPrivateFieldGet(this, _PortableRegistry_typeDefs, "f")[lookupIndex].lookupNameRoot = __classPrivateFieldGet(this, _PortableRegistry_typeDefs, "f")[lookupIndex].lookupName;
                delete __classPrivateFieldGet(this, _PortableRegistry_typeDefs, "f")[lookupIndex].lookupName;
            }
        }
        return __classPrivateFieldGet(this, _PortableRegistry_typeDefs, "f")[lookupIndex];
    }
    /**
     * @description For a specific field, perform adjustments to not have built-in conflicts
     */
    sanitizeField(name) {
        let nameField = null;
        let nameOrig = null;
        if (name.isSome) {
            nameField = stringCamelCase(name.unwrap());
            if (nameField.includes('#')) {
                nameOrig = nameField;
                nameField = nameOrig.replace(/#/g, '_');
            }
            else if (RESERVED.includes(nameField)) {
                nameOrig = nameField;
                nameField = `${nameField}_`;
            }
        }
        return [nameField, nameOrig];
    }
}
_PortableRegistry_alias = new WeakMap(), _PortableRegistry_lookups = new WeakMap(), _PortableRegistry_names = new WeakMap(), _PortableRegistry_params = new WeakMap(), _PortableRegistry_typeDefs = new WeakMap(), _PortableRegistry_types = new WeakMap(), _PortableRegistry_instances = new WeakSet(), _PortableRegistry_createSiDef = function _PortableRegistry_createSiDef(lookupId) {
    const typeDef = this.getTypeDef(lookupId);
    const lookupIndex = lookupId.toNumber();
    // Setup for a lookup on complex types
    return [TypeDefInfo.DoNotConstruct, TypeDefInfo.Enum, TypeDefInfo.Struct].includes(typeDef.info) && typeDef.lookupName
        ? {
            docs: typeDef.docs,
            info: TypeDefInfo.Si,
            lookupIndex,
            lookupName: __classPrivateFieldGet(this, _PortableRegistry_names, "f")[lookupIndex],
            type: this.registry.createLookupType(lookupId)
        }
        : typeDef;
}, _PortableRegistry_getLookupId = function _PortableRegistry_getLookupId(lookupId) {
    if (isString(lookupId)) {
        if (!this.registry.isLookupType(lookupId)) {
            throw new Error(`PortableRegistry: Expected a lookup string type, found ${lookupId}`);
        }
        return parseInt(lookupId.replace('Lookup', ''), 10);
    }
    else if (isNumber(lookupId)) {
        return lookupId;
    }
    return lookupId.toNumber();
}, _PortableRegistry_extract = function _PortableRegistry_extract(type, lookupIndex) {
    const namespace = type.path.join('::');
    let typeDef;
    const aliasType = __classPrivateFieldGet(this, _PortableRegistry_alias, "f")[lookupIndex] || getAliasPath(type);
    try {
        if (aliasType) {
            typeDef = __classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_extractAliasPath).call(this, lookupIndex, aliasType);
        }
        else {
            switch (type.def.type) {
                case 'Array':
                    typeDef = __classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_extractArray).call(this, lookupIndex, type.def.asArray);
                    break;
                case 'BitSequence':
                    typeDef = __classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_extractBitSequence).call(this, lookupIndex, type.def.asBitSequence);
                    break;
                case 'Compact':
                    typeDef = __classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_extractCompact).call(this, lookupIndex, type.def.asCompact);
                    break;
                case 'Composite':
                    typeDef = __classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_extractComposite).call(this, lookupIndex, type, type.def.asComposite);
                    break;
                case 'HistoricMetaCompat':
                    typeDef = __classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_extractHistoric).call(this, lookupIndex, type.def.asHistoricMetaCompat);
                    break;
                case 'Primitive':
                    typeDef = __classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_extractPrimitive).call(this, lookupIndex, type);
                    break;
                case 'Sequence':
                    typeDef = __classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_extractSequence).call(this, lookupIndex, type.def.asSequence);
                    break;
                case 'Tuple':
                    typeDef = __classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_extractTuple).call(this, lookupIndex, type.def.asTuple);
                    break;
                case 'Variant':
                    typeDef = __classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_extractVariant).call(this, lookupIndex, type, type.def.asVariant);
                    break;
                default: assertUnreachable(type.def.type);
            }
        }
    }
    catch (error) {
        throw new Error(`PortableRegistry: ${lookupIndex}${namespace ? ` (${namespace})` : ''}: Error extracting ${stringify(type)}: ${error.message}`);
    }
    return objectSpread({
        docs: sanitizeDocs(type.docs),
        namespace
    }, typeDef);
}, _PortableRegistry_extractArray = function _PortableRegistry_extractArray(_, { len, type }) {
    const length = len.toNumber();
    if (length > 2048) {
        throw new Error('Only support for [Type; <length>], where length <= 2048');
    }
    return withTypeString(this.registry, {
        info: TypeDefInfo.VecFixed,
        length,
        sub: __classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_createSiDef).call(this, type)
    });
}, _PortableRegistry_extractBitSequence = function _PortableRegistry_extractBitSequence(_, { bitOrderType, bitStoreType }) {
    // With the v3 of scale-info this swapped around, but obviously the decoder cannot determine
    // the order. With that in-mind, we apply a detection for LSb0/Msb and set accordingly
    const a = __classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_createSiDef).call(this, bitOrderType);
    const b = __classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_createSiDef).call(this, bitStoreType);
    const [bitOrder, bitStore] = BITVEC_NS.includes(a.namespace || '')
        ? [a, b]
        : [b, a];
    // NOTE: Currently the BitVec type is one-way only, i.e. we only use it to decode, not
    // re-encode stuff. As such we ignore the msb/lsb identifier given by bitOrderType, or rather
    // we don't pass it though at all (all displays in LSB)
    if (!BITVEC_NS.includes(bitOrder.namespace || '')) {
        throw new Error(`Unexpected bitOrder found as ${bitOrder.namespace || '<unknown>'}`);
    }
    else if (bitStore.info !== TypeDefInfo.Plain || bitStore.type !== 'u8') {
        throw new Error(`Only u8 bitStore is currently supported, found ${bitStore.type}`);
    }
    return {
        info: TypeDefInfo.Plain,
        type: 'BitVec'
    };
}, _PortableRegistry_extractCompact = function _PortableRegistry_extractCompact(_, { type }) {
    return withTypeString(this.registry, {
        info: TypeDefInfo.Compact,
        sub: __classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_createSiDef).call(this, type)
    });
}, _PortableRegistry_extractComposite = function _PortableRegistry_extractComposite(lookupIndex, { params, path }, { fields }) {
    if (path.length) {
        const pathFirst = path[0].toString();
        const pathLast = path[path.length - 1].toString();
        if (path.length === 1 && pathFirst === 'BTreeMap') {
            if (params.length !== 2) {
                throw new Error(`BTreeMap requires 2 parameters, found ${params.length}`);
            }
            return withTypeString(this.registry, {
                info: TypeDefInfo.BTreeMap,
                sub: params.map(({ type }) => __classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_createSiDef).call(this, type.unwrap()))
            });
        }
        else if (path.length === 1 && pathFirst === 'BTreeSet') {
            if (params.length !== 1) {
                throw new Error(`BTreeSet requires 1 parameter, found ${params.length}`);
            }
            return withTypeString(this.registry, {
                info: TypeDefInfo.BTreeSet,
                sub: __classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_createSiDef).call(this, params[0].type.unwrap())
            });
        }
        else if (['Range', 'RangeInclusive'].includes(pathFirst)) {
            if (params.length !== 1) {
                throw new Error(`Range requires 1 parameter, found ${params.length}`);
            }
            return withTypeString(this.registry, {
                info: pathFirst === 'Range'
                    ? TypeDefInfo.Range
                    : TypeDefInfo.RangeInclusive,
                sub: __classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_createSiDef).call(this, params[0].type.unwrap()),
                type: pathFirst
            });
        }
        else if (['WrapperKeepOpaque', 'WrapperOpaque'].includes(pathLast)) {
            if (params.length !== 1) {
                throw new Error(`WrapperOpaque requires 1 parameter, found ${params.length}`);
            }
            return withTypeString(this.registry, {
                info: pathLast === 'WrapperKeepOpaque'
                    ? TypeDefInfo.WrapperKeepOpaque
                    : TypeDefInfo.WrapperOpaque,
                sub: __classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_createSiDef).call(this, params[0].type.unwrap()),
                type: pathLast
            });
        }
    }
    return PATHS_SET.some((p) => matchParts(p, path))
        ? __classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_extractCompositeSet).call(this, lookupIndex, params, fields)
        : __classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_extractFields).call(this, lookupIndex, fields);
}, _PortableRegistry_extractCompositeSet = function _PortableRegistry_extractCompositeSet(_, params, fields) {
    if (params.length !== 1 || fields.length !== 1) {
        throw new Error('Set handling expects param/field as single entries');
    }
    return withTypeString(this.registry, {
        info: TypeDefInfo.Set,
        length: this.registry.createTypeUnsafe(this.registry.createLookupType(fields[0].type), []).bitLength(),
        sub: this.getSiType(params[0].type.unwrap()).def.asVariant.variants.map(({ index, name }) => ({
            // This will be an issue > 2^53 - 1 ... don't have those (yet)
            index: index.toNumber(),
            info: TypeDefInfo.Plain,
            name: name.toString(),
            type: 'Null'
        }))
    });
}, _PortableRegistry_extractFields = function _PortableRegistry_extractFields(lookupIndex, fields) {
    let isStruct = true;
    let isTuple = true;
    for (let f = 0; f < fields.length; f++) {
        const { name } = fields[f];
        isStruct = isStruct && name.isSome;
        isTuple = isTuple && name.isNone;
    }
    if (!isTuple && !isStruct) {
        throw new Error('Invalid fields type detected, expected either Tuple (all unnamed) or Struct (all named)');
    }
    if (fields.length === 0) {
        return {
            info: TypeDefInfo.Null,
            type: 'Null'
        };
    }
    else if (isTuple && fields.length === 1) {
        const typeDef = __classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_createSiDef).call(this, fields[0].type);
        return objectSpread({}, typeDef, lookupIndex === -1
            ? null
            : {
                lookupIndex,
                lookupName: __classPrivateFieldGet(this, _PortableRegistry_names, "f")[lookupIndex],
                lookupNameRoot: typeDef.lookupName
            }, fields[0].typeName.isSome
            ? { typeName: sanitize(fields[0].typeName.unwrap()) }
            : null);
    }
    const [sub, alias] = __classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_extractFieldsAlias).call(this, fields);
    return withTypeString(this.registry, objectSpread({
        info: isTuple // Tuple check first
            ? TypeDefInfo.Tuple
            : TypeDefInfo.Struct,
        sub
    }, alias.size
        ? { alias }
        : null, lookupIndex === -1
        ? null
        : {
            lookupIndex,
            lookupName: __classPrivateFieldGet(this, _PortableRegistry_names, "f")[lookupIndex]
        }));
}, _PortableRegistry_extractFieldsAlias = function _PortableRegistry_extractFieldsAlias(fields) {
    const alias = new Map();
    const sub = new Array(fields.length);
    for (let i = 0; i < fields.length; i++) {
        const { docs, name, type, typeName } = fields[i];
        const typeDef = __classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_createSiDef).call(this, type);
        if (name.isNone) {
            sub[i] = typeDef;
        }
        else {
            const [nameField, nameOrig] = this.sanitizeField(name);
            if (nameField && nameOrig) {
                alias.set(nameField, nameOrig);
            }
            sub[i] = objectSpread({
                docs: sanitizeDocs(docs),
                name: nameField
            }, typeDef, typeName.isSome
                ? { typeName: sanitize(typeName.unwrap()) }
                : null);
        }
    }
    return [sub, alias];
}, _PortableRegistry_extractHistoric = function _PortableRegistry_extractHistoric(_, type) {
    return objectSpread({
        displayName: type.toString(),
        isFromSi: true
    }, getTypeDef(type));
}, _PortableRegistry_extractPrimitive = function _PortableRegistry_extractPrimitive(_, type) {
    const typeStr = type.def.asPrimitive.type.toString();
    return {
        info: TypeDefInfo.Plain,
        type: PRIMITIVE_ALIAS[typeStr] || typeStr.toLowerCase()
    };
}, _PortableRegistry_extractAliasPath = function _PortableRegistry_extractAliasPath(_, type) {
    return {
        info: TypeDefInfo.Plain,
        type
    };
}, _PortableRegistry_extractSequence = function _PortableRegistry_extractSequence(lookupIndex, { type }) {
    const sub = __classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_createSiDef).call(this, type);
    if (sub.type === 'u8') {
        return {
            info: TypeDefInfo.Plain,
            type: 'Bytes'
        };
    }
    return withTypeString(this.registry, {
        info: TypeDefInfo.Vec,
        lookupIndex,
        lookupName: __classPrivateFieldGet(this, _PortableRegistry_names, "f")[lookupIndex],
        sub
    });
}, _PortableRegistry_extractTuple = function _PortableRegistry_extractTuple(lookupIndex, ids) {
    if (ids.length === 0) {
        return {
            info: TypeDefInfo.Null,
            type: 'Null'
        };
    }
    else if (ids.length === 1) {
        return this.getTypeDef(ids[0]);
    }
    const sub = ids.map((t) => __classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_createSiDef).call(this, t));
    return withTypeString(this.registry, {
        info: TypeDefInfo.Tuple,
        lookupIndex,
        lookupName: __classPrivateFieldGet(this, _PortableRegistry_names, "f")[lookupIndex],
        sub
    });
}, _PortableRegistry_extractVariant = function _PortableRegistry_extractVariant(lookupIndex, { params, path }, { variants }) {
    if (path.length) {
        const specialVariant = path[0].toString();
        if (specialVariant === 'Option') {
            if (params.length !== 1) {
                throw new Error(`Option requires 1 parameter, found ${params.length}`);
            }
            // NOTE This is opt-in (unhandled), not by default
            // if (sub.type === 'bool') {
            //   return withTypeString(this.registry, {
            //     info: TypeDefInfo.Plain,
            //     type: 'OptionBool'
            //   });
            // }
            return withTypeString(this.registry, {
                info: TypeDefInfo.Option,
                sub: __classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_createSiDef).call(this, params[0].type.unwrap())
            });
        }
        else if (specialVariant === 'Result') {
            if (params.length !== 2) {
                throw new Error(`Result requires 2 parameters, found ${params.length}`);
            }
            return withTypeString(this.registry, {
                info: TypeDefInfo.Result,
                sub: params.map(({ type }, index) => objectSpread({
                    name: ['Ok', 'Error'][index]
                }, __classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_createSiDef).call(this, type.unwrap())))
            });
        }
    }
    if (variants.length === 0) {
        return {
            info: TypeDefInfo.Null,
            type: 'Null'
        };
    }
    return __classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_extractVariantEnum).call(this, lookupIndex, variants);
}, _PortableRegistry_extractVariantEnum = function _PortableRegistry_extractVariantEnum(lookupIndex, variants) {
    const sub = [];
    // we may get entries out of order, arrange them first before creating with gaps filled
    // NOTE: Since we mutate, use a copy of the array as an input
    variants
        .slice()
        .sort((a, b) => a.index.cmp(b.index))
        .forEach(({ fields, index: bnIndex, name }) => {
        const index = bnIndex.toNumber();
        while (sub.length !== index) {
            sub.push({
                index: sub.length,
                info: TypeDefInfo.Null,
                name: `__Unused${sub.length}`,
                type: 'Null'
            });
        }
        sub.push(objectSpread(__classPrivateFieldGet(this, _PortableRegistry_instances, "m", _PortableRegistry_extractFields).call(this, -1, fields), {
            index,
            name: name.toString()
        }));
    });
    return withTypeString(this.registry, {
        info: TypeDefInfo.Enum,
        lookupIndex,
        lookupName: __classPrivateFieldGet(this, _PortableRegistry_names, "f")[lookupIndex],
        sub
    });
};

var _TypeRegistry_chainProperties, _TypeRegistry_classes, _TypeRegistry_definitions, _TypeRegistry_firstCallIndex, _TypeRegistry_hasher, _TypeRegistry_knownTypes, _TypeRegistry_lookup, _TypeRegistry_metadata, _TypeRegistry_metadataVersion, _TypeRegistry_signedExtensions, _TypeRegistry_unknownTypes, _TypeRegistry_userExtensions, _TypeRegistry_knownDefaults, _TypeRegistry_knownDefinitions, _TypeRegistry_metadataCalls, _TypeRegistry_metadataErrors, _TypeRegistry_metadataEvents, _TypeRegistry_moduleMap, _TypeRegistry_registerObject, _TypeRegistry_registerLookup;
const DEFAULT_FIRST_CALL_IDX = new Uint8Array(2);
const l$5 = logger('registry');
function sortDecimalStrings(a, b) {
    return parseInt(a, 10) - parseInt(b, 10);
}
function valueToString(v) {
    return v.toString();
}
function getFieldArgs(lookup, fields) {
    const args = new Array(fields.length);
    for (let i = 0; i < fields.length; i++) {
        args[i] = lookup.getTypeDef(fields[i].type).type;
    }
    return args;
}
function clearRecord(record) {
    const keys = Object.keys(record);
    for (let i = 0; i < keys.length; i++) {
        delete record[keys[i]];
    }
}
function getVariantStringIdx({ index }) {
    return index.toString();
}
function injectErrors(_, { lookup, pallets }, version, result) {
    clearRecord(result);
    for (let i = 0; i < pallets.length; i++) {
        const { errors, index, name } = pallets[i];
        if (errors.isSome) {
            const sectionName = stringCamelCase(name);
            lazyMethod(result, version >= 12 ? index.toNumber() : i, () => lazyVariants(lookup, errors.unwrap(), getVariantStringIdx, ({ docs, fields, index, name }) => ({
                args: getFieldArgs(lookup, fields),
                docs: docs.map(valueToString),
                fields,
                index: index.toNumber(),
                method: name.toString(),
                name: name.toString(),
                section: sectionName
            })));
        }
    }
}
function injectEvents(registry, { lookup, pallets }, version, result) {
    const filtered = pallets.filter(filterEventsSome);
    clearRecord(result);
    for (let i = 0; i < filtered.length; i++) {
        const { events, index, name } = filtered[i];
        lazyMethod(result, version >= 12 ? index.toNumber() : i, () => lazyVariants(lookup, events.unwrap(), getVariantStringIdx, (variant) => {
            const meta = registry.createType('EventMetadataLatest', objectSpread({}, variant, { args: getFieldArgs(lookup, variant.fields) }));
            return class extends GenericEventData {
                constructor(registry, value) {
                    super(registry, value, meta, stringCamelCase(name), variant.name.toString());
                }
            };
        }));
    }
}
function injectExtrinsics(registry, { lookup, pallets }, version, result, mapping) {
    const filtered = pallets.filter(filterCallsSome);
    clearRecord(result);
    clearRecord(mapping);
    for (let i = 0; i < filtered.length; i++) {
        const { calls, index, name } = filtered[i];
        const sectionIndex = version >= 12 ? index.toNumber() : i;
        const sectionName = stringCamelCase(name);
        const allCalls = calls.unwrap();
        lazyMethod(result, sectionIndex, () => lazyVariants(lookup, allCalls, getVariantStringIdx, (variant) => createCallFunction(registry, lookup, variant, sectionName, sectionIndex)));
        const { path } = registry.lookup.getSiType(allCalls.type);
        // frame_system::pallet::Call / pallet_balances::pallet::Call / polkadot_runtime_parachains::configuration::pallet::Call /
        const palletIdx = path.findIndex((v) => v.eq('pallet'));
        if (palletIdx !== -1) {
            const name = stringCamelCase(path
                .slice(0, palletIdx)
                .map((p, i) => i === 0
                // frame_system || pallet_balances
                ? p.replace(/^(frame|pallet)_/, '')
                : p)
                .join(' '));
            if (!mapping[name]) {
                mapping[name] = [sectionName];
            }
            else {
                mapping[name].push(sectionName);
            }
        }
    }
}
function extractProperties(registry, metadata) {
    const original = registry.getChainProperties();
    const constants = decorateConstants(registry, metadata.asLatest, metadata.version);
    const ss58Format = constants.system && (constants.system.sS58Prefix || constants.system.ss58Prefix);
    if (!ss58Format) {
        return original;
    }
    const { tokenDecimals, tokenSymbol } = original || {};
    return registry.createTypeUnsafe('ChainProperties', [{ ss58Format, tokenDecimals, tokenSymbol }]);
}
class TypeRegistry {
    constructor(createdAtHash) {
        _TypeRegistry_chainProperties.set(this, void 0);
        _TypeRegistry_classes.set(this, new Map());
        _TypeRegistry_definitions.set(this, new Map());
        _TypeRegistry_firstCallIndex.set(this, null);
        _TypeRegistry_hasher.set(this, blake2AsU8a);
        _TypeRegistry_knownTypes.set(this, {});
        _TypeRegistry_lookup.set(this, void 0);
        _TypeRegistry_metadata.set(this, void 0);
        _TypeRegistry_metadataVersion.set(this, 0);
        _TypeRegistry_signedExtensions.set(this, fallbackExtensions);
        _TypeRegistry_unknownTypes.set(this, new Map());
        _TypeRegistry_userExtensions.set(this, void 0);
        _TypeRegistry_knownDefaults.set(this, void 0);
        _TypeRegistry_knownDefinitions.set(this, void 0);
        _TypeRegistry_metadataCalls.set(this, {});
        _TypeRegistry_metadataErrors.set(this, {});
        _TypeRegistry_metadataEvents.set(this, {});
        _TypeRegistry_moduleMap.set(this, {});
        _TypeRegistry_registerObject.set(this, (obj) => {
            const entries = Object.entries(obj);
            for (let e = 0; e < entries.length; e++) {
                const [name, type] = entries[e];
                if (isFunction$1(type)) {
                    // This _looks_ a bit funny, but `typeof Clazz === 'function'
                    __classPrivateFieldGet(this, _TypeRegistry_classes, "f").set(name, type);
                }
                else {
                    const def = isString(type)
                        ? type
                        : stringify(type);
                    if (name === def) {
                        throw new Error(`Unable to register circular ${name} === ${def}`);
                    }
                    // we already have this type, remove the classes registered for it
                    if (__classPrivateFieldGet(this, _TypeRegistry_classes, "f").has(name)) {
                        __classPrivateFieldGet(this, _TypeRegistry_classes, "f").delete(name);
                    }
                    __classPrivateFieldGet(this, _TypeRegistry_definitions, "f").set(name, def);
                }
            }
        });
        // register alias types alongside the portable/lookup setup
        // (we don't combine this into setLookup since that would/could
        // affect stand-along lookups, such as ABIs which don't have
        // actual on-chain metadata)
        _TypeRegistry_registerLookup.set(this, (lookup) => {
            // attach the lookup before we register any types
            this.setLookup(lookup);
            // we detect based on runtime configuration
            let Weight = null;
            if (this.hasType('SpWeightsWeightV2Weight')) {
                // detection for WeightV2 type based on latest naming
                const weightv2 = this.createType('SpWeightsWeightV2Weight');
                Weight = weightv2.refTime && weightv2.proofSize
                    // with both refTime & proofSize we use as-is (WeightV2)
                    ? 'SpWeightsWeightV2Weight'
                    // fallback to WeightV1 (WeightV1.5 is a struct, single field)
                    : 'WeightV1';
            }
            else if (!isBn(this.createType('Weight'))) {
                // where we have an already-supplied BN override, we don't clobber
                // it with our detected value (This protects against pre-defines
                // where Weight may be aliassed to WeightV0, e.g. in early Kusama chains)
                Weight = 'WeightV1';
            }
            if (Weight) {
                // we have detected a version, adjust the definition
                this.register({ Weight });
            }
        });
        __classPrivateFieldSet(this, _TypeRegistry_knownDefaults, objectSpread({ Json, Metadata, PortableRegistry, Raw }, baseTypes), "f");
        __classPrivateFieldSet(this, _TypeRegistry_knownDefinitions, typeDefinitions, "f");
        const allKnown = Object.values(__classPrivateFieldGet(this, _TypeRegistry_knownDefinitions, "f"));
        for (let i = 0; i < allKnown.length; i++) {
            this.register(allKnown[i].types);
        }
        if (createdAtHash) {
            this.createdAtHash = this.createType('BlockHash', createdAtHash);
        }
    }
    get chainDecimals() {
        if (__classPrivateFieldGet(this, _TypeRegistry_chainProperties, "f")?.tokenDecimals.isSome) {
            const allDecimals = __classPrivateFieldGet(this, _TypeRegistry_chainProperties, "f").tokenDecimals.unwrap();
            if (allDecimals.length) {
                return allDecimals.map((b) => b.toNumber());
            }
        }
        return [12];
    }
    get chainSS58() {
        return __classPrivateFieldGet(this, _TypeRegistry_chainProperties, "f")?.ss58Format.isSome
            ? __classPrivateFieldGet(this, _TypeRegistry_chainProperties, "f").ss58Format.unwrap().toNumber()
            : undefined;
    }
    get chainTokens() {
        if (__classPrivateFieldGet(this, _TypeRegistry_chainProperties, "f")?.tokenSymbol.isSome) {
            const allTokens = __classPrivateFieldGet(this, _TypeRegistry_chainProperties, "f").tokenSymbol.unwrap();
            if (allTokens.length) {
                return allTokens.map(valueToString);
            }
        }
        return [formatBalance.getDefaults().unit];
    }
    get firstCallIndex() {
        return __classPrivateFieldGet(this, _TypeRegistry_firstCallIndex, "f") || DEFAULT_FIRST_CALL_IDX;
    }
    /**
     * @description Returns true if the type is in a Compat format
     */
    isLookupType(value) {
        return /Lookup\d+$/.test(value);
    }
    /**
     * @description Creates a lookup string from the supplied id
     */
    createLookupType(lookupId) {
        return `Lookup${typeof lookupId === 'number' ? lookupId : lookupId.toNumber()}`;
    }
    get knownTypes() {
        return __classPrivateFieldGet(this, _TypeRegistry_knownTypes, "f");
    }
    get lookup() {
        return assertReturn(__classPrivateFieldGet(this, _TypeRegistry_lookup, "f"), 'PortableRegistry has not been set on this registry');
    }
    get metadata() {
        return assertReturn(__classPrivateFieldGet(this, _TypeRegistry_metadata, "f"), 'Metadata has not been set on this registry');
    }
    get unknownTypes() {
        return [...__classPrivateFieldGet(this, _TypeRegistry_unknownTypes, "f").keys()];
    }
    get signedExtensions() {
        return __classPrivateFieldGet(this, _TypeRegistry_signedExtensions, "f");
    }
    clearCache() {
        __classPrivateFieldSet(this, _TypeRegistry_classes, new Map(), "f");
    }
    /**
     * @describe Creates an instance of the class
     */
    createClass(type) {
        return createClassUnsafe(this, type);
    }
    /**
     * @describe Creates an instance of the class
     */
    createClassUnsafe(type) {
        return createClassUnsafe(this, type);
    }
    /**
     * @description Creates an instance of a type as registered
     */
    createType(type, ...params) {
        return createTypeUnsafe(this, type, params);
    }
    /**
     * @description Creates an instance of a type as registered
     */
    createTypeUnsafe(type, params, options) {
        return createTypeUnsafe(this, type, params, options);
    }
    // find a specific call
    findMetaCall(callIndex) {
        const [section, method] = [callIndex[0], callIndex[1]];
        return assertReturn(__classPrivateFieldGet(this, _TypeRegistry_metadataCalls, "f")[`${section}`] && __classPrivateFieldGet(this, _TypeRegistry_metadataCalls, "f")[`${section}`][`${method}`], () => `findMetaCall: Unable to find Call with index [${section}, ${method}]/[${callIndex.toString()}]`);
    }
    // finds an error
    findMetaError(errorIndex) {
        const [section, method] = isU8a(errorIndex)
            ? [errorIndex[0], errorIndex[1]]
            : [
                errorIndex.index.toNumber(),
                isU8a(errorIndex.error)
                    ? errorIndex.error[0]
                    : errorIndex.error.toNumber()
            ];
        return assertReturn(__classPrivateFieldGet(this, _TypeRegistry_metadataErrors, "f")[`${section}`] && __classPrivateFieldGet(this, _TypeRegistry_metadataErrors, "f")[`${section}`][`${method}`], () => `findMetaError: Unable to find Error with index [${section}, ${method}]/[${errorIndex.toString()}]`);
    }
    findMetaEvent(eventIndex) {
        const [section, method] = [eventIndex[0], eventIndex[1]];
        return assertReturn(__classPrivateFieldGet(this, _TypeRegistry_metadataEvents, "f")[`${section}`] && __classPrivateFieldGet(this, _TypeRegistry_metadataEvents, "f")[`${section}`][`${method}`], () => `findMetaEvent: Unable to find Event with index [${section}, ${method}]/[${eventIndex.toString()}]`);
    }
    get(name, withUnknown, knownTypeDef) {
        return this.getUnsafe(name, withUnknown, knownTypeDef);
    }
    getUnsafe(name, withUnknown, knownTypeDef) {
        let Type = __classPrivateFieldGet(this, _TypeRegistry_classes, "f").get(name) || __classPrivateFieldGet(this, _TypeRegistry_knownDefaults, "f")[name];
        // we have not already created the type, attempt it
        if (!Type) {
            const definition = __classPrivateFieldGet(this, _TypeRegistry_definitions, "f").get(name);
            let BaseType;
            // we have a definition, so create the class now (lazily)
            if (definition) {
                BaseType = createClassUnsafe(this, definition);
            }
            else if (knownTypeDef) {
                BaseType = constructTypeClass(this, knownTypeDef);
            }
            else if (withUnknown) {
                l$5.warn(`Unable to resolve type ${name}, it will fail on construction`);
                __classPrivateFieldGet(this, _TypeRegistry_unknownTypes, "f").set(name, true);
                BaseType = DoNotConstruct.with(name);
            }
            if (BaseType) {
                // NOTE If we didn't extend here, we would have strange artifacts. An example is
                // Balance, with this, new Balance() instanceof u128 is true, but Balance !== u128
                // Additionally, we now pass through the registry, which is a link to ourselves
                Type = class extends BaseType {
                };
                __classPrivateFieldGet(this, _TypeRegistry_classes, "f").set(name, Type);
                // In the case of lookups, we also want to store the actual class against
                // the lookup name, instad of having to traverse again
                if (knownTypeDef && isNumber(knownTypeDef.lookupIndex)) {
                    __classPrivateFieldGet(this, _TypeRegistry_classes, "f").set(this.createLookupType(knownTypeDef.lookupIndex), Type);
                }
            }
        }
        return Type;
    }
    getChainProperties() {
        return __classPrivateFieldGet(this, _TypeRegistry_chainProperties, "f");
    }
    getClassName(Type) {
        // we cannot rely on export order (anymore, since babel/core 7.15.8), so in the case of
        // items such as u32 & U32, we get the lowercase versions here... not quite as optimal
        // (previously this used to be a simple find & return)
        const names = [];
        for (const [name, Clazz] of Object.entries(__classPrivateFieldGet(this, _TypeRegistry_knownDefaults, "f"))) {
            if (Type === Clazz) {
                names.push(name);
            }
        }
        for (const [name, Clazz] of __classPrivateFieldGet(this, _TypeRegistry_classes, "f").entries()) {
            if (Type === Clazz) {
                names.push(name);
            }
        }
        // both sort and reverse are done in-place
        names.sort().reverse();
        return names.length
            ? names[0]
            : undefined;
    }
    getDefinition(typeName) {
        return __classPrivateFieldGet(this, _TypeRegistry_definitions, "f").get(typeName);
    }
    getModuleInstances(specName, moduleName) {
        return __classPrivateFieldGet(this, _TypeRegistry_knownTypes, "f")?.typesBundle?.spec?.[specName.toString()]?.instances?.[moduleName] || __classPrivateFieldGet(this, _TypeRegistry_moduleMap, "f")[moduleName];
    }
    getOrThrow(name) {
        const Clazz = this.get(name);
        if (!Clazz) {
            throw new Error(`type ${name} not found`);
        }
        return Clazz;
    }
    getOrUnknown(name) {
        return this.get(name, true);
    }
    getSignedExtensionExtra() {
        return expandExtensionTypes(__classPrivateFieldGet(this, _TypeRegistry_signedExtensions, "f"), 'payload', __classPrivateFieldGet(this, _TypeRegistry_userExtensions, "f"));
    }
    getSignedExtensionTypes() {
        return expandExtensionTypes(__classPrivateFieldGet(this, _TypeRegistry_signedExtensions, "f"), 'extrinsic', __classPrivateFieldGet(this, _TypeRegistry_userExtensions, "f"));
    }
    hasClass(name) {
        return __classPrivateFieldGet(this, _TypeRegistry_classes, "f").has(name) || !!__classPrivateFieldGet(this, _TypeRegistry_knownDefaults, "f")[name];
    }
    hasDef(name) {
        return __classPrivateFieldGet(this, _TypeRegistry_definitions, "f").has(name);
    }
    hasType(name) {
        return !__classPrivateFieldGet(this, _TypeRegistry_unknownTypes, "f").get(name) && (this.hasClass(name) || this.hasDef(name));
    }
    hash(data) {
        return this.createType('CodecHash', __classPrivateFieldGet(this, _TypeRegistry_hasher, "f").call(this, data));
    }
    // eslint-disable-next-line no-dupe-class-members
    register(arg1, arg2) {
        // NOTE Constructors appear as functions here
        if (isFunction$1(arg1)) {
            __classPrivateFieldGet(this, _TypeRegistry_classes, "f").set(arg1.name, arg1);
        }
        else if (isString(arg1)) {
            if (!isFunction$1(arg2)) {
                throw new Error(`Expected class definition passed to '${arg1}' registration`);
            }
            else if (arg1 === arg2.toString()) {
                throw new Error(`Unable to register circular ${arg1} === ${arg1}`);
            }
            __classPrivateFieldGet(this, _TypeRegistry_classes, "f").set(arg1, arg2);
        }
        else {
            __classPrivateFieldGet(this, _TypeRegistry_registerObject, "f").call(this, arg1);
        }
    }
    // sets the chain properties
    setChainProperties(properties) {
        if (properties) {
            __classPrivateFieldSet(this, _TypeRegistry_chainProperties, properties, "f");
        }
    }
    setHasher(hasher) {
        __classPrivateFieldSet(this, _TypeRegistry_hasher, hasher || blake2AsU8a, "f");
    }
    setKnownTypes(knownTypes) {
        __classPrivateFieldSet(this, _TypeRegistry_knownTypes, knownTypes, "f");
    }
    setLookup(lookup) {
        __classPrivateFieldSet(this, _TypeRegistry_lookup, lookup, "f");
        // register all applicable types found
        lookup.register();
    }
    // sets the metadata
    setMetadata(metadata, signedExtensions, userExtensions) {
        __classPrivateFieldSet(this, _TypeRegistry_metadata, metadata.asLatest, "f");
        __classPrivateFieldSet(this, _TypeRegistry_metadataVersion, metadata.version, "f");
        __classPrivateFieldSet(this, _TypeRegistry_firstCallIndex, null, "f");
        // attach the lookup at this point and register relevant types (before injecting)
        __classPrivateFieldGet(this, _TypeRegistry_registerLookup, "f").call(this, __classPrivateFieldGet(this, _TypeRegistry_metadata, "f").lookup);
        injectExtrinsics(this, __classPrivateFieldGet(this, _TypeRegistry_metadata, "f"), __classPrivateFieldGet(this, _TypeRegistry_metadataVersion, "f"), __classPrivateFieldGet(this, _TypeRegistry_metadataCalls, "f"), __classPrivateFieldGet(this, _TypeRegistry_moduleMap, "f"));
        injectErrors(this, __classPrivateFieldGet(this, _TypeRegistry_metadata, "f"), __classPrivateFieldGet(this, _TypeRegistry_metadataVersion, "f"), __classPrivateFieldGet(this, _TypeRegistry_metadataErrors, "f"));
        injectEvents(this, __classPrivateFieldGet(this, _TypeRegistry_metadata, "f"), __classPrivateFieldGet(this, _TypeRegistry_metadataVersion, "f"), __classPrivateFieldGet(this, _TypeRegistry_metadataEvents, "f"));
        // set the default call index (the lowest section, the lowest method)
        // in most chains this should be 0,0
        const [defSection] = Object
            .keys(__classPrivateFieldGet(this, _TypeRegistry_metadataCalls, "f"))
            .sort(sortDecimalStrings);
        if (defSection) {
            const [defMethod] = Object
                .keys(__classPrivateFieldGet(this, _TypeRegistry_metadataCalls, "f")[defSection])
                .sort(sortDecimalStrings);
            if (defMethod) {
                __classPrivateFieldSet(this, _TypeRegistry_firstCallIndex, new Uint8Array([parseInt(defSection, 10), parseInt(defMethod, 10)]), "f");
            }
        }
        // setup the available extensions
        this.setSignedExtensions(signedExtensions || (__classPrivateFieldGet(this, _TypeRegistry_metadata, "f").extrinsic.version.gt(BN_ZERO)
            // FIXME Use the extension and their injected types
            ? __classPrivateFieldGet(this, _TypeRegistry_metadata, "f").extrinsic.signedExtensions.map(({ identifier }) => identifier.toString())
            : fallbackExtensions), userExtensions);
        // setup the chain properties with format overrides
        this.setChainProperties(extractProperties(this, metadata));
    }
    // sets the available signed extensions
    setSignedExtensions(signedExtensions = fallbackExtensions, userExtensions) {
        __classPrivateFieldSet(this, _TypeRegistry_signedExtensions, signedExtensions, "f");
        __classPrivateFieldSet(this, _TypeRegistry_userExtensions, userExtensions, "f");
        const unknown = findUnknownExtensions(__classPrivateFieldGet(this, _TypeRegistry_signedExtensions, "f"), __classPrivateFieldGet(this, _TypeRegistry_userExtensions, "f"));
        if (unknown.length) {
            l$5.warn(`Unknown signed extensions ${unknown.join(', ')} found, treating them as no-effect`);
        }
    }
}
_TypeRegistry_chainProperties = new WeakMap(), _TypeRegistry_classes = new WeakMap(), _TypeRegistry_definitions = new WeakMap(), _TypeRegistry_firstCallIndex = new WeakMap(), _TypeRegistry_hasher = new WeakMap(), _TypeRegistry_knownTypes = new WeakMap(), _TypeRegistry_lookup = new WeakMap(), _TypeRegistry_metadata = new WeakMap(), _TypeRegistry_metadataVersion = new WeakMap(), _TypeRegistry_signedExtensions = new WeakMap(), _TypeRegistry_unknownTypes = new WeakMap(), _TypeRegistry_userExtensions = new WeakMap(), _TypeRegistry_knownDefaults = new WeakMap(), _TypeRegistry_knownDefinitions = new WeakMap(), _TypeRegistry_metadataCalls = new WeakMap(), _TypeRegistry_metadataErrors = new WeakMap(), _TypeRegistry_metadataEvents = new WeakMap(), _TypeRegistry_moduleMap = new WeakMap(), _TypeRegistry_registerObject = new WeakMap(), _TypeRegistry_registerLookup = new WeakMap();

/** @internal */
function refCountDelay(delay = 1750) {
    return (source) => {
        // state: 0 = disconnected, 1 = disconnecting, 2 = connecting, 3 = connected
        let [state, refCount, connection, scheduler] = [0, 0, Subscription.EMPTY, Subscription.EMPTY];
        return new Observable((ob) => {
            source.subscribe(ob);
            if (refCount++ === 0) {
                if (state === 1) {
                    scheduler.unsubscribe();
                }
                else {
                    // eslint-disable-next-line deprecation/deprecation
                    connection = source.connect();
                }
                state = 3;
            }
            return () => {
                if (--refCount === 0) {
                    if (state === 2) {
                        state = 0;
                        scheduler.unsubscribe();
                    }
                    else {
                        // state === 3
                        state = 1;
                        scheduler = asapScheduler.schedule(() => {
                            state = 0;
                            connection.unsubscribe();
                        }, delay);
                    }
                }
            };
        });
    };
}

function CMP(a, b) {
    return stringify({ t: a }) === stringify({ t: b });
}
function ERR(error) {
    throw error;
}
function NOOP() {
    // empty
}
/**
 * Shorthand for distinctUntilChanged(), publishReplay(1) and refCount().
 *
 * @ignore
 * @internal
 */
function drr({ delay, skipChange = false, skipTimeout = false } = {}) {
    return (source$) => source$.pipe(catchError(ERR), skipChange
        ? tap(NOOP)
        : distinctUntilChanged(CMP), 
    // eslint-disable-next-line deprecation/deprecation
    publishReplay(1), skipTimeout
        // eslint-disable-next-line deprecation/deprecation
        ? refCount()
        : refCountDelay(delay));
}

/** @internal */
function memo(instanceId, inner) {
    const options = { getInstanceId: () => instanceId };
    const cached = memoize((...params) => new Observable((observer) => {
        const subscription = inner(...params).subscribe(observer);
        return () => {
            cached.unmemoize(...params);
            subscription.unsubscribe();
        };
    }).pipe(drr()), options);
    return cached;
}

var _RpcCore_instanceId, _RpcCore_registryDefault, _RpcCore_getBlockRegistry, _RpcCore_getBlockHash, _RpcCore_storageCache;
const l$4 = logger('rpc-core');
const EMPTY_META = {
    fallback: undefined,
    modifier: { isOptional: true },
    type: {
        asMap: { linked: { isTrue: false } },
        isMap: false
    }
};
/** @internal */
function logErrorMessage(method, { noErrorLog, params, type }, error) {
    if (noErrorLog) {
        return;
    }
    const inputs = params.map(({ isOptional, name, type }) => `${name}${isOptional ? '?' : ''}: ${type}`).join(', ');
    l$4.error(`${method}(${inputs}): ${type}:: ${error.message}`);
}
function isTreatAsHex(key) {
    // :code is problematic - it does not have the length attached, which is
    // unlike all other storage entries where it is indeed properly encoded
    return ['0x3a636f6465'].includes(key.toHex());
}
/**
 * @name Rpc
 * @summary The API may use a HTTP or WebSockets provider.
 * @description It allows for querying a Polkadot Client Node.
 * WebSockets provider is recommended since HTTP provider only supports basic querying.
 *
 * ```mermaid
 * graph LR;
 *   A[Api] --> |WebSockets| B[WsProvider];
 *   B --> |endpoint| C[ws://127.0.0.1:9944]
 * ```
 *
 * @example
 * <BR>
 *
 * ```javascript
 * import Rpc from '@polkadot/rpc-core';
 * import { WsProvider } from '@polkadot/rpc-provider/ws';
 *
 * const provider = new WsProvider('ws://127.0.0.1:9944');
 * const rpc = new Rpc(provider);
 * ```
 */
class RpcCore {
    /**
     * @constructor
     * Default constructor for the Api Object
     * @param  {ProviderInterface} provider An API provider using HTTP or WebSocket
     */
    constructor(instanceId, registry, provider, userRpc = {}) {
        _RpcCore_instanceId.set(this, void 0);
        _RpcCore_registryDefault.set(this, void 0);
        _RpcCore_getBlockRegistry.set(this, void 0);
        _RpcCore_getBlockHash.set(this, void 0);
        _RpcCore_storageCache.set(this, new Map());
        this.mapping = new Map();
        this.sections = [];
        // eslint-disable-next-line @typescript-eslint/unbound-method
        if (!provider || !isFunction$1(provider.send)) {
            throw new Error('Expected Provider to API create');
        }
        __classPrivateFieldSet(this, _RpcCore_instanceId, instanceId, "f");
        __classPrivateFieldSet(this, _RpcCore_registryDefault, registry, "f");
        this.provider = provider;
        const sectionNames = Object.keys(rpcDefinitions);
        // these are the base keys (i.e. part of jsonrpc)
        this.sections.push(...sectionNames);
        // decorate all interfaces, defined and user on this instance
        this.addUserInterfaces(userRpc);
    }
    /**
     * @description Returns the connected status of a provider
     */
    get isConnected() {
        return this.provider.isConnected;
    }
    /**
     * @description Manually connect from the attached provider
     */
    connect() {
        return this.provider.connect();
    }
    /**
     * @description Manually disconnect from the attached provider
     */
    disconnect() {
        return this.provider.disconnect();
    }
    /**
     * @description Sets a registry swap (typically from Api)
     */
    setRegistrySwap(registrySwap) {
        __classPrivateFieldSet(this, _RpcCore_getBlockRegistry, memoize(registrySwap, {
            getInstanceId: () => __classPrivateFieldGet(this, _RpcCore_instanceId, "f")
        }), "f");
    }
    /**
     * @description Sets a function to resolve block hash from block number
     */
    setResolveBlockHash(resolveBlockHash) {
        __classPrivateFieldSet(this, _RpcCore_getBlockHash, memoize(resolveBlockHash, {
            getInstanceId: () => __classPrivateFieldGet(this, _RpcCore_instanceId, "f")
        }), "f");
    }
    addUserInterfaces(userRpc) {
        // add any extra user-defined sections
        this.sections.push(...Object.keys(userRpc).filter((k) => !this.sections.includes(k)));
        for (let s = 0; s < this.sections.length; s++) {
            const section = this.sections[s];
            const defs = objectSpread({}, rpcDefinitions[section], userRpc[section]);
            const methods = Object.keys(defs);
            for (let m = 0; m < methods.length; m++) {
                const method = methods[m];
                const def = defs[method];
                const jsonrpc = def.endpoint || `${section}_${method}`;
                if (!this.mapping.has(jsonrpc)) {
                    const isSubscription = !!def.pubsub;
                    if (!this[section]) {
                        this[section] = {};
                    }
                    this.mapping.set(jsonrpc, objectSpread({}, def, { isSubscription, jsonrpc, method, section }));
                    lazyMethod(this[section], method, () => isSubscription
                        ? this._createMethodSubscribe(section, method, def)
                        : this._createMethodSend(section, method, def));
                }
            }
        }
    }
    _memomize(creator, def) {
        const memoOpts = { getInstanceId: () => __classPrivateFieldGet(this, _RpcCore_instanceId, "f") };
        const memoized = memoize(creator(true), memoOpts);
        memoized.raw = memoize(creator(false), memoOpts);
        memoized.meta = def;
        return memoized;
    }
    _formatResult(isScale, registry, blockHash, method, def, params, result) {
        return isScale
            ? this._formatOutput(registry, blockHash, method, def, params, result)
            : result;
    }
    _createMethodSend(section, method, def) {
        const rpcName = def.endpoint || `${section}_${method}`;
        const hashIndex = def.params.findIndex(({ isHistoric }) => isHistoric);
        let memoized = null;
        // execute the RPC call, doing a registry swap for historic as applicable
        const callWithRegistry = async (isScale, values) => {
            const blockId = hashIndex === -1
                ? null
                : values[hashIndex];
            const blockHash = blockId && def.params[hashIndex].type === 'BlockNumber'
                ? await __classPrivateFieldGet(this, _RpcCore_getBlockHash, "f")?.call(this, blockId)
                : blockId;
            const { registry } = isScale && blockHash && __classPrivateFieldGet(this, _RpcCore_getBlockRegistry, "f")
                ? await __classPrivateFieldGet(this, _RpcCore_getBlockRegistry, "f").call(this, u8aToU8a(blockHash))
                : { registry: __classPrivateFieldGet(this, _RpcCore_registryDefault, "f") };
            const params = this._formatInputs(registry, null, def, values);
            // only cache .at(<blockHash>) queries, e.g. where valid blockHash was supplied
            const result = await this.provider.send(rpcName, params.map((p) => p.toJSON()), !!blockHash);
            return this._formatResult(isScale, registry, blockHash, method, def, params, result);
        };
        const creator = (isScale) => (...values) => {
            const isDelayed = isScale && hashIndex !== -1 && !!values[hashIndex];
            return new Observable((observer) => {
                callWithRegistry(isScale, values)
                    .then((value) => {
                    observer.next(value);
                    observer.complete();
                })
                    .catch((error) => {
                    logErrorMessage(method, def, error);
                    observer.error(error);
                    observer.complete();
                });
                return () => {
                    // delete old results from cache
                    if (isScale) {
                        memoized?.unmemoize(...values);
                    }
                    else {
                        memoized?.raw.unmemoize(...values);
                    }
                };
            }).pipe(
            // eslint-disable-next-line deprecation/deprecation
            publishReplay(1), // create a Replay(1)
            isDelayed
                ? refCountDelay() // Unsubscribe after delay
                // eslint-disable-next-line deprecation/deprecation
                : refCount());
        };
        memoized = this._memomize(creator, def);
        return memoized;
    }
    // create a subscriptor, it subscribes once and resolves with the id as subscribe
    _createSubscriber({ paramsJson, subName, subType, update }, errorHandler) {
        return new Promise((resolve, reject) => {
            this.provider
                .subscribe(subType, subName, paramsJson, update)
                .then(resolve)
                .catch((error) => {
                errorHandler(error);
                reject(error);
            });
        });
    }
    _createMethodSubscribe(section, method, def) {
        const [updateType, subMethod, unsubMethod] = def.pubsub;
        const subName = `${section}_${subMethod}`;
        const unsubName = `${section}_${unsubMethod}`;
        const subType = `${section}_${updateType}`;
        let memoized = null;
        const creator = (isScale) => (...values) => {
            return new Observable((observer) => {
                // Have at least an empty promise, as used in the unsubscribe
                let subscriptionPromise = Promise.resolve(null);
                const registry = __classPrivateFieldGet(this, _RpcCore_registryDefault, "f");
                const errorHandler = (error) => {
                    logErrorMessage(method, def, error);
                    observer.error(error);
                };
                try {
                    const params = this._formatInputs(registry, null, def, values);
                    const paramsJson = params.map((p) => p.toJSON());
                    const update = (error, result) => {
                        if (error) {
                            logErrorMessage(method, def, error);
                            return;
                        }
                        try {
                            observer.next(this._formatResult(isScale, registry, null, method, def, params, result));
                        }
                        catch (error) {
                            observer.error(error);
                        }
                    };
                    subscriptionPromise = this._createSubscriber({ paramsJson, subName, subType, update }, errorHandler);
                }
                catch (error) {
                    errorHandler(error);
                }
                // Teardown logic
                return () => {
                    // Delete from cache, so old results don't hang around
                    if (isScale) {
                        memoized?.unmemoize(...values);
                    }
                    else {
                        memoized?.raw.unmemoize(...values);
                    }
                    // Unsubscribe from provider
                    subscriptionPromise
                        .then((subscriptionId) => isNull(subscriptionId)
                        ? Promise.resolve(false)
                        : this.provider.unsubscribe(subType, unsubName, subscriptionId))
                        .catch((error) => logErrorMessage(method, def, error));
                };
            }).pipe(drr());
        };
        memoized = this._memomize(creator, def);
        return memoized;
    }
    _formatInputs(registry, blockHash, def, inputs) {
        const reqArgCount = def.params.filter(({ isOptional }) => !isOptional).length;
        const optText = reqArgCount === def.params.length
            ? ''
            : ` (${def.params.length - reqArgCount} optional)`;
        if (inputs.length < reqArgCount || inputs.length > def.params.length) {
            throw new Error(`Expected ${def.params.length} parameters${optText}, ${inputs.length} found instead`);
        }
        return inputs.map((input, index) => registry.createTypeUnsafe(def.params[index].type, [input], { blockHash }));
    }
    _formatOutput(registry, blockHash, method, rpc, params, result) {
        if (rpc.type === 'StorageData') {
            const key = params[0];
            return this._formatStorageData(registry, blockHash, key, result);
        }
        else if (rpc.type === 'StorageChangeSet') {
            const keys = params[0];
            return keys
                ? this._formatStorageSet(registry, result.block, keys, result.changes)
                : registry.createType('StorageChangeSet', result);
        }
        else if (rpc.type === 'Vec<StorageChangeSet>') {
            const mapped = result.map(({ block, changes }) => [
                registry.createType('Hash', block),
                this._formatStorageSet(registry, block, params[0], changes)
            ]);
            // we only query at a specific block, not a range - flatten
            return method === 'queryStorageAt'
                ? mapped[0][1]
                : mapped;
        }
        return registry.createTypeUnsafe(rpc.type, [result], { blockHash });
    }
    _formatStorageData(registry, blockHash, key, value) {
        const isEmpty = isNull(value);
        // we convert to Uint8Array since it maps to the raw encoding, all
        // data will be correctly encoded (incl. numbers, excl. :code)
        const input = isEmpty
            ? null
            : isTreatAsHex(key)
                ? value
                : u8aToU8a(value);
        return this._newType(registry, blockHash, key, input, isEmpty);
    }
    _formatStorageSet(registry, blockHash, keys, changes) {
        // For StorageChangeSet, the changes has the [key, value] mappings
        const withCache = keys.length !== 1;
        // multiple return values (via state.storage subscription), decode the values
        // one at a time, all based on the query types. Three values can be returned -
        //   - Codec - There is a valid value, non-empty
        //   - null - The storage key is empty
        return keys.reduce((results, key, index) => {
            results.push(this._formatStorageSetEntry(registry, blockHash, key, changes, withCache, index));
            return results;
        }, []);
    }
    _formatStorageSetEntry(registry, blockHash, key, changes, withCache, entryIndex) {
        const hexKey = key.toHex();
        const found = changes.find(([key]) => key === hexKey);
        const isNotFound = isUndefined(found);
        // if we don't find the value, this is our fallback
        //   - in the case of an array of values, fill the hole from the cache
        //   - if a single result value, don't fill - it is not an update hole
        //   - fallback to an empty option in all cases
        if (isNotFound && withCache) {
            const cached = __classPrivateFieldGet(this, _RpcCore_storageCache, "f").get(hexKey);
            if (cached) {
                return cached;
            }
        }
        const value = isNotFound
            ? null
            : found[1];
        const isEmpty = isNull(value);
        const input = isEmpty || isTreatAsHex(key)
            ? value
            : u8aToU8a(value);
        const codec = this._newType(registry, blockHash, key, input, isEmpty, entryIndex);
        // store the retrieved result - the only issue with this cache is that there is no
        // clearing of it, so very long running processes (not just a couple of hours, longer)
        // will increase memory beyond what is allowed.
        __classPrivateFieldGet(this, _RpcCore_storageCache, "f").set(hexKey, codec);
        return codec;
    }
    _newType(registry, blockHash, key, input, isEmpty, entryIndex = -1) {
        // single return value (via state.getStorage), decode the value based on the
        // outputType that we have specified. Fallback to Raw on nothing
        const type = key.outputType || 'Raw';
        const meta = key.meta || EMPTY_META;
        const entryNum = entryIndex === -1
            ? ''
            : ` entry ${entryIndex}:`;
        try {
            return registry.createTypeUnsafe(type, [
                isEmpty
                    ? meta.fallback
                        // For old-style Linkage, we add an empty linkage at the end
                        ? type.includes('Linkage<')
                            ? u8aConcat(hexToU8a(meta.fallback.toHex()), new Uint8Array(2))
                            : hexToU8a(meta.fallback.toHex())
                        : undefined
                    : meta.modifier.isOptional
                        ? registry.createTypeUnsafe(type, [input], { blockHash, isPedantic: true })
                        : input
            ], { blockHash, isFallback: isEmpty && !!meta.fallback, isOptional: meta.modifier.isOptional, isPedantic: !meta.modifier.isOptional });
        }
        catch (error) {
            throw new Error(`Unable to decode storage ${key.section || 'unknown'}.${key.method || 'unknown'}:${entryNum}: ${error.message}`);
        }
    }
}
_RpcCore_instanceId = new WeakMap(), _RpcCore_registryDefault = new WeakMap(), _RpcCore_getBlockRegistry = new WeakMap(), _RpcCore_getBlockHash = new WeakMap(), _RpcCore_storageCache = new WeakMap();

function unwrapBlockNumber(hdr) {
    return isCompact(hdr.number)
        ? hdr.number.unwrap()
        : hdr.number;
}

const deriveNoopCache = {
    del: () => undefined,
    forEach: () => undefined,
    get: () => undefined,
    set: (_, value) => value
};

const CHACHE_EXPIRY = 7 * (24 * 60) * (60 * 1000);
let deriveCache;
function wrapCache(keyStart, cache) {
    return {
        del: (partial) => cache.del(`${keyStart}${partial}`),
        forEach: cache.forEach,
        get: (partial) => {
            const key = `${keyStart}${partial}`;
            const cached = cache.get(key);
            if (cached) {
                cached.x = Date.now();
                cache.set(key, cached);
                return cached.v;
            }
            return undefined;
        },
        set: (partial, v) => {
            cache.set(`${keyStart}${partial}`, { v, x: Date.now() });
        }
    };
}
function clearCache(cache) {
    // clear all expired values
    const now = Date.now();
    const all = [];
    cache.forEach((key, { x }) => {
        ((now - x) > CHACHE_EXPIRY) && all.push(key);
    });
    // don't do delete inside loop, just in-case
    all.forEach((key) => cache.del(key));
}
function setDeriveCache(prefix = '', cache) {
    deriveCache = cache
        ? wrapCache(`derive:${prefix}:`, cache)
        : deriveNoopCache;
    if (cache) {
        clearCache(cache);
    }
}
setDeriveCache();

function firstObservable(obs) {
    return obs.pipe(map(([a]) => a));
}
function firstMemo(fn) {
    return (instanceId, api) => memo(instanceId, (...args) => firstObservable(fn(api, ...args)));
}

function lazyDeriveSection(result, section, getKeys, creator) {
    lazyMethod(result, section, () => lazyMethods({}, getKeys(section), (method) => creator(section, method)));
}

/**
 * @name accountId
 * @param {(Address | AccountId | AccountIndex | string | null)} address - An accounts address in various formats.
 * @description  An [[AccountId]]
 */
function accountId(instanceId, api) {
    return memo(instanceId, (address) => {
        const decoded = isU8a(address)
            ? address
            : decodeAddress((address || '').toString());
        if (decoded.length > 8) {
            return of(api.registry.createType('AccountId', decoded));
        }
        const accountIndex = api.registry.createType('AccountIndex', decoded);
        return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map((a) => assertReturn(a, 'Unable to retrieve accountId')));
    });
}

function parseFlags(address, [electionsMembers, councilMembers, technicalCommitteeMembers, societyMembers, sudoKey]) {
    const addrStr = address && address.toString();
    const isIncluded = (id) => id.toString() === addrStr;
    return {
        isCouncil: (electionsMembers?.map((r) => Array.isArray(r) ? r[0] : r.who) || councilMembers || []).some(isIncluded),
        isSociety: (societyMembers || []).some(isIncluded),
        isSudo: sudoKey?.toString() === addrStr,
        isTechCommittee: (technicalCommitteeMembers || []).some(isIncluded)
    };
}
function _flags(instanceId, api) {
    return memo(instanceId, () => {
        const results = [undefined, [], [], [], undefined];
        const calls = [
            (api.query.phragmenElection || api.query.electionsPhragmen || api.query.elections)?.members,
            api.query.council?.members,
            api.query.technicalCommittee?.members,
            api.query.society?.members,
            api.query.sudo?.key
        ];
        const filtered = calls.filter((c) => c);
        if (!filtered.length) {
            return of(results);
        }
        return api.queryMulti(filtered).pipe(map((values) => {
            let resultIndex = -1;
            for (let i = 0; i < calls.length; i++) {
                if (isFunction$1(calls[i])) {
                    results[i] = values[++resultIndex];
                }
            }
            return results;
        }));
    });
}
/**
 * @name info
 * @description Returns account membership flags
 */
function flags(instanceId, api) {
    return memo(instanceId, (address) => api.derive.accounts._flags().pipe(map((r) => parseFlags(address, r))));
}

/**
 * @name idAndIndex
 * @param {(Address | AccountId | AccountIndex | Uint8Array | string | null)} address - An accounts address in various formats.
 * @description  An array containing the [[AccountId]] and [[AccountIndex]] as optional values.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.accounts.idAndIndex('F7Hs', ([id, ix]) => {
 *   console.log(`AccountId #${id} with corresponding AccountIndex ${ix}`);
 * });
 * ```
 */
function idAndIndex(instanceId, api) {
    return memo(instanceId, (address) => {
        try {
            // yes, this can fail, don't care too much, catch will catch it
            const decoded = isU8a(address)
                ? address
                : decodeAddress((address || '').toString());
            if (decoded.length > 8) {
                const accountId = api.registry.createType('AccountId', decoded);
                return api.derive.accounts.idToIndex(accountId).pipe(map((accountIndex) => [accountId, accountIndex]));
            }
            const accountIndex = api.registry.createType('AccountIndex', decoded);
            return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map((accountId) => [accountId, accountIndex]));
        }
        catch (error) {
            return of([undefined, undefined]);
        }
    });
}

/**
 * @name idToIndex
 * @param {( AccountId | string )} accountId - An accounts Id in different formats.
 * @returns Returns the corresponding AccountIndex.
 * @example
 * <BR>
 *
 * ```javascript
 * const ALICE = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';
 * api.derive.accounts.idToIndex(ALICE, (accountIndex) => {
 *   console.log(`The AccountIndex of ${ALICE} is ${accountIndex}`);
 * });
 * ```
 */
function idToIndex(instanceId, api) {
    return memo(instanceId, (accountId) => api.derive.accounts.indexes().pipe(map((indexes) => (indexes || {})[accountId.toString()])));
}

const UNDEF_HEX = { toHex: () => undefined };
function dataAsString(data) {
    return data.isRaw
        ? u8aToString(data.asRaw.toU8a(true))
        : data.isNone
            ? undefined
            : data.toHex();
}
function extractOther(additional) {
    return additional.reduce((other, [_key, _value]) => {
        const key = dataAsString(_key);
        const value = dataAsString(_value);
        if (key && value) {
            other[key] = value;
        }
        return other;
    }, {});
}
function extractIdentity(identityOfOpt, superOf) {
    if (!identityOfOpt?.isSome) {
        return { judgements: [] };
    }
    const { info, judgements } = identityOfOpt.unwrap();
    const topDisplay = dataAsString(info.display);
    return {
        display: (superOf && dataAsString(superOf[1])) || topDisplay,
        displayParent: superOf && topDisplay,
        email: dataAsString(info.email),
        image: dataAsString(info.image),
        judgements,
        legal: dataAsString(info.legal),
        other: extractOther(info.additional),
        parent: superOf && superOf[0],
        pgp: info.pgpFingerprint.unwrapOr(UNDEF_HEX).toHex(),
        riot: dataAsString(info.riot),
        twitter: dataAsString(info.twitter),
        web: dataAsString(info.web)
    };
}
function getParent(api, identityOfOpt, superOfOpt) {
    if (identityOfOpt?.isSome) {
        // this identity has something set
        return of([identityOfOpt, undefined]);
    }
    else if (superOfOpt?.isSome) {
        const superOf = superOfOpt.unwrap();
        return combineLatest([
            api.derive.accounts._identity(superOf[0]).pipe(map(([info]) => info)),
            of(superOf)
        ]);
    }
    // nothing of value returned
    return of([undefined, undefined]);
}
function _identity(instanceId, api) {
    return memo(instanceId, (accountId) => accountId && api.query.identity?.identityOf
        ? combineLatest([
            api.query.identity.identityOf(accountId),
            api.query.identity.superOf(accountId)
        ])
        : of([undefined, undefined]));
}
/**
 * @name identity
 * @description Returns identity info for an account
 */
function identity$1(instanceId, api) {
    return memo(instanceId, (accountId) => api.derive.accounts._identity(accountId).pipe(switchMap(([identityOfOpt, superOfOpt]) => getParent(api, identityOfOpt, superOfOpt)), map(([identityOfOpt, superOf]) => extractIdentity(identityOfOpt, superOf))));
}
const hasIdentity = /*#__PURE__*/ firstMemo((api, accountId) => api.derive.accounts.hasIdentityMulti([accountId]));
function hasIdentityMulti(instanceId, api) {
    return memo(instanceId, (accountIds) => api.query.identity?.identityOf
        ? combineLatest([
            api.query.identity.identityOf.multi(accountIds),
            api.query.identity.superOf.multi(accountIds)
        ]).pipe(map(([identities, supers]) => identities.map((identityOfOpt, index) => {
            const superOfOpt = supers[index];
            const parentId = superOfOpt && superOfOpt.isSome
                ? superOfOpt.unwrap()[0].toString()
                : undefined;
            let display;
            if (identityOfOpt && identityOfOpt.isSome) {
                const value = dataAsString(identityOfOpt.unwrap().info.display);
                if (value && !isHex(value)) {
                    display = value;
                }
            }
            return { display, hasIdentity: !!(display || parentId), parentId };
        })))
        : of(accountIds.map(() => ({ hasIdentity: false }))));
}

/**
 * @name indexToId
 * @param {( AccountIndex | string )} accountIndex - An accounts index in different formats.
 * @returns Returns the corresponding AccountId.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.accounts.indexToId('F7Hs', (accountId) => {
 *   console.log(`The AccountId of F7Hs is ${accountId}`);
 * });
 * ```
 */
function indexToId(instanceId, api) {
    return memo(instanceId, (accountIndex) => api.query.indices
        ? api.query.indices.accounts(accountIndex).pipe(map((optResult) => optResult.unwrapOr([])[0]))
        : of(undefined));
}

let indicesCache = null;
function queryAccounts(api) {
    return api.query.indices.accounts.entries().pipe(map((entries) => entries.reduce((indexes, [key, idOpt]) => {
        if (idOpt.isSome) {
            indexes[idOpt.unwrap()[0].toString()] = api.registry.createType('AccountIndex', key.args[0]);
        }
        return indexes;
    }, {})));
}
/**
 * @name indexes
 * @returns Returns all the indexes on the system.
 * @description This is an unwieldly query since it loops through
 * all of the enumsets and returns all of the values found. This could be up to 32k depending
 * on the number of active accounts in the system
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.accounts.indexes((indexes) => {
 *   console.log('All existing AccountIndexes', indexes);
 * });
 * ```
 */
function indexes$1(instanceId, api) {
    return memo(instanceId, () => indicesCache
        ? of(indicesCache)
        : (api.query.indices
            ? queryAccounts(api).pipe(startWith({}))
            : of({})).pipe(map((indices) => {
            indicesCache = indices;
            return indices;
        })));
}

function retrieveNick(api, accountId) {
    return (accountId && api.query.nicks?.nameOf
        ? api.query.nicks.nameOf(accountId)
        : of(undefined)).pipe(map((nameOf) => nameOf?.isSome
        ? u8aToString(nameOf.unwrap()[0]).substring(0, api.consts.nicks.maxLength.toNumber())
        : undefined));
}
/**
 * @name info
 * @description Returns aux. info with regards to an account, current that includes the accountId, accountIndex and nickname
 */
function info$4(instanceId, api) {
    return memo(instanceId, (address) => api.derive.accounts.idAndIndex(address).pipe(switchMap(([accountId, accountIndex]) => combineLatest([
        of({ accountId, accountIndex }),
        api.derive.accounts.identity(accountId),
        retrieveNick(api, accountId)
    ])), map(([{ accountId, accountIndex }, identity, nickname]) => ({
        accountId, accountIndex, identity, nickname
    }))));
}

var accounts$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    _flags: _flags,
    _identity: _identity,
    accountId: accountId,
    flags: flags,
    hasIdentity: hasIdentity,
    hasIdentityMulti: hasIdentityMulti,
    idAndIndex: idAndIndex,
    idToIndex: idToIndex,
    identity: identity$1,
    indexToId: indexToId,
    indexes: indexes$1,
    info: info$4
});

function getInstance(api, section) {
    const instances = api.registry.getModuleInstances(api.runtimeVersion.specName, section);
    const name = instances && instances.length
        ? instances[0]
        : section;
    return api.query[name];
}
function withSection(section, fn) {
    return (instanceId, api) => memo(instanceId, fn(getInstance(api, section), api, instanceId));
}
function callMethod(method, empty) {
    return (section) => withSection(section, (query) => () => isFunction$1(query?.[method])
        ? query[method]()
        : of(empty));
}

const members$5 = /*#__PURE__*/ callMethod('members', []);

function prime$4(section) {
    return withSection(section, (query) => () => isFunction$1(query?.prime)
        ? query.prime().pipe(map((o) => o.unwrapOr(null)))
        : of(null));
}

function parse$4(api, [hashes, proposals, votes]) {
    return proposals.map((o, index) => ({
        hash: api.registry.createType('Hash', hashes[index]),
        proposal: o && o.isSome
            ? o.unwrap()
            : null,
        votes: votes[index].unwrapOr(null)
    }));
}
function _proposalsFrom(api, query, hashes) {
    return (isFunction$1(query?.proposals) && hashes.length
        ? combineLatest([
            of(hashes),
            // this should simply be api.query[section].proposalOf.multi<Option<Proposal>>(hashes),
            // however we have had cases on Edgeware where the indices have moved around after an
            // upgrade, which results in invalid on-chain data
            query.proposalOf.multi(hashes).pipe(catchError(() => of(hashes.map(() => null)))),
            query.voting.multi(hashes)
        ])
        : of([[], [], []])).pipe(map((r) => parse$4(api, r)));
}
function hasProposals$4(section) {
    return withSection(section, (query) => () => of(isFunction$1(query?.proposals)));
}
function proposals$6(section) {
    return withSection(section, (query, api) => () => api.derive[section].proposalHashes().pipe(switchMap((all) => _proposalsFrom(api, query, all))));
}
function proposal$4(section) {
    return withSection(section, (query, api) => (hash) => isFunction$1(query?.proposals)
        ? firstObservable(_proposalsFrom(api, query, [hash]))
        : of(null));
}
const proposalCount$4 = /*#__PURE__*/ callMethod('proposalCount', null);
const proposalHashes$4 = /*#__PURE__*/ callMethod('proposals', []);

const members$4 = /*#__PURE__*/ members$5('allianceMotion');
const hasProposals$3 = /*#__PURE__*/ hasProposals$4('allianceMotion');
const proposal$3 = /*#__PURE__*/ proposal$4('allianceMotion');
const proposalCount$3 = /*#__PURE__*/ proposalCount$4('allianceMotion');
const proposalHashes$3 = /*#__PURE__*/ proposalHashes$4('allianceMotion');
const proposals$5 = /*#__PURE__*/ proposals$6('allianceMotion');
const prime$3 = /*#__PURE__*/ prime$4('allianceMotion');

var alliance = /*#__PURE__*/Object.freeze({
    __proto__: null,
    hasProposals: hasProposals$3,
    members: members$4,
    prime: prime$3,
    proposal: proposal$3,
    proposalCount: proposalCount$3,
    proposalHashes: proposalHashes$3,
    proposals: proposals$5
});

function getQueryInterface(api) {
    return (
    // latest substrate (latest always first)
    api.query.voterBagsList ||
        // previous substrate
        api.query.bagsList ||
        // latest polkadot
        api.query.voterList);
}

function orderBags(ids, bags) {
    const sorted = ids
        .map((id, index) => ({
        bag: bags[index].unwrapOr(null),
        id,
        key: id.toString()
    }))
        .sort((a, b) => b.id.cmp(a.id));
    const max = sorted.length - 1;
    return sorted.map((entry, index) => objectSpread(entry, {
        bagLower: index === max
            ? BN_ZERO
            : sorted[index + 1].id,
        bagUpper: entry.id,
        index
    }));
}
function _getIds(instanceId, api) {
    const query = getQueryInterface(api);
    return memo(instanceId, (_ids) => {
        const ids = _ids.map((id) => bnToBn(id));
        return ids.length
            ? query.listBags.multi(ids).pipe(map((bags) => orderBags(ids, bags)))
            : of([]);
    });
}
function all$1(instanceId, api) {
    const query = getQueryInterface(api);
    return memo(instanceId, () => query.listBags.keys().pipe(switchMap((keys) => api.derive.bagsList._getIds(keys.map(({ args: [id] }) => id))), map((list) => list.filter(({ bag }) => bag))));
}
function get(instanceId, api) {
    return memo(instanceId, (id) => api.derive.bagsList._getIds([bnToBn(id)]).pipe(map((bags) => bags[0])));
}

function expand(instanceId, api) {
    return memo(instanceId, (bag) => api.derive.bagsList.listNodes(bag.bag).pipe(map((nodes) => objectSpread({ nodes }, bag))));
}
function getExpanded(instanceId, api) {
    return memo(instanceId, (id) => api.derive.bagsList.get(id).pipe(switchMap((bag) => api.derive.bagsList.expand(bag))));
}

function traverseLinks(api, head) {
    const subject = new BehaviorSubject(head);
    const query = getQueryInterface(api);
    return subject.pipe(switchMap((account) => query.listNodes(account)), tap((node) => {
        nextTick(() => {
            node.isSome && node.value.next.isSome
                ? subject.next(node.unwrap().next.unwrap())
                : subject.complete();
        });
    }), toArray(), // toArray since we want to startSubject to be completed
    map((all) => all.map((o) => o.unwrap())));
}
function listNodes(instanceId, api) {
    return memo(instanceId, (bag) => bag && bag.head.isSome
        ? traverseLinks(api, bag.head.unwrap())
        : of([]));
}

var bagsList = /*#__PURE__*/Object.freeze({
    __proto__: null,
    _getIds: _getIds,
    all: all$1,
    expand: expand,
    get: get,
    getExpanded: getExpanded,
    listNodes: listNodes
});

const VESTING_ID = '0x76657374696e6720';
function calcLocked(api, bestNumber, locks) {
    let lockedBalance = api.registry.createType('Balance');
    let lockedBreakdown = [];
    let vestingLocked = api.registry.createType('Balance');
    let allLocked = false;
    if (Array.isArray(locks)) {
        // only get the locks that are valid until passed the current block
        lockedBreakdown = locks.filter(({ until }) => !until || (bestNumber && until.gt(bestNumber)));
        allLocked = lockedBreakdown.some(({ amount }) => amount && amount.isMax());
        vestingLocked = api.registry.createType('Balance', lockedBreakdown.filter(({ id }) => id.eq(VESTING_ID)).reduce((result, { amount }) => result.iadd(amount), new BN(0)));
        // get the maximum of the locks according to https://github.com/paritytech/substrate/blob/master/srml/balances/src/lib.rs#L699
        const notAll = lockedBreakdown.filter(({ amount }) => amount && !amount.isMax());
        if (notAll.length) {
            lockedBalance = api.registry.createType('Balance', bnMax(...notAll.map(({ amount }) => amount)));
        }
    }
    return { allLocked, lockedBalance, lockedBreakdown, vestingLocked };
}
function calcShared(api, bestNumber, data, locks) {
    const { allLocked, lockedBalance, lockedBreakdown, vestingLocked } = calcLocked(api, bestNumber, locks);
    return objectSpread({}, data, {
        availableBalance: api.registry.createType('Balance', allLocked ? 0 : bnMax(new BN(0), data?.freeBalance ? data.freeBalance.sub(lockedBalance) : new BN(0))),
        lockedBalance,
        lockedBreakdown,
        vestingLocked
    });
}
function calcVesting(bestNumber, shared, _vesting) {
    // Calculate the vesting balances,
    //  - offset = balance locked at startingBlock
    //  - perBlock is the unlock amount
    const vesting = _vesting || [];
    const isVesting = !shared.vestingLocked.isZero();
    const vestedBalances = vesting.map(({ locked, perBlock, startingBlock }) => bestNumber.gt(startingBlock)
        ? bnMin(locked, perBlock.mul(bestNumber.sub(startingBlock)))
        : BN_ZERO);
    const vestedBalance = vestedBalances.reduce((all, value) => all.iadd(value), new BN(0));
    const vestingTotal = vesting.reduce((all, { locked }) => all.iadd(locked), new BN(0));
    return {
        isVesting,
        vestedBalance,
        vestedClaimable: isVesting
            ? shared.vestingLocked.sub(vestingTotal.sub(vestedBalance))
            : BN_ZERO,
        vesting: vesting
            .map(({ locked, perBlock, startingBlock }, index) => ({
            endBlock: locked.div(perBlock).iadd(startingBlock),
            locked,
            perBlock,
            startingBlock,
            vested: vestedBalances[index]
        }))
            .filter(({ locked }) => !locked.isZero()),
        vestingTotal
    };
}
function calcBalances$1(api, result) {
    const [data, [vesting, allLocks, namedReserves], bestNumber] = result;
    const shared = calcShared(api, bestNumber, data, allLocks[0]);
    return objectSpread(shared, calcVesting(bestNumber, shared, vesting), {
        accountId: data.accountId,
        accountNonce: data.accountNonce,
        additional: allLocks
            .slice(1)
            .map((l, index) => calcShared(api, bestNumber, data.additional[index], l)),
        namedReserves
    });
}
function queryOld(api, accountId) {
    return combineLatest([
        api.query.balances.locks(accountId),
        api.query.balances.vesting(accountId)
    ]).pipe(map(([locks, optVesting]) => {
        let vestingNew = null;
        if (optVesting.isSome) {
            const { offset: locked, perBlock, startingBlock } = optVesting.unwrap();
            vestingNew = api.registry.createType('VestingInfo', { locked, perBlock, startingBlock });
        }
        return [
            vestingNew
                ? [vestingNew]
                : null,
            [locks],
            []
        ];
    }));
}
const isNonNullable = (nullable) => !!nullable;
function createCalls(calls) {
    return [
        calls.map((c) => !c),
        calls.filter(isNonNullable)
    ];
}
function queryCurrent(api, accountId, balanceInstances = ['balances']) {
    const [lockEmpty, lockQueries] = createCalls(balanceInstances.map((m) => api.derive[m]?.customLocks || api.query[m]?.locks));
    const [reserveEmpty, reserveQueries] = createCalls(balanceInstances.map((m) => api.query[m]?.reserves));
    return combineLatest([
        api.query.vesting?.vesting
            ? api.query.vesting.vesting(accountId)
            : of(api.registry.createType('Option<VestingInfo>')),
        lockQueries.length
            ? combineLatest(lockQueries.map((c) => c(accountId)))
            : of([]),
        reserveQueries.length
            ? combineLatest(reserveQueries.map((c) => c(accountId)))
            : of([])
    ]).pipe(map(([opt, locks, reserves]) => {
        let offsetLock = -1;
        let offsetReserve = -1;
        const vesting = opt.unwrapOr(null);
        return [
            vesting
                ? Array.isArray(vesting)
                    ? vesting
                    : [vesting]
                : null,
            lockEmpty.map((e) => e ? api.registry.createType('Vec<BalanceLock>') : locks[++offsetLock]),
            reserveEmpty.map((e) => e ? api.registry.createType('Vec<PalletBalancesReserveData>') : reserves[++offsetReserve])
        ];
    }));
}
/**
 * @name all
 * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.
 * @returns An object containing the results of various balance queries
 * @example
 * <BR>
 *
 * ```javascript
 * const ALICE = 'F7Hs';
 *
 * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {
 *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);
 * });
 * ```
 */
function all(instanceId, api) {
    const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName, 'balances');
    return memo(instanceId, (address) => combineLatest([
        api.derive.balances.account(address),
        isFunction$1(api.query.system?.account) || isFunction$1(api.query.balances?.account)
            ? queryCurrent(api, address, balanceInstances)
            : queryOld(api, address)
    ]).pipe(switchMap(([account, locks]) => combineLatest([
        of(account),
        of(locks),
        api.derive.chain.bestNumber()
    ])), map((result) => calcBalances$1(api, result))));
}

function zeroBalance(api) {
    return api.registry.createType('Balance');
}
function getBalance(api, [freeBalance, reservedBalance, frozenFee, frozenMisc]) {
    const votingBalance = api.registry.createType('Balance', freeBalance.toBn());
    return {
        freeBalance,
        frozenFee,
        frozenMisc,
        reservedBalance,
        votingBalance
    };
}
function calcBalances(api, [accountId, [accountNonce, [primary, ...additional]]]) {
    return objectSpread({
        accountId,
        accountNonce,
        additional: additional.map((b) => getBalance(api, b))
    }, getBalance(api, primary));
}
function queryBalancesFree(api, accountId) {
    return combineLatest([
        api.query.balances.freeBalance(accountId),
        api.query.balances.reservedBalance(accountId),
        api.query.system.accountNonce(accountId)
    ]).pipe(map(([freeBalance, reservedBalance, accountNonce]) => [
        accountNonce,
        [[freeBalance, reservedBalance, zeroBalance(api), zeroBalance(api)]]
    ]));
}
function queryNonceOnly(api, accountId) {
    const fill = (nonce) => [
        nonce,
        [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]
    ];
    return isFunction$1(api.query.system.account)
        ? api.query.system.account(accountId).pipe(map(({ nonce }) => fill(nonce)))
        : isFunction$1(api.query.system.accountNonce)
            ? api.query.system.accountNonce(accountId).pipe(map((nonce) => fill(nonce)))
            : of(fill(api.registry.createType('Index')));
}
function queryBalancesAccount(api, accountId, modules = ['balances']) {
    const balances = modules
        .map((m) => api.derive[m]?.customAccount || api.query[m]?.account)
        .filter((q) => isFunction$1(q));
    const extract = (nonce, data) => [
        nonce,
        data.map(({ feeFrozen, free, miscFrozen, reserved }) => [free, reserved, feeFrozen, miscFrozen])
    ];
    // NOTE this is for the first case where we do have instances specified
    return balances.length
        ? isFunction$1(api.query.system.account)
            ? combineLatest([
                api.query.system.account(accountId),
                ...balances.map((c) => c(accountId))
            ]).pipe(map(([{ nonce }, ...balances]) => extract(nonce, balances)))
            : combineLatest([
                api.query.system.accountNonce(accountId),
                ...balances.map((c) => c(accountId))
            ]).pipe(map(([nonce, ...balances]) => extract(nonce, balances)))
        : queryNonceOnly(api, accountId);
}
function querySystemAccount(api, accountId) {
    // AccountInfo is current, support old, eg. Edgeware
    return api.query.system.account(accountId).pipe(map((infoOrTuple) => {
        const data = infoOrTuple.nonce
            ? infoOrTuple.data
            : infoOrTuple[1];
        const nonce = infoOrTuple.nonce || infoOrTuple[0];
        if (!data || data.isEmpty) {
            return [
                nonce,
                [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]
            ];
        }
        const { feeFrozen, free, miscFrozen, reserved } = data;
        return [
            nonce,
            [[free, reserved, feeFrozen, miscFrozen]]
        ];
    }));
}
/**
 * @name account
 * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.
 * @returns An object containing the results of various balance queries
 * @example
 * <BR>
 *
 * ```javascript
 * const ALICE = 'F7Hs';
 *
 * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {
 *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);
 * });
 * ```
 */
function account$1(instanceId, api) {
    const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName, 'balances');
    const nonDefaultBalances = balanceInstances && balanceInstances[0] !== 'balances';
    return memo(instanceId, (address) => api.derive.accounts.accountId(address).pipe(switchMap((accountId) => (accountId
        ? combineLatest([
            of(accountId),
            nonDefaultBalances
                ? queryBalancesAccount(api, accountId, balanceInstances)
                : isFunction$1(api.query.system?.account)
                    ? querySystemAccount(api, accountId)
                    : isFunction$1(api.query.balances?.account)
                        ? queryBalancesAccount(api, accountId)
                        : isFunction$1(api.query.balances?.freeBalance)
                            ? queryBalancesFree(api, accountId)
                            : queryNonceOnly(api, accountId)
        ])
        : of([api.registry.createType('AccountId'), [
                api.registry.createType('Index'),
                [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]
            ]]))), map((result) => calcBalances(api, result))));
}

function votingBalances(instanceId, api) {
    return memo(instanceId, (addresses) => !addresses || !addresses.length
        ? of([])
        : combineLatest(addresses.map((accountId) => api.derive.balances.account(accountId))));
}

const votingBalance = all;

var balances = /*#__PURE__*/Object.freeze({
    __proto__: null,
    account: account$1,
    all: all,
    votingBalance: votingBalance,
    votingBalances: votingBalances
});

function filterBountiesProposals(api, allProposals) {
    const bountyTxBase = api.tx.bounties ? api.tx.bounties : api.tx.treasury;
    const bountyProposalCalls = [bountyTxBase.approveBounty, bountyTxBase.closeBounty, bountyTxBase.proposeCurator, bountyTxBase.unassignCurator];
    return allProposals.filter((proposal) => bountyProposalCalls.find((bountyCall) => proposal.proposal && bountyCall.is(proposal.proposal)));
}

function parseResult$2([maybeBounties, maybeDescriptions, ids, bountyProposals]) {
    const bounties = [];
    maybeBounties.forEach((bounty, index) => {
        if (bounty.isSome) {
            bounties.push({
                bounty: bounty.unwrap(),
                description: maybeDescriptions[index].unwrapOrDefault().toUtf8(),
                index: ids[index],
                proposals: bountyProposals.filter((bountyProposal) => bountyProposal.proposal && ids[index].eq(bountyProposal.proposal.args[0]))
            });
        }
    });
    return bounties;
}
function bounties$1(instanceId, api) {
    const bountyBase = api.query.bounties || api.query.treasury;
    return memo(instanceId, () => bountyBase.bounties
        ? combineLatest([
            bountyBase.bountyCount(),
            api.query.council
                ? api.query.council.proposalCount()
                : of(0)
        ]).pipe(switchMap(() => combineLatest([
            bountyBase.bounties.keys(),
            api.derive.council
                ? api.derive.council.proposals()
                : of([])
        ])), switchMap(([keys, proposals]) => {
            const ids = keys.map(({ args: [id] }) => id);
            return combineLatest([
                bountyBase.bounties.multi(ids),
                bountyBase.bountyDescriptions.multi(ids),
                of(ids),
                of(filterBountiesProposals(api, proposals))
            ]);
        }), map(parseResult$2))
        : of(parseResult$2([[], [], [], []])));
}

var bounties = /*#__PURE__*/Object.freeze({
    __proto__: null,
    bounties: bounties$1
});

function createBlockNumberDerive(fn) {
    return (instanceId, api) => memo(instanceId, () => fn(api).pipe(map(unwrapBlockNumber)));
}
function getAuthorDetails(header, queryAt) {
    // this is Moonbeam specific
    if (queryAt.authorMapping && queryAt.authorMapping.mappingWithDeposit) {
        const mapId = header.digest.logs[0] && ((header.digest.logs[0].isConsensus && header.digest.logs[0].asConsensus[1]) ||
            (header.digest.logs[0].isPreRuntime && header.digest.logs[0].asPreRuntime[1]));
        if (mapId) {
            return combineLatest([
                of(header),
                queryAt.session
                    ? queryAt.session.validators()
                    : of(null),
                queryAt.authorMapping.mappingWithDeposit(mapId).pipe(map((opt) => opt.unwrapOr({ account: null }).account))
            ]);
        }
    }
    // normal operation, non-mapping
    return combineLatest([
        of(header),
        queryAt.session
            ? queryAt.session.validators()
            : of(null),
        of(null)
    ]);
}

/**
 * @name bestNumber
 * @returns The latest block number.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.chain.bestNumber((blockNumber) => {
 *   console.log(`the current best block is #${blockNumber}`);
 * });
 * ```
 */
const bestNumber = /*#__PURE__*/ createBlockNumberDerive((api) => api.rpc.chain.subscribeNewHeads());

/**
 * @name bestNumberFinalized
 * @returns A BlockNumber
 * @description Get the latest finalized block number.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.chain.bestNumberFinalized((blockNumber) => {
 *   console.log(`the current finalized block is #${blockNumber}`);
 * });
 * ```
 */
const bestNumberFinalized = /*#__PURE__*/ createBlockNumberDerive((api) => api.rpc.chain.subscribeFinalizedHeads());

/**
 * @name bestNumberLag
 * @returns A number of blocks
 * @description Calculates the lag between finalized head and best head
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.chain.bestNumberLag((lag) => {
 *   console.log(`finalized is ${lag} blocks behind head`);
 * });
 * ```
 */
function bestNumberLag(instanceId, api) {
    return memo(instanceId, () => combineLatest([
        api.derive.chain.bestNumber(),
        api.derive.chain.bestNumberFinalized()
    ]).pipe(map(([bestNumber, bestNumberFinalized]) => api.registry.createType('BlockNumber', bestNumber.sub(bestNumberFinalized)))));
}

function extractAuthor(digest, sessionValidators = []) {
    const [citem] = digest.logs.filter((e) => e.isConsensus);
    const [pitem] = digest.logs.filter((e) => e.isPreRuntime);
    const [sitem] = digest.logs.filter((e) => e.isSeal);
    let accountId;
    try {
        // This is critical to be first for BABE (before Consensus)
        // If not first, we end up dropping the author at session-end
        if (pitem) {
            const [engine, data] = pitem.asPreRuntime;
            accountId = engine.extractAuthor(data, sessionValidators);
        }
        if (!accountId && citem) {
            const [engine, data] = citem.asConsensus;
            accountId = engine.extractAuthor(data, sessionValidators);
        }
        // SEAL, still used in e.g. Kulupu for pow
        if (!accountId && sitem) {
            const [engine, data] = sitem.asSeal;
            accountId = engine.extractAuthor(data, sessionValidators);
        }
    }
    catch {
        // ignore
    }
    return accountId;
}

function createHeaderExtended(registry, header, validators, author) {
    var _Implementation_author;
    // an instance of the base extrinsic for us to extend
    const HeaderBase = registry.createClass('Header');
    class Implementation extends HeaderBase {
        constructor(registry, header, validators, author) {
            super(registry, header);
            _Implementation_author.set(this, void 0);
            __classPrivateFieldSet(this, _Implementation_author, author || extractAuthor(this.digest, validators || []), "f");
            this.createdAtHash = header?.createdAtHash;
        }
        /**
         * @description Convenience method, returns the author for the block
         */
        get author() {
            return __classPrivateFieldGet(this, _Implementation_author, "f");
        }
    }
    _Implementation_author = new WeakMap();
    return new Implementation(registry, header, validators, author);
}

function mapExtrinsics(extrinsics, records) {
    return extrinsics.map((extrinsic, index) => {
        let dispatchError;
        let dispatchInfo;
        const events = records
            .filter(({ phase }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(index))
            .map(({ event }) => {
            if (event.section === 'system') {
                if (event.method === 'ExtrinsicSuccess') {
                    dispatchInfo = event.data[0];
                }
                else if (event.method === 'ExtrinsicFailed') {
                    dispatchError = event.data[0];
                    dispatchInfo = event.data[1];
                }
            }
            return event;
        });
        return { dispatchError, dispatchInfo, events, extrinsic };
    });
}
function createSignedBlockExtended(registry, block, events, validators, author) {
    var _Implementation_author, _Implementation_events, _Implementation_extrinsics;
    // an instance of the base extrinsic for us to extend
    const SignedBlockBase = registry.createClass('SignedBlock');
    class Implementation extends SignedBlockBase {
        constructor(registry, block, events, validators, author) {
            super(registry, block);
            _Implementation_author.set(this, void 0);
            _Implementation_events.set(this, void 0);
            _Implementation_extrinsics.set(this, void 0);
            __classPrivateFieldSet(this, _Implementation_author, author || extractAuthor(this.block.header.digest, validators || []), "f");
            __classPrivateFieldSet(this, _Implementation_events, events || [], "f");
            __classPrivateFieldSet(this, _Implementation_extrinsics, mapExtrinsics(this.block.extrinsics, __classPrivateFieldGet(this, _Implementation_events, "f")), "f");
            this.createdAtHash = block?.createdAtHash;
        }
        /**
         * @description Convenience method, returns the author for the block
         */
        get author() {
            return __classPrivateFieldGet(this, _Implementation_author, "f");
        }
        /**
         * @description Convenience method, returns the events associated with the block
         */
        get events() {
            return __classPrivateFieldGet(this, _Implementation_events, "f");
        }
        /**
         * @description Returns the extrinsics and their events, mapped
         */
        get extrinsics() {
            return __classPrivateFieldGet(this, _Implementation_extrinsics, "f");
        }
    }
    _Implementation_author = new WeakMap(), _Implementation_events = new WeakMap(), _Implementation_extrinsics = new WeakMap();
    return new Implementation(registry, block, events, validators, author);
}

/**
 * @name getHeader
 * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.
 * @returns An array containing the block header and the block author
 * @description Get a specific block header and extend it with the author
 * @example
 * <BR>
 *
 * ```javascript
 * const { author, number } = await api.derive.chain.getHeader('0x123...456');
 *
 * console.log(`block #${number} was authored by ${author}`);
 * ```
 */
function getHeader(instanceId, api) {
    return memo(instanceId, (blockHash) => combineLatest([
        api.rpc.chain.getHeader(blockHash),
        api.queryAt(blockHash)
    ]).pipe(switchMap(([header, queryAt]) => getAuthorDetails(header, queryAt)), map(([header, validators, author]) => createHeaderExtended((validators || header).registry, header, validators, author))));
}

/**
 * @name getBlock
 * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.
 * @description Get a specific block (e.g. rpc.chain.getBlock) and extend it with the author
 * @example
 * <BR>
 *
 * ```javascript
 * const { author, block } = await api.derive.chain.getBlock('0x123...456');
 *
 * console.log(`block #${block.header.number} was authored by ${author}`);
 * ```
 */
function getBlock(instanceId, api) {
    return memo(instanceId, (blockHash) => combineLatest([
        api.rpc.chain.getBlock(blockHash),
        api.queryAt(blockHash)
    ]).pipe(switchMap(([signedBlock, queryAt]) => combineLatest([
        of(signedBlock),
        queryAt.system.events(),
        getAuthorDetails(signedBlock.block.header, queryAt)
    ])), map(([signedBlock, events, [, validators, author]]) => createSignedBlockExtended(events.registry, signedBlock, events, validators, author))));
}

function getBlockByNumber(instanceId, api) {
    return memo(instanceId, (blockNumber) => api.rpc.chain.getBlockHash(blockNumber).pipe(switchMap((h) => api.derive.chain.getBlock(h))));
}

/**
 * Returns a header range from startHash to to (not including) endHash, i.e. lastBlock.parentHash === endHash
 */
function _getHeaderRange(instanceId, api) {
    return memo(instanceId, (startHash, endHash, prev = []) => api.rpc.chain.getHeader(startHash).pipe(switchMap((header) => header.parentHash.eq(endHash)
        ? of([header, ...prev])
        : api.derive.chain._getHeaderRange(header.parentHash, endHash, [header, ...prev]))));
}
/**
 * @name subscribeFinalizedHeads
 * @description An observable of the finalized block headers. Unlike the base
 * chain.subscribeFinalizedHeads this does not skip any headers. Since finalization
 * may skip specific blocks (finalization happens in terms of chains), this version
 * of the derive tracks missing headers (since last  retrieved) and provides them
 * to the caller
 */
function subscribeFinalizedHeads(instanceId, api) {
    return memo(instanceId, () => {
        let prevHash = null;
        return api.rpc.chain.subscribeFinalizedHeads().pipe(switchMap((header) => {
            const endHash = prevHash;
            const startHash = header.parentHash;
            prevHash = header.createdAtHash = header.hash;
            return endHash === null || startHash.eq(endHash)
                ? of(header)
                : api.derive.chain._getHeaderRange(startHash, endHash, [header]).pipe(switchMap((headers) => from(headers)));
        }));
    });
}

/**
 * @name subscribeNewBlocks
 * @returns The latest block & events for that block
 */
function subscribeNewBlocks(instanceId, api) {
    return memo(instanceId, () => api.derive.chain.subscribeNewHeads().pipe(switchMap((header) => api.derive.chain.getBlock(header.createdAtHash || header.hash))));
}

/**
 * @name subscribeNewHeads
 * @returns A header with the current header (including extracted author)
 * @description An observable of the current block header and it's author
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.chain.subscribeNewHeads((header) => {
 *   console.log(`block #${header.number} was authored by ${header.author}`);
 * });
 * ```
 */
function subscribeNewHeads(instanceId, api) {
    return memo(instanceId, () => api.rpc.chain.subscribeNewHeads().pipe(switchMap((header) => combineLatest([
        of(header),
        api.queryAt(header.hash)
    ])), switchMap(([header, queryAt]) => getAuthorDetails(header, queryAt)), map(([header, validators, author]) => {
        header.createdAtHash = header.hash;
        return createHeaderExtended(header.registry, header, validators, author);
    })));
}

var chain = /*#__PURE__*/Object.freeze({
    __proto__: null,
    _getHeaderRange: _getHeaderRange,
    bestNumber: bestNumber,
    bestNumberFinalized: bestNumberFinalized,
    bestNumberLag: bestNumberLag,
    getBlock: getBlock,
    getBlockByNumber: getBlockByNumber,
    getHeader: getHeader,
    subscribeFinalizedHeads: subscribeFinalizedHeads,
    subscribeNewBlocks: subscribeNewBlocks,
    subscribeNewHeads: subscribeNewHeads
});

function queryConstants(api) {
    return of([
        // deprecated
        api.consts.contracts.callBaseFee || api.registry.createType('Balance'),
        api.consts.contracts.contractFee || api.registry.createType('Balance'),
        api.consts.contracts.creationFee || api.registry.createType('Balance'),
        api.consts.contracts.transactionBaseFee || api.registry.createType('Balance'),
        api.consts.contracts.transactionByteFee || api.registry.createType('Balance'),
        api.consts.contracts.transferFee || api.registry.createType('Balance'),
        // current
        api.consts.contracts.rentByteFee,
        api.consts.contracts.rentDepositOffset,
        api.consts.contracts.surchargeReward,
        api.consts.contracts.tombstoneDeposit
    ]);
}
/**
 * @name fees
 * @returns An object containing the combined results of the queries for
 * all relevant contract fees as declared in the substrate chain spec.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.contracts.fees(([creationFee, transferFee]) => {
 *   console.log(`The fee for creating a new contract on this chain is ${creationFee} units. The fee required to call this contract is ${transferFee} units.`);
 * });
 * ```
 */
function fees(instanceId, api) {
    return memo(instanceId, () => {
        return queryConstants(api).pipe(map(([callBaseFee, contractFee, creationFee, transactionBaseFee, transactionByteFee, transferFee, rentByteFee, rentDepositOffset, surchargeReward, tombstoneDeposit]) => ({
            callBaseFee,
            contractFee,
            creationFee,
            rentByteFee,
            rentDepositOffset,
            surchargeReward,
            tombstoneDeposit,
            transactionBaseFee,
            transactionByteFee,
            transferFee
        })));
    });
}

var contracts = /*#__PURE__*/Object.freeze({
    __proto__: null,
    fees: fees
});

function isVoter(value) {
    return !Array.isArray(value);
}
function retrieveStakeOf(elections) {
    return elections.stakeOf.entries().pipe(map((entries) => entries.map(([{ args: [accountId] }, stake]) => [accountId, stake])));
}
function retrieveVoteOf(elections) {
    return elections.votesOf.entries().pipe(map((entries) => entries.map(([{ args: [accountId] }, votes]) => [accountId, votes])));
}
function retrievePrev(api, elections) {
    return combineLatest([
        retrieveStakeOf(elections),
        retrieveVoteOf(elections)
    ]).pipe(map(([stakes, votes]) => {
        const result = [];
        votes.forEach(([voter, votes]) => {
            result.push([voter, { stake: api.registry.createType('Balance'), votes }]);
        });
        stakes.forEach(([staker, stake]) => {
            const entry = result.find(([voter]) => voter.eq(staker));
            if (entry) {
                entry[1].stake = stake;
            }
            else {
                result.push([staker, { stake, votes: [] }]);
            }
        });
        return result;
    }));
}
function retrieveCurrent(elections) {
    return elections.voting.entries().pipe(map((entries) => entries.map(([{ args: [accountId] }, value]) => [
        accountId,
        isVoter(value)
            ? { stake: value.stake, votes: value.votes }
            : { stake: value[0], votes: value[1] }
    ])));
}
function votes(instanceId, api) {
    const elections = api.query.phragmenElection || api.query.electionsPhragmen || api.query.elections;
    return memo(instanceId, () => elections
        ? elections.stakeOf
            ? retrievePrev(api, elections)
            : retrieveCurrent(elections)
        : of([]));
}

function votesOf(instanceId, api) {
    return memo(instanceId, (accountId) => api.derive.council.votes().pipe(map((votes) => (votes.find(([from]) => from.eq(accountId)) ||
        [null, { stake: api.registry.createType('Balance'), votes: [] }])[1])));
}

const members$3 = /*#__PURE__*/ members$5('council');
const hasProposals$2 = /*#__PURE__*/ hasProposals$4('council');
const proposal$2 = /*#__PURE__*/ proposal$4('council');
const proposalCount$2 = /*#__PURE__*/ proposalCount$4('council');
const proposalHashes$2 = /*#__PURE__*/ proposalHashes$4('council');
const proposals$4 = /*#__PURE__*/ proposals$6('council');
const prime$2 = /*#__PURE__*/ prime$4('council');

var council = /*#__PURE__*/Object.freeze({
    __proto__: null,
    hasProposals: hasProposals$2,
    members: members$3,
    prime: prime$2,
    proposal: proposal$2,
    proposalCount: proposalCount$2,
    proposalHashes: proposalHashes$2,
    proposals: proposals$4,
    votes: votes,
    votesOf: votesOf
});

function createChildKey(info) {
    return u8aToHex(u8aConcat(':child_storage:default:', blake2AsU8a(u8aConcat('crowdloan', (info.fundIndex || info.trieIndex).toU8a()))));
}
function childKey(instanceId, api) {
    return memo(instanceId, (paraId) => api.query.crowdloan.funds(paraId).pipe(map((optInfo) => optInfo.isSome
        ? createChildKey(optInfo.unwrap())
        : null)));
}

function extractContributed(paraId, events) {
    const added = [];
    const removed = [];
    return events
        .filter(({ event: { data: [, eventParaId], method, section } }) => section === 'crowdloan' &&
        ['Contributed', 'Withdrew'].includes(method) &&
        eventParaId.eq(paraId))
        .reduce((result, { event: { data: [accountId], method } }) => {
        if (method === 'Contributed') {
            result.added.push(accountId.toHex());
        }
        else {
            result.removed.push(accountId.toHex());
        }
        return result;
    }, { added, blockHash: events.createdAtHash?.toHex() || '-', removed });
}

const PAGE_SIZE_K$1 = 1000; // limit aligned with the 1k on the node (trie lookups are heavy)
function _getUpdates(api, paraId) {
    let added = [];
    let removed = [];
    return api.query.system.events().pipe(switchMap((events) => {
        const changes = extractContributed(paraId, events);
        if (changes.added.length || changes.removed.length) {
            added = added.concat(...changes.added);
            removed = removed.concat(...changes.removed);
            return of({ added, addedDelta: changes.added, blockHash: events.createdAtHash?.toHex() || '-', removed, removedDelta: changes.removed });
        }
        return EMPTY;
    }), startWith({ added, addedDelta: [], blockHash: '-', removed, removedDelta: [] }));
}
function _eventTriggerAll(api, paraId) {
    return api.query.system.events().pipe(switchMap((events) => {
        const items = events.filter(({ event: { data: [eventParaId], method, section } }) => section === 'crowdloan' &&
            ['AllRefunded', 'Dissolved', 'PartiallyRefunded'].includes(method) &&
            eventParaId.eq(paraId));
        return items.length
            ? of(events.createdAtHash?.toHex() || '-')
            : EMPTY;
    }), startWith('-'));
}
function _getKeysPaged(api, childKey) {
    const subject = new BehaviorSubject(undefined);
    return subject.pipe(switchMap((startKey) => api.rpc.childstate.getKeysPaged(childKey, '0x', PAGE_SIZE_K$1, startKey)), tap((keys) => {
        nextTick(() => {
            keys.length === PAGE_SIZE_K$1
                ? subject.next(keys[PAGE_SIZE_K$1 - 1].toHex())
                : subject.complete();
        });
    }), toArray(), // toArray since we want to startSubject to be completed
    map((keyArr) => arrayFlatten(keyArr)));
}
function _getAll(api, paraId, childKey) {
    return _eventTriggerAll(api, paraId).pipe(switchMap(() => isFunction$1(api.rpc.childstate.getKeysPaged)
        ? _getKeysPaged(api, childKey)
        : api.rpc.childstate.getKeys(childKey, '0x')), map((keys) => keys.map((k) => k.toHex())));
}
function _contributions$1(api, paraId, childKey) {
    return combineLatest([
        _getAll(api, paraId, childKey),
        _getUpdates(api, paraId)
    ]).pipe(map(([keys, { added, blockHash, removed }]) => {
        const contributorsMap = {};
        keys.forEach((k) => {
            contributorsMap[k] = true;
        });
        added.forEach((k) => {
            contributorsMap[k] = true;
        });
        removed.forEach((k) => {
            delete contributorsMap[k];
        });
        return {
            blockHash,
            contributorsHex: Object.keys(contributorsMap)
        };
    }));
}
function contributions(instanceId, api) {
    return memo(instanceId, (paraId) => api.derive.crowdloan.childKey(paraId).pipe(switchMap((childKey) => childKey
        ? _contributions$1(api, paraId, childKey)
        : of({ blockHash: '-', contributorsHex: [] }))));
}

function _getValues(api, childKey, keys) {
    // We actually would love to use multi-keys https://github.com/paritytech/substrate/issues/9203
    return combineLatest(keys.map((k) => api.rpc.childstate.getStorage(childKey, k))).pipe(map((values) => values
        .map((v) => api.registry.createType('Option<StorageData>', v))
        .map((o) => o.isSome
        ? api.registry.createType('Balance', o.unwrap())
        : api.registry.createType('Balance'))
        .reduce((all, b, index) => objectSpread(all, { [keys[index]]: b }), {})));
}
function _watchOwnChanges(api, paraId, childkey, keys) {
    return api.query.system.events().pipe(switchMap((events) => {
        const changes = extractContributed(paraId, events);
        const filtered = keys.filter((k) => changes.added.includes(k) ||
            changes.removed.includes(k));
        return filtered.length
            ? _getValues(api, childkey, filtered)
            : EMPTY;
    }), startWith({}));
}
function _contributions(api, paraId, childKey, keys) {
    return combineLatest([
        _getValues(api, childKey, keys),
        _watchOwnChanges(api, paraId, childKey, keys)
    ]).pipe(map(([all, latest]) => objectSpread({}, all, latest)));
}
function ownContributions(instanceId, api) {
    return memo(instanceId, (paraId, keys) => api.derive.crowdloan.childKey(paraId).pipe(switchMap((childKey) => childKey && keys.length
        ? _contributions(api, paraId, childKey, keys)
        : of({}))));
}

var crowdloan = /*#__PURE__*/Object.freeze({
    __proto__: null,
    childKey: childKey,
    contributions: contributions,
    ownContributions: ownContributions
});

function isOldInfo(info) {
    return !!info.proposalHash;
}
function isCurrentStatus(status) {
    return !!status.tally;
}
function compareRationals(n1, d1, n2, d2) {
    while (true) {
        const q1 = n1.div(d1);
        const q2 = n2.div(d2);
        if (q1.lt(q2)) {
            return true;
        }
        else if (q2.lt(q1)) {
            return false;
        }
        const r1 = n1.mod(d1);
        const r2 = n2.mod(d2);
        if (r2.isZero()) {
            return false;
        }
        else if (r1.isZero()) {
            return true;
        }
        n1 = d2;
        n2 = d1;
        d1 = r2;
        d2 = r1;
    }
}
function calcPassingOther(threshold, sqrtElectorate, { votedAye, votedNay, votedTotal }) {
    const sqrtVoters = bnSqrt(votedTotal);
    return sqrtVoters.isZero()
        ? false
        : threshold.isSuperMajorityApprove
            ? compareRationals(votedNay, sqrtVoters, votedAye, sqrtElectorate)
            : compareRationals(votedNay, sqrtElectorate, votedAye, sqrtVoters);
}
function calcPassing(threshold, sqrtElectorate, state) {
    return threshold.isSimpleMajority
        ? state.votedAye.gt(state.votedNay)
        : calcPassingOther(threshold, sqrtElectorate, state);
}
function calcVotesPrev(votesFor) {
    return votesFor.reduce((state, derived) => {
        const { balance, vote } = derived;
        const isDefault = vote.conviction.index === 0;
        const counted = balance
            .muln(isDefault ? 1 : vote.conviction.index)
            .divn(isDefault ? 10 : 1);
        if (vote.isAye) {
            state.allAye.push(derived);
            state.voteCountAye++;
            state.votedAye.iadd(counted);
        }
        else {
            state.allNay.push(derived);
            state.voteCountNay++;
            state.votedNay.iadd(counted);
        }
        state.voteCount++;
        state.votedTotal.iadd(counted);
        return state;
    }, { allAye: [], allNay: [], voteCount: 0, voteCountAye: 0, voteCountNay: 0, votedAye: new BN(0), votedNay: new BN(0), votedTotal: new BN(0) });
}
function calcVotesCurrent(tally, votes) {
    const allAye = [];
    const allNay = [];
    votes.forEach((derived) => {
        if (derived.vote.isAye) {
            allAye.push(derived);
        }
        else {
            allNay.push(derived);
        }
    });
    return {
        allAye,
        allNay,
        voteCount: allAye.length + allNay.length,
        voteCountAye: allAye.length,
        voteCountNay: allNay.length,
        votedAye: tally.ayes,
        votedNay: tally.nays,
        votedTotal: tally.turnout
    };
}
function calcVotes(sqrtElectorate, referendum, votes) {
    const state = isCurrentStatus(referendum.status)
        ? calcVotesCurrent(referendum.status.tally, votes)
        : calcVotesPrev(votes);
    return objectSpread({}, state, {
        isPassing: calcPassing(referendum.status.threshold, sqrtElectorate, state),
        votes
    });
}
function getStatus(info) {
    if (info.isNone) {
        return null;
    }
    const unwrapped = info.unwrap();
    return isOldInfo(unwrapped)
        ? unwrapped
        : unwrapped.isOngoing
            ? unwrapped.asOngoing
            // done, we don't include it here... only currently active
            : null;
}
function getImageHashBounded(hash) {
    return hash.isLegacy
        ? hash.asLegacy.hash_.toHex()
        : hash.isLookup
            ? hash.asLookup.hash_.toHex()
            // for inline, use the actual Bytes hash
            : hash.isInline
                ? hash.asInline.hash.toHex()
                : isString(hash)
                    ? isHex(hash)
                        ? hash
                        : stringToHex(hash)
                    : isU8a(hash)
                        ? u8aToHex(hash)
                        : hash.toHex();
}
function getImageHash(status) {
    return getImageHashBounded(status.proposal ||
        status.proposalHash);
}

const DEMOCRACY_ID = stringToHex('democrac');
function isMaybeHashedOrBounded(call) {
    // check for enum
    return call instanceof Enum;
}
function isBounded(call) {
    // check for type
    return call.isInline || call.isLegacy || call.isLookup;
}
function queryQueue(api) {
    return api.query.democracy.dispatchQueue().pipe(switchMap((dispatches) => combineLatest([
        of(dispatches),
        api.derive.democracy.preimages(dispatches.map(([, hash]) => hash))
    ])), map(([dispatches, images]) => dispatches.map(([at, imageHash, index], dispatchIndex) => ({
        at,
        image: images[dispatchIndex],
        imageHash: getImageHashBounded(imageHash),
        index
    }))));
}
function schedulerEntries(api) {
    // We don't get entries, but rather we get the keys (triggered via finished referendums) and
    // the subscribe to those keys - this means we pickup when the schedulers actually executes
    // at a block, the entry for that block will become empty
    return api.derive.democracy.referendumsFinished().pipe(switchMap(() => api.query.scheduler.agenda.keys()), switchMap((keys) => {
        const blockNumbers = keys.map(({ args: [blockNumber] }) => blockNumber);
        return blockNumbers.length
            ? combineLatest([
                of(blockNumbers),
                // this should simply be api.query.scheduler.agenda.multi,
                // however we have had cases on Darwinia where the indices have moved around after an
                // upgrade, which results in invalid on-chain data
                api.query.scheduler.agenda.multi(blockNumbers).pipe(catchError(() => of(blockNumbers.map(() => []))))
            ])
            : of([[], []]);
    }));
}
function queryScheduler(api) {
    return schedulerEntries(api).pipe(switchMap(([blockNumbers, agendas]) => {
        const result = [];
        blockNumbers.forEach((at, index) => {
            (agendas[index] || []).filter((o) => o.isSome).forEach((o) => {
                const scheduled = o.unwrap();
                if (scheduled.maybeId.isSome) {
                    const id = scheduled.maybeId.unwrap().toHex();
                    if (id.startsWith(DEMOCRACY_ID)) {
                        const imageHash = isMaybeHashedOrBounded(scheduled.call)
                            ? isBounded(scheduled.call)
                                ? getImageHashBounded(scheduled.call)
                                : scheduled.call.isHash
                                    ? scheduled.call.asHash.toHex()
                                    : scheduled.call.asValue.args[0].toHex()
                            : scheduled.call.args[0].toHex();
                        result.push({ at, imageHash, index: api.registry.createType('(u64, ReferendumIndex)', id)[1] });
                    }
                }
            });
        });
        return combineLatest([
            of(result),
            result.length
                ? api.derive.democracy.preimages(result.map(({ imageHash }) => imageHash))
                : of([])
        ]);
    }), map(([infos, images]) => infos.map((info, index) => objectSpread({ image: images[index] }, info))));
}
function dispatchQueue(instanceId, api) {
    return memo(instanceId, () => isFunction$1(api.query.scheduler?.agenda)
        ? queryScheduler(api)
        : api.query.democracy.dispatchQueue
            ? queryQueue(api)
            : of([]));
}

const LOCKUPS = [0, 1, 2, 4, 8, 16, 32];
function parseEnd(api, vote, { approved, end }) {
    return [
        end,
        (approved.isTrue && vote.isAye) || (approved.isFalse && vote.isNay)
            ? end.add((api.consts.democracy.voteLockingPeriod ||
                api.consts.democracy.enactmentPeriod).muln(LOCKUPS[vote.conviction.index]))
            : BN_ZERO
    ];
}
function parseLock(api, [referendumId, accountVote], referendum) {
    const { balance, vote } = accountVote.asStandard;
    const [referendumEnd, unlockAt] = referendum.isFinished
        ? parseEnd(api, vote, referendum.asFinished)
        : [BN_ZERO, BN_ZERO];
    return { balance, isDelegated: false, isFinished: referendum.isFinished, referendumEnd, referendumId, unlockAt, vote };
}
function delegateLocks(api, { balance, conviction, target }) {
    return api.derive.democracy.locks(target).pipe(map((available) => available.map(({ isFinished, referendumEnd, referendumId, unlockAt, vote }) => ({
        balance,
        isDelegated: true,
        isFinished,
        referendumEnd,
        referendumId,
        unlockAt: unlockAt.isZero()
            ? unlockAt
            : referendumEnd.add((api.consts.democracy.voteLockingPeriod ||
                api.consts.democracy.enactmentPeriod).muln(LOCKUPS[conviction.index])),
        vote: api.registry.createType('Vote', { aye: vote.isAye, conviction })
    }))));
}
function directLocks(api, { votes }) {
    if (!votes.length) {
        return of([]);
    }
    return api.query.democracy.referendumInfoOf.multi(votes.map(([referendumId]) => referendumId)).pipe(map((referendums) => votes
        .map((vote, index) => [vote, referendums[index].unwrapOr(null)])
        .filter((item) => !!item[1] && isUndefined(item[1].end) && item[0][1].isStandard)
        .map(([directVote, referendum]) => parseLock(api, directVote, referendum))));
}
function locks(instanceId, api) {
    return memo(instanceId, (accountId) => api.query.democracy.votingOf
        ? api.query.democracy.votingOf(accountId).pipe(switchMap((voting) => voting.isDirect
            ? directLocks(api, voting.asDirect)
            : voting.isDelegating
                ? delegateLocks(api, voting.asDelegating)
                : of([])))
        : of([]));
}

function withImage(api, nextOpt) {
    if (nextOpt.isNone) {
        return of(null);
    }
    const [hash, threshold] = nextOpt.unwrap();
    return api.derive.democracy.preimage(hash).pipe(map((image) => ({
        image,
        imageHash: getImageHashBounded(hash),
        threshold
    })));
}
function nextExternal(instanceId, api) {
    return memo(instanceId, () => api.query.democracy?.nextExternal
        ? api.query.democracy.nextExternal().pipe(switchMap((nextOpt) => withImage(api, nextOpt)))
        : of(null));
}

function isDemocracyPreimage(api, imageOpt) {
    return !!imageOpt && !api.query.democracy.dispatchQueue;
}
function constructProposal(api, [bytes, proposer, balance, at]) {
    let proposal;
    try {
        proposal = api.registry.createType('Call', bytes.toU8a(true));
    }
    catch (error) {
        console.error(error);
    }
    return { at, balance, proposal, proposer };
}
function parseDemocracy(api, imageOpt) {
    if (imageOpt.isNone) {
        return;
    }
    if (isDemocracyPreimage(api, imageOpt)) {
        const status = imageOpt.unwrap();
        if (status.isMissing) {
            return;
        }
        const { data, deposit, provider, since } = status.asAvailable;
        return constructProposal(api, [data, provider, deposit, since]);
    }
    return constructProposal(api, imageOpt.unwrap());
}
function parseImage(api, [proposalHash, status, bytes]) {
    if (!status) {
        return undefined;
    }
    const [proposer, balance] = status.isUnrequested
        ? status.asUnrequested.deposit
        : status.asRequested.deposit.unwrapOrDefault();
    let proposal;
    if (bytes) {
        try {
            proposal = api.registry.createType('Call', bytes.toU8a(true));
        }
        catch (error) {
            console.error(error);
        }
    }
    return { at: BN_ZERO, balance, proposal, proposalHash, proposer };
}
function getDemocracyImages(api, bounded) {
    const hashes = bounded.map((b) => getImageHashBounded(b));
    return api.query.democracy.preimages.multi(hashes).pipe(map((images) => images.map((imageOpt) => parseDemocracy(api, imageOpt))));
}
function getImages(api, bounded) {
    const hashes = bounded.map((b) => getImageHashBounded(b));
    const bytesType = api.registry.lookup.getTypeDef(api.query.preimage.preimageFor.creator.meta.type.asMap.key).type;
    return api.query.preimage.statusFor.multi(hashes).pipe(switchMap((optStatus) => {
        const statuses = optStatus.map((o) => o.unwrapOr(null));
        const keys = statuses
            .map((s, i) => s
            ? bytesType === 'H256'
                // first generation
                ? hashes[i]
                // current generation (H256,u32)
                : s.isRequested
                    ? [hashes[i], s.asRequested.len.unwrapOr(0)]
                    : [hashes[i], s.asUnrequested.len]
            : null)
            .filter((p) => !!p);
        return api.query.preimage.preimageFor.multi(keys).pipe(map((optBytes) => {
            let ptr = -1;
            return statuses
                .map((s, i) => s
                ? [hashes[i], s, optBytes[++ptr].unwrapOr(null)]
                : [hashes[i], null, null])
                .map((v) => parseImage(api, v));
        }));
    }));
}
function preimages(instanceId, api) {
    return memo(instanceId, (hashes) => hashes.length
        ? isFunction$1(api.query.democracy.preimages)
            ? getDemocracyImages(api, hashes)
            : isFunction$1(api.query.preimage.preimageFor)
                ? getImages(api, hashes)
                : of([])
        : of([]));
}
const preimage = /*#__PURE__*/ firstMemo((api, hash) => api.derive.democracy.preimages([hash]));

function isNewDepositors(depositors) {
    // Detect balance...
    // eslint-disable-next-line @typescript-eslint/unbound-method
    return isFunction$1(depositors[1].mul);
}
function parse$3([proposals, images, optDepositors]) {
    return proposals
        .filter(([, , proposer], index) => !!(optDepositors[index]?.isSome) && !proposer.isEmpty)
        .map(([index, hash, proposer], proposalIndex) => {
        const depositors = optDepositors[proposalIndex].unwrap();
        return objectSpread({
            image: images[proposalIndex],
            imageHash: getImageHashBounded(hash),
            index,
            proposer
        }, isNewDepositors(depositors)
            ? { balance: depositors[1], seconds: depositors[0] }
            : { balance: depositors[0], seconds: depositors[1] });
    });
}
function proposals$3(instanceId, api) {
    return memo(instanceId, () => isFunction$1(api.query.democracy?.publicProps)
        ? api.query.democracy.publicProps().pipe(switchMap((proposals) => proposals.length
            ? combineLatest([
                of(proposals),
                api.derive.democracy.preimages(proposals.map(([, hash]) => hash)),
                api.query.democracy.depositOf.multi(proposals.map(([index]) => index))
            ])
            : of([[], [], []])), map(parse$3))
        : of([]));
}

function referendumIds(instanceId, api) {
    return memo(instanceId, () => api.query.democracy?.lowestUnbaked
        ? api.queryMulti([
            api.query.democracy.lowestUnbaked,
            api.query.democracy.referendumCount
        ]).pipe(map(([first, total]) => total.gt(first)
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            ? [...Array(total.sub(first).toNumber())].map((_, i) => first.addn(i))
            : []))
        : of([]));
}

function referendums(instanceId, api) {
    return memo(instanceId, () => api.derive.democracy.referendumsActive().pipe(switchMap((referendums) => referendums.length
        ? combineLatest([
            of(referendums),
            api.derive.democracy._referendumsVotes(referendums)
        ])
        : of([[], []])), map(([referendums, votes]) => referendums.map((referendum, index) => objectSpread({}, referendum, votes[index])))));
}

function referendumsActive(instanceId, api) {
    return memo(instanceId, () => api.derive.democracy.referendumIds().pipe(switchMap((ids) => ids.length
        ? api.derive.democracy.referendumsInfo(ids)
        : of([]))));
}

function referendumsFinished(instanceId, api) {
    return memo(instanceId, () => api.derive.democracy.referendumIds().pipe(switchMap((ids) => api.query.democracy.referendumInfoOf.multi(ids)), map((infos) => infos
        .map((o) => o.unwrapOr(null))
        .filter((info) => !!info && info.isFinished)
        .map((info) => info.asFinished))));
}

function votesPrev(api, referendumId) {
    return api.query.democracy.votersFor(referendumId).pipe(switchMap((votersFor) => combineLatest([
        of(votersFor),
        votersFor.length
            ? api.query.democracy.voteOf.multi(votersFor.map((accountId) => [referendumId, accountId]))
            : of([]),
        api.derive.balances.votingBalances(votersFor)
    ])), map(([votersFor, votes, balances]) => votersFor.map((accountId, index) => ({
        accountId,
        balance: balances[index].votingBalance || api.registry.createType('Balance'),
        isDelegating: false,
        vote: votes[index] || api.registry.createType('Vote')
    }))));
}
function extractVotes(mapped, referendumId) {
    return mapped
        .filter(([, voting]) => voting.isDirect)
        .map(([accountId, voting]) => [
        accountId,
        voting.asDirect.votes.filter(([idx]) => idx.eq(referendumId))
    ])
        .filter(([, directVotes]) => !!directVotes.length)
        .reduce((result, [accountId, votes]) => 
    // FIXME We are ignoring split votes
    votes.reduce((result, [, vote]) => {
        if (vote.isStandard) {
            result.push(objectSpread({
                accountId,
                isDelegating: false
            }, vote.asStandard));
        }
        return result;
    }, result), []);
}
function votesCurr(api, referendumId) {
    return api.query.democracy.votingOf.entries().pipe(map((allVoting) => {
        const mapped = allVoting.map(([{ args: [accountId] }, voting]) => [accountId, voting]);
        const votes = extractVotes(mapped, referendumId);
        const delegations = mapped
            .filter(([, voting]) => voting.isDelegating)
            .map(([accountId, voting]) => [accountId, voting.asDelegating]);
        // add delegations
        delegations.forEach(([accountId, { balance, conviction, target }]) => {
            // Are we delegating to a delegator
            const toDelegator = delegations.find(([accountId]) => accountId.eq(target));
            const to = votes.find(({ accountId }) => accountId.eq(toDelegator ? toDelegator[0] : target));
            // this delegation has a target
            if (to) {
                votes.push({
                    accountId,
                    balance,
                    isDelegating: true,
                    vote: api.registry.createType('Vote', { aye: to.vote.isAye, conviction })
                });
            }
        });
        return votes;
    }));
}
function _referendumVotes(instanceId, api) {
    return memo(instanceId, (referendum) => combineLatest([
        api.derive.democracy.sqrtElectorate(),
        isFunction$1(api.query.democracy.votingOf)
            ? votesCurr(api, referendum.index)
            : votesPrev(api, referendum.index)
    ]).pipe(map(([sqrtElectorate, votes]) => calcVotes(sqrtElectorate, referendum, votes))));
}
function _referendumsVotes(instanceId, api) {
    return memo(instanceId, (referendums) => referendums.length
        ? combineLatest(referendums.map((referendum) => api.derive.democracy._referendumVotes(referendum)))
        : of([]));
}
function _referendumInfo(instanceId, api) {
    return memo(instanceId, (index, info) => {
        const status = getStatus(info);
        return status
            ? api.derive.democracy.preimage(status.proposal ||
                status.proposalHash).pipe(map((image) => ({
                image,
                imageHash: getImageHash(status),
                index: api.registry.createType('ReferendumIndex', index),
                status
            })))
            : of(null);
    });
}
function referendumsInfo(instanceId, api) {
    return memo(instanceId, (ids) => ids.length
        ? api.query.democracy.referendumInfoOf.multi(ids).pipe(switchMap((infos) => combineLatest(ids.map((id, index) => api.derive.democracy._referendumInfo(id, infos[index])))), map((infos) => infos.filter((r) => !!r)))
        : of([]));
}

function sqrtElectorate(instanceId, api) {
    return memo(instanceId, () => api.query.balances.totalIssuance().pipe(map(bnSqrt)));
}

var democracy = /*#__PURE__*/Object.freeze({
    __proto__: null,
    _referendumInfo: _referendumInfo,
    _referendumVotes: _referendumVotes,
    _referendumsVotes: _referendumsVotes,
    dispatchQueue: dispatchQueue,
    locks: locks,
    nextExternal: nextExternal,
    preimage: preimage,
    preimages: preimages,
    proposals: proposals$3,
    referendumIds: referendumIds,
    referendums: referendums,
    referendumsActive: referendumsActive,
    referendumsFinished: referendumsFinished,
    referendumsInfo: referendumsInfo,
    sqrtElectorate: sqrtElectorate
});

function isSeatHolder(value) {
    return !Array.isArray(value);
}
function isCandidateTuple(value) {
    return Array.isArray(value);
}
function getAccountTuple(value) {
    return isSeatHolder(value)
        ? [value.who, value.stake]
        : value;
}
function getCandidate(value) {
    return isCandidateTuple(value)
        ? value[0]
        : value;
}
function sortAccounts([, balanceA], [, balanceB]) {
    return balanceB.cmp(balanceA);
}
function getConstants(api, elections) {
    return elections
        ? {
            candidacyBond: api.consts[elections].candidacyBond,
            desiredRunnersUp: api.consts[elections].desiredRunnersUp,
            desiredSeats: api.consts[elections].desiredMembers,
            termDuration: api.consts[elections].termDuration,
            votingBond: api.consts[elections].votingBond
        }
        : {};
}
function getModules(api) {
    const [council] = api.registry.getModuleInstances(api.runtimeVersion.specName, 'council') || ['council'];
    const elections = api.query.phragmenElection
        ? 'phragmenElection'
        : api.query.electionsPhragmen
            ? 'electionsPhragmen'
            : api.query.elections
                ? 'elections'
                : null;
    return [council, elections];
}
function queryAll(api, council, elections) {
    return api.queryMulti([
        api.query[council].members,
        api.query[elections].candidates,
        api.query[elections].members,
        api.query[elections].runnersUp
    ]);
}
function queryCouncil(api, council) {
    return combineLatest([
        api.query[council].members(),
        of([]),
        of([]),
        of([])
    ]);
}
/**
 * @name info
 * @returns An object containing the combined results of the storage queries for
 * all relevant election module properties.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.elections.info(({ members, candidates }) => {
 *   console.log(`There are currently ${members.length} council members and ${candidates.length} prospective council candidates.`);
 * });
 * ```
 */
function info$3(instanceId, api) {
    return memo(instanceId, () => {
        const [council, elections] = getModules(api);
        return (elections
            ? queryAll(api, council, elections)
            : queryCouncil(api, council)).pipe(map(([councilMembers, candidates, members, runnersUp]) => objectSpread({}, getConstants(api, elections), {
            candidateCount: api.registry.createType('u32', candidates.length),
            candidates: candidates.map(getCandidate),
            members: members.length
                ? members.map(getAccountTuple).sort(sortAccounts)
                : councilMembers.map((a) => [a, api.registry.createType('Balance')]),
            runnersUp: runnersUp.map(getAccountTuple).sort(sortAccounts)
        })));
    });
}

var elections = /*#__PURE__*/Object.freeze({
    __proto__: null,
    info: info$3
});

function mapResult([result, validators, heartbeats, numBlocks]) {
    validators.forEach((validator, index) => {
        const validatorId = validator.toString();
        const blockCount = numBlocks[index];
        const hasMessage = !heartbeats[index].isEmpty;
        const prev = result[validatorId];
        if (!prev || prev.hasMessage !== hasMessage || !prev.blockCount.eq(blockCount)) {
            result[validatorId] = {
                blockCount,
                hasMessage,
                isOnline: hasMessage || blockCount.gt(BN_ZERO)
            };
        }
    });
    return result;
}
/**
 * @description Return a boolean array indicating whether the passed accounts had received heartbeats in the current session
 */
function receivedHeartbeats(instanceId, api) {
    return memo(instanceId, () => api.query.imOnline?.receivedHeartbeats
        ? api.derive.staking.overview().pipe(switchMap(({ currentIndex, validators }) => combineLatest([
            of({}),
            of(validators),
            api.query.imOnline.receivedHeartbeats.multi(validators.map((_address, index) => [currentIndex, index])),
            api.query.imOnline.authoredBlocks.multi(validators.map((address) => [currentIndex, address]))
        ])), map(mapResult))
        : of({}));
}

var imOnline = /*#__PURE__*/Object.freeze({
    __proto__: null,
    receivedHeartbeats: receivedHeartbeats
});

const members$2 = /*#__PURE__*/ members$5('membership');
const hasProposals$1 = /*#__PURE__*/ hasProposals$4('membership');
const proposal$1 = /*#__PURE__*/ proposal$4('membership');
const proposalCount$1 = /*#__PURE__*/ proposalCount$4('membership');
const proposalHashes$1 = /*#__PURE__*/ proposalHashes$4('membership');
const proposals$2 = /*#__PURE__*/ proposals$6('membership');
const prime$1 = /*#__PURE__*/ prime$4('membership');

var membership = /*#__PURE__*/Object.freeze({
    __proto__: null,
    hasProposals: hasProposals$1,
    members: members$2,
    prime: prime$1,
    proposal: proposal$1,
    proposalCount: proposalCount$1,
    proposalHashes: proposalHashes$1,
    proposals: proposals$2
});

function didUpdateToBool(didUpdate, id) {
    return didUpdate.isSome
        ? didUpdate.unwrap().some((paraId) => paraId.eq(id))
        : false;
}

function parseActive(id, active) {
    const found = active.find(([paraId]) => paraId === id);
    if (found && found[1].isSome) {
        const [collatorId, retriable] = found[1].unwrap();
        return objectSpread({ collatorId }, retriable.isWithRetries
            ? {
                isRetriable: true,
                retries: retriable.asWithRetries.toNumber()
            }
            : {
                isRetriable: false,
                retries: 0
            });
    }
    return null;
}
function parseCollators(id, collatorQueue) {
    return collatorQueue.map((queue) => {
        const found = queue.find(([paraId]) => paraId === id);
        return found ? found[1] : null;
    });
}
function parse$2(id, [active, retryQueue, selectedThreads, didUpdate, info, pendingSwap, heads, relayDispatchQueue]) {
    if (info.isNone) {
        return null;
    }
    return {
        active: parseActive(id, active),
        didUpdate: didUpdateToBool(didUpdate, id),
        heads,
        id,
        info: objectSpread({ id }, info.unwrap()),
        pendingSwapId: pendingSwap.unwrapOr(null),
        relayDispatchQueue,
        retryCollators: parseCollators(id, retryQueue),
        selectedCollators: parseCollators(id, selectedThreads)
    };
}
function info$2(instanceId, api) {
    return memo(instanceId, (id) => api.query.registrar && api.query.parachains
        ? api.queryMulti([
            api.query.registrar.active,
            api.query.registrar.retryQueue,
            api.query.registrar.selectedThreads,
            api.query.parachains.didUpdate,
            [api.query.registrar.paras, id],
            [api.query.registrar.pendingSwap, id],
            [api.query.parachains.heads, id],
            [api.query.parachains.relayDispatchQueue, id]
        ])
            .pipe(map((result) => parse$2(api.registry.createType('ParaId', id), result)))
        : of(null));
}

function parse$1([ids, didUpdate, infos, pendingSwaps, relayDispatchQueueSizes]) {
    return ids.map((id, index) => ({
        didUpdate: didUpdateToBool(didUpdate, id),
        id,
        info: objectSpread({ id }, infos[index].unwrapOr(null)),
        pendingSwapId: pendingSwaps[index].unwrapOr(null),
        relayDispatchQueueSize: relayDispatchQueueSizes[index][0].toNumber()
    }));
}
function overview$1(instanceId, api) {
    return memo(instanceId, () => api.query.registrar?.parachains && api.query.parachains
        ? api.query.registrar.parachains().pipe(switchMap((paraIds) => combineLatest([
            of(paraIds),
            api.query.parachains.didUpdate(),
            api.query.registrar.paras.multi(paraIds),
            api.query.registrar.pendingSwap.multi(paraIds),
            api.query.parachains.relayDispatchQueueSize.multi(paraIds)
        ])), map(parse$1))
        : of([]));
}

var parachains = /*#__PURE__*/Object.freeze({
    __proto__: null,
    info: info$2,
    overview: overview$1
});

function parse([currentIndex, activeEra, activeEraStart, currentEra, validatorCount]) {
    return {
        activeEra,
        activeEraStart,
        currentEra,
        currentIndex,
        validatorCount
    };
}
function queryStaking(api) {
    return api.queryMulti([
        api.query.session.currentIndex,
        api.query.staking.activeEra,
        api.query.staking.currentEra,
        api.query.staking.validatorCount
    ]).pipe(map(([currentIndex, activeOpt, currentEra, validatorCount]) => {
        const { index, start } = activeOpt.unwrapOrDefault();
        return parse([
            currentIndex,
            index,
            start,
            currentEra.unwrapOrDefault(),
            validatorCount
        ]);
    }));
}
function querySession(api) {
    return api.query.session.currentIndex().pipe(map((currentIndex) => parse([
        currentIndex,
        api.registry.createType('EraIndex'),
        api.registry.createType('Option<Moment>'),
        api.registry.createType('EraIndex'),
        api.registry.createType('u32')
    ])));
}
function empty(api) {
    return of(parse([
        api.registry.createType('SessionIndex', 1),
        api.registry.createType('EraIndex'),
        api.registry.createType('Option<Moment>'),
        api.registry.createType('EraIndex'),
        api.registry.createType('u32')
    ]));
}
function indexes(instanceId, api) {
    return memo(instanceId, () => api.query.session
        ? api.query.staking
            ? queryStaking(api)
            : querySession(api)
        : empty(api));
}

/**
 * @description Retrieves all the session and era query and calculates specific values on it as the length of the session and eras
 */
function info$1(instanceId, api) {
    return memo(instanceId, () => api.derive.session.indexes().pipe(map((indexes) => {
        const sessionLength = api.consts?.babe?.epochDuration || api.registry.createType('u64', 1);
        const sessionsPerEra = api.consts?.staking?.sessionsPerEra || api.registry.createType('SessionIndex', 1);
        return objectSpread({
            eraLength: api.registry.createType('BlockNumber', sessionsPerEra.mul(sessionLength)),
            isEpoch: !!api.query.babe,
            sessionLength,
            sessionsPerEra
        }, indexes);
    })));
}

function withProgressField(field) {
    return (instanceId, api) => memo(instanceId, () => api.derive.session.progress().pipe(map((info) => info[field])));
}
function createDerive(api, info, [currentSlot, epochIndex, epochOrGenesisStartSlot, activeEraStartSessionIndex]) {
    const epochStartSlot = epochIndex.mul(info.sessionLength).iadd(epochOrGenesisStartSlot);
    const sessionProgress = currentSlot.sub(epochStartSlot);
    const eraProgress = info.currentIndex.sub(activeEraStartSessionIndex).imul(info.sessionLength).iadd(sessionProgress);
    return objectSpread({
        eraProgress: api.registry.createType('BlockNumber', eraProgress),
        sessionProgress: api.registry.createType('BlockNumber', sessionProgress)
    }, info);
}
function queryAura(api) {
    return api.derive.session.info().pipe(map((info) => objectSpread({
        eraProgress: api.registry.createType('BlockNumber'),
        sessionProgress: api.registry.createType('BlockNumber')
    }, info)));
}
function queryBabe(api) {
    return api.derive.session.info().pipe(switchMap((info) => combineLatest([
        of(info),
        // we may have no staking, but have babe (permissioned)
        api.query.staking?.erasStartSessionIndex
            ? api.queryMulti([
                api.query.babe.currentSlot,
                api.query.babe.epochIndex,
                api.query.babe.genesisSlot,
                [api.query.staking.erasStartSessionIndex, info.activeEra]
            ])
            : api.queryMulti([
                api.query.babe.currentSlot,
                api.query.babe.epochIndex,
                api.query.babe.genesisSlot
            ])
    ])), map(([info, [currentSlot, epochIndex, genesisSlot, optStartIndex]]) => [
        info, [currentSlot, epochIndex, genesisSlot, optStartIndex && optStartIndex.isSome ? optStartIndex.unwrap() : api.registry.createType('SessionIndex', 1)]
    ]));
}
/**
 * @description Retrieves all the session and era query and calculates specific values on it as the length of the session and eras
 */
function progress(instanceId, api) {
    return memo(instanceId, () => api.query.babe
        ? queryBabe(api).pipe(map(([info, slots]) => createDerive(api, info, slots)))
        : queryAura(api));
}
const eraLength = /*#__PURE__*/ withProgressField('eraLength');
const eraProgress = /*#__PURE__*/ withProgressField('eraProgress');
const sessionProgress = /*#__PURE__*/ withProgressField('sessionProgress');

var session = /*#__PURE__*/Object.freeze({
    __proto__: null,
    eraLength: eraLength,
    eraProgress: eraProgress,
    indexes: indexes,
    info: info$1,
    progress: progress,
    sessionProgress: sessionProgress
});

/**
 * @description Get the candidate info for a society
 */
function candidates(instanceId, api) {
    return memo(instanceId, () => api.query.society.candidates().pipe(switchMap((candidates) => combineLatest([
        of(candidates),
        api.query.society.suspendedCandidates.multi(candidates.map(({ who }) => who))
    ])), map(([candidates, suspended]) => candidates.map(({ kind, value, who }, index) => ({
        accountId: who,
        isSuspended: suspended[index].isSome,
        kind,
        value
    })))));
}

/**
 * @description Get the overall info for a society
 */
function info(instanceId, api) {
    return memo(instanceId, () => api.queryMulti([
        api.query.society.bids,
        api.query.society.defender,
        api.query.society.founder,
        api.query.society.head,
        api.query.society.maxMembers,
        api.query.society.pot
    ]).pipe(map(([bids, defender, founder, head, maxMembers, pot]) => ({
        bids,
        defender: defender.unwrapOr(undefined),
        founder: founder.unwrapOr(undefined),
        hasDefender: (defender.isSome && head.isSome && !head.eq(defender)) || false,
        head: head.unwrapOr(undefined),
        maxMembers,
        pot
    }))));
}

/**
 * @description Get the member info for a society
 */
function member(instanceId, api) {
    return memo(instanceId, (accountId) => api.derive.society._members([accountId]).pipe(map(([result]) => result)));
}

function _members(instanceId, api) {
    return memo(instanceId, (accountIds) => combineLatest([
        of(accountIds),
        api.query.society.payouts.multi(accountIds),
        api.query.society.strikes.multi(accountIds),
        api.query.society.defenderVotes.multi(accountIds),
        api.query.society.suspendedMembers.multi(accountIds),
        api.query.society.vouching.multi(accountIds)
    ]).pipe(map(([accountIds, payouts, strikes, defenderVotes, suspended, vouching]) => accountIds.map((accountId, index) => ({
        accountId,
        isDefenderVoter: defenderVotes[index].isSome,
        isSuspended: suspended[index].isTrue,
        payouts: payouts[index],
        strikes: strikes[index],
        vote: defenderVotes[index].unwrapOr(undefined),
        vouching: vouching[index].unwrapOr(undefined)
    })))));
}
/**
 * @description Get the member info for a society
 */
function members$1(instanceId, api) {
    return memo(instanceId, () => api.query.society.members().pipe(switchMap((members) => api.derive.society._members(members))));
}

var society = /*#__PURE__*/Object.freeze({
    __proto__: null,
    _members: _members,
    candidates: candidates,
    info: info,
    member: member,
    members: members$1
});

const QUERY_OPTS = {
    withDestination: true,
    withLedger: true,
    withNominations: true,
    withPrefs: true
};
function groupByEra(list) {
    return list.reduce((map, { era, value }) => {
        const key = era.toString();
        map[key] = (map[key] || BN_ZERO).add(value.unwrap());
        return map;
    }, {});
}
function calculateUnlocking(api, stakingLedger, sessionInfo) {
    const results = Object
        .entries(groupByEra((stakingLedger?.unlocking || []).filter(({ era }) => era.unwrap().gt(sessionInfo.activeEra))))
        .map(([eraString, value]) => ({
        remainingEras: new BN(eraString).isub(sessionInfo.activeEra),
        value: api.registry.createType('Balance', value)
    }));
    return results.length
        ? results
        : undefined;
}
function redeemableSum(api, stakingLedger, sessionInfo) {
    return api.registry.createType('Balance', (stakingLedger?.unlocking || []).reduce((total, { era, value }) => {
        // aligns with https://github.com/paritytech/substrate/blob/fdfdc73f9e64dc47934b72eb9af3e1989e4ba699/frame/staking/src/pallet/mod.rs#L973-L975
        // (ensure currentEra >= era passed, as per https://github.com/paritytech/substrate/blob/fdfdc73f9e64dc47934b72eb9af3e1989e4ba699/frame/staking/src/lib.rs#L477-L494)
        // NOTE: Previously we used activeEra >= era, which is incorrect for the last session
        return era.unwrap().gt(sessionInfo.currentEra)
            ? total
            : total.iadd(value.unwrap());
    }, new BN(0)));
}
function parseResult$1(api, sessionInfo, keys, query) {
    return objectSpread({}, keys, query, {
        redeemable: redeemableSum(api, query.stakingLedger, sessionInfo),
        unlocking: calculateUnlocking(api, query.stakingLedger, sessionInfo)
    });
}
/**
 * @description From a list of stashes, fill in all the relevant staking details
 */
function accounts(instanceId, api) {
    return memo(instanceId, (accountIds, opts = QUERY_OPTS) => api.derive.session.info().pipe(switchMap((sessionInfo) => combineLatest([
        api.derive.staking.keysMulti(accountIds),
        api.derive.staking.queryMulti(accountIds, opts)
    ]).pipe(map(([keys, queries]) => queries.map((q, index) => parseResult$1(api, sessionInfo, keys[index], q)))))));
}
/**
 * @description From a stash, retrieve the controllerId and fill in all the relevant staking details
 */
const account = /*#__PURE__*/ firstMemo((api, accountId, opts) => api.derive.staking.accounts([accountId], opts));

/**
 * @description Retrieve the staking overview, including elected and points earned
 */
function currentPoints(instanceId, api) {
    return memo(instanceId, () => api.derive.session.indexes().pipe(switchMap(({ activeEra }) => api.query.staking.erasRewardPoints(activeEra))));
}

function getEraCache(CACHE_KEY, era, withActive) {
    const cacheKey = `${CACHE_KEY}-${era.toString()}`;
    return [
        cacheKey,
        withActive
            ? undefined
            : deriveCache.get(cacheKey)
    ];
}
function getEraMultiCache(CACHE_KEY, eras, withActive) {
    const cached = withActive
        ? []
        : eras
            .map((e) => deriveCache.get(`${CACHE_KEY}-${e.toString()}`))
            .filter((v) => !!v);
    return cached;
}
function setEraCache(cacheKey, withActive, value) {
    !withActive && deriveCache.set(cacheKey, value);
    return value;
}
function setEraMultiCache(CACHE_KEY, withActive, values) {
    !withActive && values.forEach((v) => deriveCache.set(`${CACHE_KEY}-${v.era.toString()}`, v));
    return values;
}
function filterCachedEras(eras, cached, query) {
    return eras.map((e) => cached.find(({ era }) => e.eq(era)) ||
        query.find(({ era }) => e.eq(era)));
}

const ERA_CHUNK_SIZE = 14;
function chunkEras(eras, fn) {
    const chunked = arrayChunk(eras, ERA_CHUNK_SIZE);
    let index = 0;
    const subject = new BehaviorSubject(chunked[index]);
    return subject.pipe(switchMap(fn), tap(() => {
        nextTick(() => {
            index++;
            index === chunked.length
                ? subject.complete()
                : subject.next(chunked[index]);
        });
    }), toArray(), map(arrayFlatten));
}
function filterEras(eras, list) {
    return eras.filter((e) => !list.some(({ era }) => e.eq(era)));
}
function erasHistoricApply(fn) {
    return (instanceId, api) => 
    // Cannot quite get the typing right, but it is right in the code
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    memo(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((e) => api.derive.staking[fn](e, withActive))));
}
function erasHistoricApplyAccount(fn) {
    return (instanceId, api) => 
    // Cannot quite get the typing right, but it is right in the code
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    memo(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((e) => api.derive.staking[fn](accountId, e, withActive))));
}
function singleEra(fn) {
    return (instanceId, api) => 
    // Cannot quite get the typing right, but it is right in the code
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    memo(instanceId, (era) => api.derive.staking[fn](era, true));
}
function combineEras(fn) {
    return (instanceId, api) => 
    // Cannot quite get the typing right, but it is right in the code
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    memo(instanceId, (eras, withActive) => !eras.length
        ? of([])
        : chunkEras(eras, (eras) => combineLatest(eras.map((e) => api.derive.staking[fn](e, withActive)))));
}

const CACHE_KEY$4 = 'eraExposure';
function mapStakers(era, stakers) {
    const nominators = {};
    const validators = {};
    stakers.forEach(([key, exposure]) => {
        const validatorId = key.args[1].toString();
        validators[validatorId] = exposure;
        exposure.others.forEach(({ who }, validatorIndex) => {
            const nominatorId = who.toString();
            nominators[nominatorId] = nominators[nominatorId] || [];
            nominators[nominatorId].push({ validatorId, validatorIndex });
        });
    });
    return { era, nominators, validators };
}
function _eraExposure(instanceId, api) {
    return memo(instanceId, (era, withActive = false) => {
        const [cacheKey, cached] = getEraCache(CACHE_KEY$4, era, withActive);
        return cached
            ? of(cached)
            : api.query.staking.erasStakersClipped.entries(era).pipe(map((r) => setEraCache(cacheKey, withActive, mapStakers(era, r))));
    });
}
const eraExposure = /*#__PURE__*/ singleEra('_eraExposure');
const _erasExposure = /*#__PURE__*/ combineEras('_eraExposure');
const erasExposure = /*#__PURE__*/ erasHistoricApply('_erasExposure');

function erasHistoric(instanceId, api) {
    return memo(instanceId, (withActive) => combineLatest([
        api.query.staking.activeEra(),
        api.consts.staking.historyDepth
            ? of(api.consts.staking.historyDepth)
            : api.query.staking.historyDepth()
    ]).pipe(map(([activeEraOpt, historyDepth]) => {
        const result = [];
        const max = historyDepth.toNumber();
        const activeEra = activeEraOpt.unwrapOrDefault().index;
        let lastEra = activeEra;
        while (lastEra.gte(BN_ZERO) && (result.length < max)) {
            if ((lastEra !== activeEra) || (withActive === true)) {
                result.push(api.registry.createType('EraIndex', lastEra));
            }
            lastEra = lastEra.sub(BN_ONE);
        }
        // go from oldest to newest
        return result.reverse();
    })));
}

const CACHE_KEY$3 = 'eraPoints';
function mapValidators({ individual }) {
    return [...individual.entries()]
        .filter(([, points]) => points.gt(BN_ZERO))
        .reduce((result, [validatorId, points]) => {
        result[validatorId.toString()] = points;
        return result;
    }, {});
}
function mapPoints(eras, points) {
    return eras.map((era, index) => ({
        era,
        eraPoints: points[index].total,
        validators: mapValidators(points[index])
    }));
}
function _erasPoints(instanceId, api) {
    return memo(instanceId, (eras, withActive) => {
        if (!eras.length) {
            return of([]);
        }
        const cached = getEraMultiCache(CACHE_KEY$3, eras, withActive);
        const remaining = filterEras(eras, cached);
        return !remaining.length
            ? of(cached)
            : api.query.staking.erasRewardPoints.multi(remaining).pipe(map((p) => filterCachedEras(eras, cached, setEraMultiCache(CACHE_KEY$3, withActive, mapPoints(remaining, p)))));
    });
}
const erasPoints = /*#__PURE__*/ erasHistoricApply('_erasPoints');

const CACHE_KEY$2 = 'eraPrefs';
function mapPrefs(era, all) {
    const validators = {};
    all.forEach(([key, prefs]) => {
        validators[key.args[1].toString()] = prefs;
    });
    return { era, validators };
}
function _eraPrefs(instanceId, api) {
    return memo(instanceId, (era, withActive) => {
        const [cacheKey, cached] = getEraCache(CACHE_KEY$2, era, withActive);
        return cached
            ? of(cached)
            : api.query.staking.erasValidatorPrefs.entries(era).pipe(map((r) => setEraCache(cacheKey, withActive, mapPrefs(era, r))));
    });
}
const eraPrefs = /*#__PURE__*/ singleEra('_eraPrefs');
const _erasPrefs = /*#__PURE__*/ combineEras('_eraPrefs');
const erasPrefs = /*#__PURE__*/ erasHistoricApply('_erasPrefs');

const CACHE_KEY$1 = 'eraRewards';
function mapRewards(eras, optRewards) {
    return eras.map((era, index) => ({
        era,
        eraReward: optRewards[index].unwrapOrDefault()
    }));
}
function _erasRewards(instanceId, api) {
    return memo(instanceId, (eras, withActive) => {
        if (!eras.length) {
            return of([]);
        }
        const cached = getEraMultiCache(CACHE_KEY$1, eras, withActive);
        const remaining = filterEras(eras, cached);
        if (!remaining.length) {
            return of(cached);
        }
        return api.query.staking.erasValidatorReward.multi(remaining).pipe(map((r) => filterCachedEras(eras, cached, setEraMultiCache(CACHE_KEY$1, withActive, mapRewards(remaining, r)))));
    });
}
const erasRewards = /*#__PURE__*/ erasHistoricApply('_erasRewards');

const CACHE_KEY = 'eraSlashes';
function mapSlashes(era, noms, vals) {
    const nominators = {};
    const validators = {};
    noms.forEach(([key, optBalance]) => {
        nominators[key.args[1].toString()] = optBalance.unwrap();
    });
    vals.forEach(([key, optRes]) => {
        validators[key.args[1].toString()] = optRes.unwrapOrDefault()[1];
    });
    return { era, nominators, validators };
}
function _eraSlashes(instanceId, api) {
    return memo(instanceId, (era, withActive) => {
        const [cacheKey, cached] = getEraCache(CACHE_KEY, era, withActive);
        return cached
            ? of(cached)
            : combineLatest([
                api.query.staking.nominatorSlashInEra.entries(era),
                api.query.staking.validatorSlashInEra.entries(era)
            ]).pipe(map(([n, v]) => setEraCache(cacheKey, withActive, mapSlashes(era, n, v))));
    });
}
const eraSlashes = /*#__PURE__*/ singleEra('_eraSlashes');
const _erasSlashes = /*#__PURE__*/ combineEras('_eraSlashes');
const erasSlashes = /*#__PURE__*/ erasHistoricApply('_erasSlashes');

const DEFAULT_FLAGS$1 = { withController: true, withExposure: true, withPrefs: true };
function combineAccounts(nextElected, validators) {
    return arrayFlatten([nextElected, validators.filter((v) => !nextElected.find((n) => n.eq(v)))]);
}
function electedInfo(instanceId, api) {
    return memo(instanceId, (flags = DEFAULT_FLAGS$1) => api.derive.staking.validators().pipe(switchMap(({ nextElected, validators }) => api.derive.staking.queryMulti(combineAccounts(nextElected, validators), flags).pipe(map((info) => ({
        info,
        nextElected,
        validators
    }))))));
}

function extractsIds(stashId, queuedKeys, nextKeys) {
    const sessionIds = (queuedKeys.find(([currentId]) => currentId.eq(stashId)) || [undefined, []])[1];
    const nextSessionIds = nextKeys.unwrapOr([]);
    return {
        nextSessionIds: Array.isArray(nextSessionIds)
            ? nextSessionIds
            : [...nextSessionIds.values()],
        sessionIds: Array.isArray(sessionIds)
            ? sessionIds
            : [...sessionIds.values()]
    };
}
const keys = /*#__PURE__*/ firstMemo((api, stashId) => api.derive.staking.keysMulti([stashId]));
function keysMulti(instanceId, api) {
    return memo(instanceId, (stashIds) => stashIds.length
        ? api.query.session.queuedKeys().pipe(switchMap((queuedKeys) => combineLatest([
            of(queuedKeys),
            api.consts.session?.dedupKeyPrefix
                ? api.query.session.nextKeys.multi(stashIds.map((s) => [api.consts.session.dedupKeyPrefix, s]))
                : combineLatest(stashIds.map((s) => api.query.session.nextKeys(s)))
        ])), map(([queuedKeys, nextKeys]) => stashIds.map((stashId, index) => extractsIds(stashId, queuedKeys, nextKeys[index]))))
        : of([]));
}

/**
 * @description Retrieve the staking overview, including elected and points earned
 */
function overview(instanceId, api) {
    return memo(instanceId, () => combineLatest([
        api.derive.session.indexes(),
        api.derive.staking.validators()
    ]).pipe(map(([indexes, { nextElected, validators }]) => objectSpread({}, indexes, {
        nextElected,
        validators
    }))));
}

function _ownExposures(instanceId, api) {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    return memo(instanceId, (accountId, eras, _withActive) => eras.length
        ? combineLatest([
            combineLatest(eras.map((e) => api.query.staking.erasStakersClipped(e, accountId))),
            combineLatest(eras.map((e) => api.query.staking.erasStakers(e, accountId)))
        ]).pipe(map(([clp, exp]) => eras.map((era, index) => ({ clipped: clp[index], era, exposure: exp[index] }))))
        : of([]));
}
const ownExposure = /*#__PURE__*/ firstMemo((api, accountId, era) => api.derive.staking._ownExposures(accountId, [era], true));
const ownExposures = /*#__PURE__*/ erasHistoricApplyAccount('_ownExposures');

function _ownSlashes(instanceId, api) {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    return memo(instanceId, (accountId, eras, _withActive) => eras.length
        ? combineLatest([
            combineLatest(eras.map((e) => api.query.staking.validatorSlashInEra(e, accountId))),
            combineLatest(eras.map((e) => api.query.staking.nominatorSlashInEra(e, accountId)))
        ]).pipe(map(([vals, noms]) => eras.map((era, index) => ({
            era,
            total: vals[index].isSome
                ? vals[index].unwrap()[1]
                : noms[index].unwrapOrDefault()
        }))))
        : of([]));
}
const ownSlash = /*#__PURE__*/ firstMemo((api, accountId, era) => api.derive.staking._ownSlashes(accountId, [era], true));
const ownSlashes = /*#__PURE__*/ erasHistoricApplyAccount('_ownSlashes');

function parseDetails(stashId, controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure, stakingLedgerOpt) {
    return {
        accountId: stashId,
        controllerId: controllerIdOpt && controllerIdOpt.unwrapOr(null),
        exposure,
        nominators: nominatorsOpt.isSome
            ? nominatorsOpt.unwrap().targets
            : [],
        rewardDestination,
        stakingLedger: stakingLedgerOpt.unwrapOrDefault(),
        stashId,
        validatorPrefs
    };
}
function getLedgers(api, optIds, { withLedger = false }) {
    const ids = optIds
        .filter((o) => withLedger && !!o && o.isSome)
        .map((o) => o.unwrap());
    const emptyLed = api.registry.createType('Option<StakingLedger>');
    return (ids.length
        ? combineLatest(ids.map((s) => api.query.staking.ledger(s)))
        : of([])).pipe(map((optLedgers) => {
        let offset = -1;
        return optIds.map((o) => o && o.isSome
            ? optLedgers[++offset] || emptyLed
            : emptyLed);
    }));
}
function getStashInfo(api, stashIds, activeEra, { withController, withDestination, withExposure, withLedger, withNominations, withPrefs }) {
    const emptyNoms = api.registry.createType('Option<Nominations>');
    const emptyRewa = api.registry.createType('RewardDestination');
    const emptyExpo = api.registry.createType('Exposure');
    const emptyPrefs = api.registry.createType('ValidatorPrefs');
    return combineLatest([
        withController || withLedger
            ? combineLatest(stashIds.map((s) => api.query.staking.bonded(s)))
            : of(stashIds.map(() => null)),
        withNominations
            ? combineLatest(stashIds.map((s) => api.query.staking.nominators(s)))
            : of(stashIds.map(() => emptyNoms)),
        withDestination
            ? combineLatest(stashIds.map((s) => api.query.staking.payee(s)))
            : of(stashIds.map(() => emptyRewa)),
        withPrefs
            ? combineLatest(stashIds.map((s) => api.query.staking.validators(s)))
            : of(stashIds.map(() => emptyPrefs)),
        withExposure
            ? combineLatest(stashIds.map((s) => api.query.staking.erasStakers(activeEra, s)))
            : of(stashIds.map(() => emptyExpo))
    ]);
}
function getBatch(api, activeEra, stashIds, flags) {
    return getStashInfo(api, stashIds, activeEra, flags).pipe(switchMap(([controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure]) => getLedgers(api, controllerIdOpt, flags).pipe(map((stakingLedgerOpts) => stashIds.map((stashId, index) => parseDetails(stashId, controllerIdOpt[index], nominatorsOpt[index], rewardDestination[index], validatorPrefs[index], exposure[index], stakingLedgerOpts[index]))))));
}
/**
 * @description From a stash, retrieve the controllerId and all relevant details
 */
const query = /*#__PURE__*/ firstMemo((api, accountId, flags) => api.derive.staking.queryMulti([accountId], flags));
function queryMulti(instanceId, api) {
    return memo(instanceId, (accountIds, flags) => api.derive.session.indexes().pipe(switchMap(({ activeEra }) => {
        const stashIds = accountIds.map((a) => api.registry.createType('AccountId', a));
        return stashIds.length
            ? getBatch(api, activeEra, stashIds, flags)
            : of([]);
    })));
}

function _stakerExposures(instanceId, api) {
    return memo(instanceId, (accountIds, eras, withActive = false) => {
        const stakerIds = accountIds.map((a) => api.registry.createType('AccountId', a).toString());
        return api.derive.staking._erasExposure(eras, withActive).pipe(map((exposures) => stakerIds.map((stakerId) => exposures.map(({ era, nominators: allNominators, validators: allValidators }) => {
            const isValidator = !!allValidators[stakerId];
            const validators = {};
            const nominating = allNominators[stakerId] || [];
            if (isValidator) {
                validators[stakerId] = allValidators[stakerId];
            }
            else if (nominating) {
                nominating.forEach(({ validatorId }) => {
                    validators[validatorId] = allValidators[validatorId];
                });
            }
            return { era, isEmpty: !Object.keys(validators).length, isValidator, nominating, validators };
        }))));
    });
}
function stakerExposures(instanceId, api) {
    return memo(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((eras) => api.derive.staking._stakerExposures(accountIds, eras, withActive))));
}
const stakerExposure = /*#__PURE__*/ firstMemo((api, accountId, withActive) => api.derive.staking.stakerExposures([accountId], withActive));

function _stakerPoints(instanceId, api) {
    return memo(instanceId, (accountId, eras, withActive) => {
        const stakerId = api.registry.createType('AccountId', accountId).toString();
        return api.derive.staking._erasPoints(eras, withActive).pipe(map((points) => points.map(({ era, eraPoints, validators }) => ({
            era,
            eraPoints,
            points: validators[stakerId] || api.registry.createType('RewardPoint')
        }))));
    });
}
const stakerPoints = /*#__PURE__*/ erasHistoricApplyAccount('_stakerPoints');

function _stakerPrefs(instanceId, api) {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    return memo(instanceId, (accountId, eras, _withActive) => api.query.staking.erasValidatorPrefs.multi(eras.map((e) => [e, accountId])).pipe(map((all) => all.map((validatorPrefs, index) => ({
        era: eras[index],
        validatorPrefs
    })))));
}
const stakerPrefs = /*#__PURE__*/ erasHistoricApplyAccount('_stakerPrefs');

function parseRewards(api, stashId, [erasPoints, erasPrefs, erasRewards], exposures) {
    return exposures.map(({ era, isEmpty, isValidator, nominating, validators: eraValidators }) => {
        const { eraPoints, validators: allValPoints } = erasPoints.find((p) => p.era.eq(era)) || { eraPoints: BN_ZERO, validators: {} };
        const { eraReward } = erasRewards.find((r) => r.era.eq(era)) || { eraReward: api.registry.createType('Balance') };
        const { validators: allValPrefs } = erasPrefs.find((p) => p.era.eq(era)) || { validators: {} };
        const validators = {};
        const stakerId = stashId.toString();
        Object.entries(eraValidators).forEach(([validatorId, exposure]) => {
            const valPoints = allValPoints[validatorId] || BN_ZERO;
            const valComm = allValPrefs[validatorId]?.commission.unwrap() || BN_ZERO;
            const expTotal = exposure.total?.unwrap() || BN_ZERO;
            let avail = BN_ZERO;
            let value;
            if (!(expTotal.isZero() || valPoints.isZero() || eraPoints.isZero())) {
                avail = eraReward.mul(valPoints).div(eraPoints);
                const valCut = valComm.mul(avail).div(BN_BILLION);
                let staked;
                if (validatorId === stakerId) {
                    staked = exposure.own.unwrap();
                }
                else {
                    const stakerExp = exposure.others.find(({ who }) => who.eq(stakerId));
                    staked = stakerExp
                        ? stakerExp.value.unwrap()
                        : BN_ZERO;
                }
                value = avail.sub(valCut).imul(staked).div(expTotal).iadd(validatorId === stakerId ? valCut : BN_ZERO);
            }
            validators[validatorId] = {
                total: api.registry.createType('Balance', avail),
                value: api.registry.createType('Balance', value)
            };
        });
        return {
            era,
            eraReward,
            isEmpty,
            isValidator,
            nominating,
            validators
        };
    });
}
function allUniqValidators(rewards) {
    return rewards.reduce(([all, perStash], rewards) => {
        const uniq = [];
        perStash.push(uniq);
        rewards.forEach(({ validators }) => Object.keys(validators).forEach((validatorId) => {
            if (!uniq.includes(validatorId)) {
                uniq.push(validatorId);
                if (!all.includes(validatorId)) {
                    all.push(validatorId);
                }
            }
        }));
        return [all, perStash];
    }, [[], []]);
}
function removeClaimed(validators, queryValidators, reward) {
    const rm = [];
    Object.keys(reward.validators).forEach((validatorId) => {
        const index = validators.indexOf(validatorId);
        if (index !== -1) {
            const valLedger = queryValidators[index].stakingLedger;
            if (valLedger?.claimedRewards.some((e) => reward.era.eq(e))) {
                rm.push(validatorId);
            }
        }
    });
    rm.forEach((validatorId) => {
        delete reward.validators[validatorId];
    });
}
function filterRewards(eras, valInfo, { rewards, stakingLedger }) {
    const filter = eras.filter((e) => !stakingLedger.claimedRewards.some((s) => s.eq(e)));
    const validators = valInfo.map(([v]) => v);
    const queryValidators = valInfo.map(([, q]) => q);
    return rewards
        .filter(({ isEmpty }) => !isEmpty)
        .filter((reward) => {
        if (!filter.some((e) => reward.era.eq(e))) {
            return false;
        }
        removeClaimed(validators, queryValidators, reward);
        return true;
    })
        .filter(({ validators }) => Object.keys(validators).length !== 0)
        .map((reward) => objectSpread({}, reward, {
        nominators: reward.nominating.filter((n) => reward.validators[n.validatorId])
    }));
}
function _stakerRewardsEras(instanceId, api) {
    return memo(instanceId, (eras, withActive = false) => combineLatest([
        api.derive.staking._erasPoints(eras, withActive),
        api.derive.staking._erasPrefs(eras, withActive),
        api.derive.staking._erasRewards(eras, withActive)
    ]));
}
function _stakerRewards(instanceId, api) {
    return memo(instanceId, (accountIds, eras, withActive = false) => combineLatest([
        api.derive.staking.queryMulti(accountIds, { withLedger: true }),
        api.derive.staking._stakerExposures(accountIds, eras, withActive),
        api.derive.staking._stakerRewardsEras(eras, withActive)
    ]).pipe(switchMap(([queries, exposures, erasResult]) => {
        const allRewards = queries.map(({ stakingLedger, stashId }, index) => (!stashId || !stakingLedger)
            ? []
            : parseRewards(api, stashId, erasResult, exposures[index]));
        if (withActive) {
            return of(allRewards);
        }
        const [allValidators, stashValidators] = allUniqValidators(allRewards);
        return api.derive.staking.queryMulti(allValidators, { withLedger: true }).pipe(map((queriedVals) => queries.map(({ stakingLedger }, index) => filterRewards(eras, stashValidators[index].map((validatorId) => [
            validatorId,
            queriedVals.find((q) => q.accountId.eq(validatorId))
        ]), {
            rewards: allRewards[index],
            stakingLedger
        }))));
    })));
}
const stakerRewards = /*#__PURE__*/ firstMemo((api, accountId, withActive) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((eras) => api.derive.staking._stakerRewards([accountId], eras, withActive))));
function stakerRewardsMultiEras(instanceId, api) {
    return memo(instanceId, (accountIds, eras) => accountIds.length && eras.length
        ? api.derive.staking._stakerRewards(accountIds, eras, false)
        : of([]));
}
function stakerRewardsMulti(instanceId, api) {
    return memo(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((eras) => api.derive.staking.stakerRewardsMultiEras(accountIds, eras))));
}

function _stakerSlashes(instanceId, api) {
    return memo(instanceId, (accountId, eras, withActive) => {
        const stakerId = api.registry.createType('AccountId', accountId).toString();
        return api.derive.staking._erasSlashes(eras, withActive).pipe(map((slashes) => slashes.map(({ era, nominators, validators }) => ({
            era,
            total: nominators[stakerId] || validators[stakerId] || api.registry.createType('Balance')
        }))));
    });
}
const stakerSlashes = /*#__PURE__*/ erasHistoricApplyAccount('_stakerSlashes');

function onBondedEvent(api) {
    let current = Date.now();
    return api.query.system.events().pipe(map((events) => {
        current = events.filter(({ event, phase }) => {
            try {
                return phase.isApplyExtrinsic &&
                    event.section === 'staking' &&
                    event.method === 'Bonded';
            }
            catch {
                return false;
            }
        })
            ? Date.now()
            : current;
        return current;
    }), startWith(current), drr({ skipTimeout: true }));
}
/**
 * @description Retrieve the list of all validator stashes
 */
function stashes(instanceId, api) {
    return memo(instanceId, () => onBondedEvent(api).pipe(switchMap(() => api.query.staking.validators.keys()), map((keys) => keys.map(({ args: [v] }) => v).filter((a) => a))));
}

function nextElected(instanceId, api) {
    return memo(instanceId, () => api.query.staking.erasStakers
        ? api.derive.session.indexes().pipe(
        // only populate for next era in the last session, so track both here - entries are not
        // subscriptions, so we need a trigger - currentIndex acts as that trigger to refresh
        switchMap(({ currentEra }) => api.query.staking.erasStakers.keys(currentEra)), map((keys) => keys.map(({ args: [, accountId] }) => accountId)))
        : api.query.staking.currentElected());
}
/**
 * @description Retrieve latest list of validators
 */
function validators(instanceId, api) {
    return memo(instanceId, () => 
    // Sadly the node-template is (for some obscure reason) not comprehensive, so while the derive works
    // in all actual real-world deployed chains, it does create some confusion for limited template chains
    combineLatest([
        api.query.session
            ? api.query.session.validators()
            : of([]),
        api.query.staking
            ? api.derive.staking.nextElected()
            : of([])
    ]).pipe(map(([validators, nextElected]) => ({
        nextElected: nextElected.length
            ? nextElected
            : validators,
        validators
    }))));
}

const DEFAULT_FLAGS = { withController: true, withPrefs: true };
function waitingInfo(instanceId, api) {
    return memo(instanceId, (flags = DEFAULT_FLAGS) => combineLatest([
        api.derive.staking.validators(),
        api.derive.staking.stashes()
    ]).pipe(switchMap(([{ nextElected }, stashes]) => {
        const elected = nextElected.map((a) => a.toString());
        const waiting = stashes.filter((v) => !elected.includes(v.toString()));
        return api.derive.staking.queryMulti(waiting, flags).pipe(map((info) => ({
            info,
            waiting
        })));
    })));
}

var staking = /*#__PURE__*/Object.freeze({
    __proto__: null,
    _eraExposure: _eraExposure,
    _eraPrefs: _eraPrefs,
    _eraSlashes: _eraSlashes,
    _erasExposure: _erasExposure,
    _erasPoints: _erasPoints,
    _erasPrefs: _erasPrefs,
    _erasRewards: _erasRewards,
    _erasSlashes: _erasSlashes,
    _ownExposures: _ownExposures,
    _ownSlashes: _ownSlashes,
    _stakerExposures: _stakerExposures,
    _stakerPoints: _stakerPoints,
    _stakerPrefs: _stakerPrefs,
    _stakerRewards: _stakerRewards,
    _stakerRewardsEras: _stakerRewardsEras,
    _stakerSlashes: _stakerSlashes,
    account: account,
    accounts: accounts,
    currentPoints: currentPoints,
    electedInfo: electedInfo,
    eraExposure: eraExposure,
    eraPrefs: eraPrefs,
    eraSlashes: eraSlashes,
    erasExposure: erasExposure,
    erasHistoric: erasHistoric,
    erasPoints: erasPoints,
    erasPrefs: erasPrefs,
    erasRewards: erasRewards,
    erasSlashes: erasSlashes,
    keys: keys,
    keysMulti: keysMulti,
    nextElected: nextElected,
    overview: overview,
    ownExposure: ownExposure,
    ownExposures: ownExposures,
    ownSlash: ownSlash,
    ownSlashes: ownSlashes,
    query: query,
    queryMulti: queryMulti,
    stakerExposure: stakerExposure,
    stakerExposures: stakerExposures,
    stakerPoints: stakerPoints,
    stakerPrefs: stakerPrefs,
    stakerRewards: stakerRewards,
    stakerRewardsMulti: stakerRewardsMulti,
    stakerRewardsMultiEras: stakerRewardsMultiEras,
    stakerSlashes: stakerSlashes,
    stashes: stashes,
    validators: validators,
    waitingInfo: waitingInfo
});

const members = /*#__PURE__*/ members$5('technicalCommittee');
const hasProposals = /*#__PURE__*/ hasProposals$4('technicalCommittee');
const proposal = /*#__PURE__*/ proposal$4('technicalCommittee');
const proposalCount = /*#__PURE__*/ proposalCount$4('technicalCommittee');
const proposalHashes = /*#__PURE__*/ proposalHashes$4('technicalCommittee');
const proposals$1 = /*#__PURE__*/ proposals$6('technicalCommittee');
const prime = /*#__PURE__*/ prime$4('technicalCommittee');

var technicalCommittee = /*#__PURE__*/Object.freeze({
    __proto__: null,
    hasProposals: hasProposals,
    members: members,
    prime: prime,
    proposal: proposal,
    proposalCount: proposalCount,
    proposalHashes: proposalHashes,
    proposals: proposals$1
});

function parseResult(api, { allIds, allProposals, approvalIds, councilProposals, proposalCount }) {
    const approvals = [];
    const proposals = [];
    const councilTreasury = councilProposals.filter(({ proposal }) => proposal && (api.tx.treasury.approveProposal.is(proposal) ||
        api.tx.treasury.rejectProposal.is(proposal)));
    allIds.forEach((id, index) => {
        if (allProposals[index].isSome) {
            const council = councilTreasury
                .filter(({ proposal }) => proposal && id.eq(proposal.args[0]))
                .sort((a, b) => a.proposal && b.proposal
                ? a.proposal.method.localeCompare(b.proposal.method)
                : a.proposal
                    ? -1
                    : 1);
            const isApproval = approvalIds.some((approvalId) => approvalId.eq(id));
            const derived = { council, id, proposal: allProposals[index].unwrap() };
            if (isApproval) {
                approvals.push(derived);
            }
            else {
                proposals.push(derived);
            }
        }
    });
    return { approvals, proposalCount, proposals };
}
function retrieveProposals(api, proposalCount, approvalIds) {
    const proposalIds = [];
    const count = proposalCount.toNumber();
    for (let index = 0; index < count; index++) {
        if (!approvalIds.some((id) => id.eqn(index))) {
            proposalIds.push(api.registry.createType('ProposalIndex', index));
        }
    }
    const allIds = [...proposalIds, ...approvalIds];
    return combineLatest([
        api.query.treasury.proposals.multi(allIds),
        api.derive.council
            ? api.derive.council.proposals()
            : of([])
    ]).pipe(map(([allProposals, councilProposals]) => parseResult(api, { allIds, allProposals, approvalIds, councilProposals, proposalCount })));
}
/**
 * @description Retrieve all active and approved treasury proposals, along with their info
 */
function proposals(instanceId, api) {
    return memo(instanceId, () => api.query.treasury
        ? combineLatest([
            api.query.treasury.proposalCount(),
            api.query.treasury.approvals()
        ]).pipe(switchMap(([proposalCount, approvalIds]) => retrieveProposals(api, proposalCount, approvalIds)))
        : of({
            approvals: [],
            proposalCount: api.registry.createType('ProposalIndex'),
            proposals: []
        }));
}

var treasury = /*#__PURE__*/Object.freeze({
    __proto__: null,
    proposals: proposals
});

function events(instanceId, api) {
    return memo(instanceId, (blockHash) => combineLatest([
        api.rpc.chain.getBlock(blockHash),
        api.queryAt(blockHash).pipe(switchMap((queryAt) => queryAt.system.events()))
    ]).pipe(map(([block, events]) => ({ block, events }))));
}

const FALLBACK_MAX_HASH_COUNT = 250;
const FALLBACK_PERIOD = new BN(6 * 1000);
const MAX_FINALITY_LAG = new BN(5);
const MORTAL_PERIOD = new BN(5 * 60 * 1000);

function latestNonce(api, address) {
    return api.derive.balances.account(address).pipe(map(({ accountNonce }) => accountNonce));
}
function nextNonce(api, address) {
    return api.rpc.system?.accountNextIndex
        ? api.rpc.system.accountNextIndex(address)
        : latestNonce(api, address);
}
function signingHeader(api) {
    return combineLatest([
        api.rpc.chain.getHeader().pipe(switchMap((header) => 
        // check for chains at genesis (until block 1 is produced, e.g. 6s), since
        // we do need to allow transactions at chain start (also dev/seal chains)
        header.parentHash.isEmpty
            ? of(header)
            // in the case of the current block, we use the parent to minimize the
            // impact of forks on the system, but not completely remove it
            : api.rpc.chain.getHeader(header.parentHash))),
        api.rpc.chain.getFinalizedHead().pipe(switchMap((hash) => api.rpc.chain.getHeader(hash)))
    ]).pipe(map(([current, finalized]) => 
    // determine the hash to use, current when lag > max, else finalized
    unwrapBlockNumber(current).sub(unwrapBlockNumber(finalized)).gt(MAX_FINALITY_LAG)
        ? current
        : finalized));
}
function signingInfo(_instanceId, api) {
    // no memo, we want to do this fresh on each run
    return (address, nonce, era) => combineLatest([
        // retrieve nonce if none was specified
        isUndefined(nonce)
            ? latestNonce(api, address)
            : nonce === -1
                ? nextNonce(api, address)
                : of(api.registry.createType('Index', nonce)),
        // if no era (create) or era > 0 (mortal), do block retrieval
        (isUndefined(era) || (isNumber(era) && era > 0))
            ? signingHeader(api)
            : of(null)
    ]).pipe(map(([nonce, header]) => ({
        header,
        mortalLength: Math.min(api.consts.system?.blockHashCount?.toNumber() || FALLBACK_MAX_HASH_COUNT, MORTAL_PERIOD
            .div(api.consts.babe?.expectedBlockTime ||
            api.consts.timestamp?.minimumPeriod.muln(2) ||
            FALLBACK_PERIOD)
            .iadd(MAX_FINALITY_LAG)
            .toNumber()),
        nonce
    })));
}

var tx = /*#__PURE__*/Object.freeze({
    __proto__: null,
    events: events,
    signingInfo: signingInfo
});

const derive = { accounts: accounts$1, alliance, bagsList, balances, bounties, chain, contracts, council, crowdloan, democracy, elections, imOnline, membership, parachains, session, society, staking, technicalCommittee, treasury, tx };

const checks = {
    allianceMotion: {
        instances: ['allianceMotion'],
        methods: []
    },
    bagsList: {
        instances: ['voterBagsList', 'voterList', 'bagsList'],
        methods: [],
        withDetect: true
    },
    contracts: {
        instances: ['contracts'],
        methods: []
    },
    council: {
        instances: ['council'],
        methods: [],
        withDetect: true
    },
    crowdloan: {
        instances: ['crowdloan'],
        methods: []
    },
    democracy: {
        instances: ['democracy'],
        methods: []
    },
    elections: {
        instances: ['phragmenElection', 'electionsPhragmen', 'elections', 'council'],
        methods: [],
        withDetect: true
    },
    imOnline: {
        instances: ['imOnline'],
        methods: []
    },
    membership: {
        instances: ['membership'],
        methods: []
    },
    parachains: {
        instances: ['parachains', 'registrar'],
        methods: []
    },
    session: {
        instances: ['session'],
        methods: []
    },
    society: {
        instances: ['society'],
        methods: []
    },
    staking: {
        instances: ['staking'],
        methods: ['erasRewardPoints']
    },
    technicalCommittee: {
        instances: ['technicalCommittee'],
        methods: [],
        withDetect: true
    },
    treasury: {
        instances: ['treasury'],
        methods: []
    }
};
function getModuleInstances(api, specName, moduleName) {
    return api.registry.getModuleInstances(specName, moduleName) || [];
}
/**
 * Returns an object that will inject `api` into all the functions inside
 * `allSections`, and keep the object architecture of `allSections`.
 */
/** @internal */
function injectFunctions(instanceId, api, derives) {
    const result = {};
    const names = Object.keys(derives);
    const keys = Object.keys(api.query);
    const specName = api.runtimeVersion.specName;
    const filterKeys = (q) => keys.includes(q);
    const filterInstances = (q) => getModuleInstances(api, specName, q).some(filterKeys);
    const filterMethods = (all) => (m) => all.some((q) => keys.includes(q) && api.query[q][m]);
    const getKeys = (s) => Object.keys(derives[s]);
    const creator = (s, m) => derives[s][m](instanceId, api);
    const isIncluded = (c) => (!checks[c] || ((checks[c].instances.some(filterKeys) && (!checks[c].methods.length ||
        checks[c].methods.every(filterMethods(checks[c].instances)))) ||
        (checks[c].withDetect &&
            checks[c].instances.some(filterInstances))));
    for (let i = 0; i < names.length; i++) {
        const name = names[i];
        isIncluded(name) &&
            lazyDeriveSection(result, name, getKeys, creator);
    }
    return result;
}
/** @internal */
function getAvailableDerives(instanceId, api, custom = {}) {
    return {
        ...injectFunctions(instanceId, api, derive),
        ...injectFunctions(instanceId, api, custom)
    };
}

/**
 * This is a section decorator which keeps all type information.
 */
function decorateDeriveSections(decorateMethod, derives) {
    const getKeys = (s) => Object.keys(derives[s]);
    const creator = (s, m) => decorateMethod(derives[s][m]);
    const result = {};
    const names = Object.keys(derives);
    for (let i = 0; i < names.length; i++) {
        lazyDeriveSection(result, names[i], getKeys, creator);
    }
    return result;
}

const l$3 = logger('api/util');

function filterEvents(txHash, { block: { extrinsics, header } }, allEvents, status) {
    // extrinsics to hashes
    for (const [txIndex, x] of extrinsics.entries()) {
        if (x.hash.eq(txHash)) {
            return {
                blockNumber: isCompact(header.number) ? header.number.unwrap() : header.number,
                events: allEvents.filter(({ phase }) => phase.isApplyExtrinsic &&
                    phase.asApplyExtrinsic.eqn(txIndex)),
                txIndex
            };
        }
    }
    // if we do get the block after finalized, it _should_ be there
    // only warn on filtering with isInBlock (finalization finalizes after)
    if (status.isInBlock) {
        const allHashes = extrinsics.map((x) => x.hash.toHex());
        l$3.warn(`block ${header.hash.toHex()}: Unable to find extrinsic ${txHash.toHex()} inside ${allHashes.join(', ')}`);
    }
    return {};
}

function isKeyringPair(account) {
    return isFunction$1(account.sign);
}

const recordIdentity = (record) => record;
function filterAndApply(events, section, methods, onFound) {
    return events
        .filter(({ event }) => section === event.section &&
        methods.includes(event.method))
        .map((record) => onFound(record));
}
function getDispatchError({ event: { data: [dispatchError] } }) {
    return dispatchError;
}
function getDispatchInfo({ event: { data, method } }) {
    return method === 'ExtrinsicSuccess'
        ? data[0]
        : data[1];
}
function extractError(events = []) {
    return filterAndApply(events, 'system', ['ExtrinsicFailed'], getDispatchError)[0];
}
function extractInfo(events = []) {
    return filterAndApply(events, 'system', ['ExtrinsicFailed', 'ExtrinsicSuccess'], getDispatchInfo)[0];
}
class SubmittableResult {
    constructor({ blockNumber, dispatchError, dispatchInfo, events, internalError, status, txHash, txIndex }) {
        this.dispatchError = dispatchError || extractError(events);
        this.dispatchInfo = dispatchInfo || extractInfo(events);
        this.events = events || [];
        this.internalError = internalError;
        this.status = status;
        this.txHash = txHash;
        this.txIndex = txIndex;
        this.blockNumber = blockNumber;
    }
    get isCompleted() {
        return this.isError || this.status.isInBlock || this.status.isFinalized;
    }
    get isError() {
        return this.status.isDropped || this.status.isFinalityTimeout || this.status.isInvalid || this.status.isUsurped;
    }
    get isFinalized() {
        return this.status.isFinalized;
    }
    get isInBlock() {
        return this.status.isInBlock;
    }
    get isWarning() {
        return this.status.isRetracted;
    }
    /**
     * @description Filters EventRecords for the specified method & section (there could be multiple)
     */
    filterRecords(section, method) {
        return filterAndApply(this.events, section, Array.isArray(method) ? method : [method], recordIdentity);
    }
    /**
     * @description Finds an EventRecord for the specified method & section
     */
    findRecord(section, method) {
        return this.filterRecords(section, method)[0];
    }
    /**
     * @description Creates a human representation of the output
     */
    toHuman(isExtended) {
        return {
            dispatchError: this.dispatchError?.toHuman(),
            dispatchInfo: this.dispatchInfo?.toHuman(),
            events: this.events.map((e) => e.toHuman(isExtended)),
            internalError: this.internalError?.message.toString(),
            status: this.status.toHuman(isExtended)
        };
    }
}

const identity = (input) => input;
function makeEraOptions(api, registry, partialOptions, { header, mortalLength, nonce }) {
    if (!header) {
        if (partialOptions.era && !partialOptions.blockHash) {
            throw new Error('Expected blockHash to be passed alongside non-immortal era options');
        }
        if (isNumber(partialOptions.era)) {
            // since we have no header, it is immortal, remove any option overrides
            // so we only supply the genesisHash and no era to the construction
            delete partialOptions.era;
            delete partialOptions.blockHash;
        }
        return makeSignOptions(api, partialOptions, { nonce });
    }
    return makeSignOptions(api, partialOptions, {
        blockHash: header.hash,
        era: registry.createTypeUnsafe('ExtrinsicEra', [{
                current: header.number,
                period: partialOptions.era || mortalLength
            }]),
        nonce
    });
}
function makeSignAndSendOptions(partialOptions, statusCb) {
    let options = {};
    if (isFunction$1(partialOptions)) {
        statusCb = partialOptions;
    }
    else {
        options = objectSpread({}, partialOptions);
    }
    return [options, statusCb];
}
function makeSignOptions(api, partialOptions, extras) {
    return objectSpread({ blockHash: api.genesisHash, genesisHash: api.genesisHash }, partialOptions, extras, { runtimeVersion: api.runtimeVersion, signedExtensions: api.registry.signedExtensions, version: api.extrinsicType });
}
function optionsOrNonce(partialOptions = {}) {
    return isBn(partialOptions) || isNumber(partialOptions)
        ? { nonce: partialOptions }
        : partialOptions;
}
function createClass({ api, apiType, blockHash, decorateMethod }) {
    var _Submittable_ignoreStatusCb, _Submittable_transformResult, _Submittable_observeSign, _Submittable_observeStatus, _Submittable_observeSend, _Submittable_observeSubscribe, _Submittable_signViaSigner, _Submittable_updateSigner;
    // an instance of the base extrinsic for us to extend
    const ExtrinsicBase = api.registry.createClass('Extrinsic');
    class Submittable extends ExtrinsicBase {
        constructor(registry, extrinsic) {
            super(registry, extrinsic, { version: api.extrinsicType });
            _Submittable_ignoreStatusCb.set(this, void 0);
            _Submittable_transformResult.set(this, identity);
            _Submittable_observeSign.set(this, (account, partialOptions) => {
                const address = isKeyringPair(account) ? account.address : account.toString();
                const options = optionsOrNonce(partialOptions);
                return api.derive.tx.signingInfo(address, options.nonce, options.era).pipe(first(), mergeMap(async (signingInfo) => {
                    const eraOptions = makeEraOptions(api, this.registry, options, signingInfo);
                    let updateId = -1;
                    if (isKeyringPair(account)) {
                        this.sign(account, eraOptions);
                    }
                    else {
                        updateId = await __classPrivateFieldGet(this, _Submittable_signViaSigner, "f").call(this, address, eraOptions, signingInfo.header);
                    }
                    return { options: eraOptions, updateId };
                }));
            });
            _Submittable_observeStatus.set(this, (txHash, status) => {
                if (!status.isFinalized && !status.isInBlock) {
                    return of(__classPrivateFieldGet(this, _Submittable_transformResult, "f").call(this, new SubmittableResult({
                        status,
                        txHash
                    })));
                }
                const blockHash = status.isInBlock
                    ? status.asInBlock
                    : status.asFinalized;
                return api.derive.tx.events(blockHash).pipe(map(({ block, events }) => __classPrivateFieldGet(this, _Submittable_transformResult, "f").call(this, new SubmittableResult({
                    ...filterEvents(txHash, block, events, status),
                    status,
                    txHash
                }))), catchError((internalError) => of(__classPrivateFieldGet(this, _Submittable_transformResult, "f").call(this, new SubmittableResult({
                    internalError,
                    status,
                    txHash
                })))));
            });
            _Submittable_observeSend.set(this, (info) => {
                return api.rpc.author.submitExtrinsic(this).pipe(tap((hash) => {
                    __classPrivateFieldGet(this, _Submittable_updateSigner, "f").call(this, hash, info);
                }));
            });
            _Submittable_observeSubscribe.set(this, (info) => {
                const txHash = this.hash;
                return api.rpc.author.submitAndWatchExtrinsic(this).pipe(switchMap((status) => __classPrivateFieldGet(this, _Submittable_observeStatus, "f").call(this, txHash, status)), tap((status) => {
                    __classPrivateFieldGet(this, _Submittable_updateSigner, "f").call(this, status, info);
                }));
            });
            _Submittable_signViaSigner.set(this, async (address, options, header) => {
                const signer = options.signer || api.signer;
                if (!signer) {
                    throw new Error('No signer specified, either via api.setSigner or via sign options. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.');
                }
                const payload = this.registry.createTypeUnsafe('SignerPayload', [objectSpread({}, options, {
                        address,
                        blockNumber: header ? header.number : 0,
                        method: this.method
                    })]);
                let result;
                if (isFunction$1(signer.signPayload)) {
                    result = await signer.signPayload(payload.toPayload());
                }
                else if (isFunction$1(signer.signRaw)) {
                    result = await signer.signRaw(payload.toRaw());
                }
                else {
                    throw new Error('Invalid signer interface, it should implement either signPayload or signRaw (or both)');
                }
                // Here we explicitly call `toPayload()` again instead of working with an object
                // (reference) as passed to the signer. This means that we are sure that the
                // payload data is not modified from our inputs, but the signer
                super.addSignature(address, result.signature, payload.toPayload());
                return result.id;
            });
            _Submittable_updateSigner.set(this, (status, info) => {
                if (info && (info.updateId !== -1)) {
                    const { options, updateId } = info;
                    const signer = options.signer || api.signer;
                    if (signer && isFunction$1(signer.update)) {
                        signer.update(updateId, status);
                    }
                }
            });
            __classPrivateFieldSet(this, _Submittable_ignoreStatusCb, apiType === 'rxjs', "f");
        }
        get hasDryRun() {
            return isFunction$1(api.rpc.system?.dryRun);
        }
        get hasPaymentInfo() {
            return isFunction$1(api.call.transactionPaymentApi?.queryInfo);
        }
        // dry run an extrinsic
        dryRun(account, optionsOrHash) {
            if (!this.hasDryRun) {
                throw new Error('The system.dryRun RPC call is not available in your environment');
            }
            if (blockHash || isString(optionsOrHash) || isU8a(optionsOrHash)) {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-return
                return decorateMethod(() => api.rpc.system.dryRun(this.toHex(), blockHash || optionsOrHash));
            }
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
            return decorateMethod(() => __classPrivateFieldGet(this, _Submittable_observeSign, "f").call(this, account, optionsOrHash).pipe(switchMap(() => api.rpc.system.dryRun(this.toHex()))))();
        }
        // calculate the payment info for this transaction (if signed and submitted)
        paymentInfo(account, optionsOrHash) {
            if (!this.hasPaymentInfo) {
                throw new Error('The transactionPaymentApi.queryInfo runtime call is not available in your environment');
            }
            if (blockHash || isString(optionsOrHash) || isU8a(optionsOrHash)) {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-return
                return decorateMethod(() => api.callAt(blockHash || optionsOrHash).pipe(switchMap((callAt) => {
                    const u8a = this.toU8a();
                    return callAt.transactionPaymentApi.queryInfo(u8a, u8a.length);
                })));
            }
            const [allOptions] = makeSignAndSendOptions(optionsOrHash);
            const address = isKeyringPair(account) ? account.address : account.toString();
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
            return decorateMethod(() => api.derive.tx.signingInfo(address, allOptions.nonce, allOptions.era).pipe(first(), switchMap((signingInfo) => {
                // setup our options (same way as in signAndSend)
                const eraOptions = makeEraOptions(api, this.registry, allOptions, signingInfo);
                const signOptions = makeSignOptions(api, eraOptions, {});
                const u8a = this.isSigned
                    ? api.tx(this).signFake(address, signOptions).toU8a()
                    : this.signFake(address, signOptions).toU8a();
                return api.call.transactionPaymentApi.queryInfo(u8a, u8a.length);
            })))();
        }
        // send implementation for both immediate Hash and statusCb variants
        send(statusCb) {
            const isSubscription = api.hasSubscriptions && (__classPrivateFieldGet(this, _Submittable_ignoreStatusCb, "f") || !!statusCb);
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
            return decorateMethod(isSubscription
                ? __classPrivateFieldGet(this, _Submittable_observeSubscribe, "f")
                : __classPrivateFieldGet(this, _Submittable_observeSend, "f"))(statusCb);
        }
        /**
         * @description Signs a transaction, returning `this` to allow chaining. E.g.: `signAsync(...).send()`. Like `.signAndSend` this will retrieve the nonce and blockHash to send the tx with.
         */
        signAsync(account, partialOptions) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
            return decorateMethod(() => __classPrivateFieldGet(this, _Submittable_observeSign, "f").call(this, account, partialOptions).pipe(map(() => this)))();
        }
        // signAndSend implementation for all 3 cases above
        signAndSend(account, partialOptions, optionalStatusCb) {
            const [options, statusCb] = makeSignAndSendOptions(partialOptions, optionalStatusCb);
            const isSubscription = api.hasSubscriptions && (__classPrivateFieldGet(this, _Submittable_ignoreStatusCb, "f") || !!statusCb);
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
            return decorateMethod(() => __classPrivateFieldGet(this, _Submittable_observeSign, "f").call(this, account, options).pipe(switchMap((info) => isSubscription
                ? __classPrivateFieldGet(this, _Submittable_observeSubscribe, "f").call(this, info)
                : __classPrivateFieldGet(this, _Submittable_observeSend, "f").call(this, info))) // FIXME This is wrong, SubmittableResult is _not_ a codec
            )(statusCb);
        }
        // adds a transform to the result, applied before result is returned
        withResultTransform(transform) {
            __classPrivateFieldSet(this, _Submittable_transformResult, transform, "f");
            return this;
        }
    }
    _Submittable_ignoreStatusCb = new WeakMap(), _Submittable_transformResult = new WeakMap(), _Submittable_observeSign = new WeakMap(), _Submittable_observeStatus = new WeakMap(), _Submittable_observeSend = new WeakMap(), _Submittable_observeSubscribe = new WeakMap(), _Submittable_signViaSigner = new WeakMap(), _Submittable_updateSigner = new WeakMap();
    return Submittable;
}

function createSubmittable(apiType, api, decorateMethod, registry, blockHash) {
    const Submittable = createClass({ api, apiType, blockHash, decorateMethod });
    return (extrinsic) => new Submittable(registry || api.registry, extrinsic);
}

function findCall(registry, callIndex) {
    return registry.findMetaCall(u8aToU8a(callIndex));
}
function findError(registry, errorIndex) {
    return registry.findMetaError(u8aToU8a(errorIndex));
}

const typesChain = {};
var typesChain$1 = typesChain;

const sharedTypes$5 = {
    // Anchor
    AnchorData: {
        anchoredBlock: 'u64',
        docRoot: 'H256',
        id: 'H256'
    },
    DispatchErrorModule: 'DispatchErrorModuleU8',
    PreCommitData: {
        expirationBlock: 'u64',
        identity: 'H256',
        signingRoot: 'H256'
    },
    // Fees
    Fee: {
        key: 'Hash',
        price: 'Balance'
    },
    // MultiAccount
    MultiAccountData: {
        deposit: 'Balance',
        depositor: 'AccountId',
        signatories: 'Vec<AccountId>',
        threshold: 'u16'
    },
    // Bridge
    ChainId: 'u8',
    DepositNonce: 'u64',
    ResourceId: '[u8; 32]',
    'chainbridge::ChainId': 'u8',
    // NFT
    RegistryId: 'H160',
    TokenId: 'U256',
    AssetId: {
        registryId: 'RegistryId',
        tokenId: 'TokenId'
    },
    AssetInfo: {
        metadata: 'Bytes'
    },
    MintInfo: {
        anchorId: 'Hash',
        proofs: 'Vec<ProofMint>',
        staticHashes: '[Hash; 3]'
    },
    Proof: {
        leafHash: 'H256',
        sortedHashes: 'H256'
    },
    ProofMint: {
        hashes: 'Vec<Hash>',
        property: 'Bytes',
        salt: '[u8; 32]',
        value: 'Bytes'
    },
    RegistryInfo: {
        fields: 'Vec<Bytes>',
        ownerCanBurn: 'bool'
    },
    ProxyType: {
        _enum: [
            'Any',
            'NonTransfer',
            'Governance',
            'Staking',
            'NonProxy'
        ]
    }
};
const standaloneTypes = objectSpread({}, sharedTypes$5, {
    AccountInfo: 'AccountInfoWithRefCount',
    Address: 'LookupSource',
    LookupSource: 'IndicesLookupSource',
    Multiplier: 'Fixed64',
    RefCount: 'RefCountTo259'
});
const versioned$8 = [
    {
        minmax: [240, 243],
        types: objectSpread({}, standaloneTypes, {
            ProxyType: {
                _enum: [
                    'Any',
                    'NonTransfer',
                    'Governance',
                    'Staking',
                    'Vesting'
                ]
            }
        })
    },
    {
        minmax: [244, 999],
        types: objectSpread({}, standaloneTypes)
    },
    {
        minmax: [1000, undefined],
        types: objectSpread({}, sharedTypes$5)
    }
];
var centrifugeChain = versioned$8;

const sharedTypes$4 = {
    CompactAssignments: 'CompactAssignmentsWith24',
    DispatchErrorModule: 'DispatchErrorModuleU8',
    RawSolution: 'RawSolutionWith24',
    Keys: 'SessionKeys6',
    ProxyType: {
        _enum: ['Any', 'NonTransfer', 'Governance', 'Staking', 'IdentityJudgement', 'CancelProxy', 'Auction']
    },
    Weight: 'WeightV1'
};
const addrIndicesTypes = {
    AccountInfo: 'AccountInfoWithRefCount',
    Address: 'LookupSource',
    CompactAssignments: 'CompactAssignmentsWith16',
    DispatchErrorModule: 'DispatchErrorModuleU8',
    RawSolution: 'RawSolutionWith16',
    Keys: 'SessionKeys5',
    LookupSource: 'IndicesLookupSource',
    ValidatorPrefs: 'ValidatorPrefsWithCommission'
};
const addrAccountIdTypes$2 = {
    AccountInfo: 'AccountInfoWithRefCount',
    Address: 'AccountId',
    CompactAssignments: 'CompactAssignmentsWith16',
    DispatchErrorModule: 'DispatchErrorModuleU8',
    RawSolution: 'RawSolutionWith16',
    Keys: 'SessionKeys5',
    LookupSource: 'AccountId',
    ValidatorPrefs: 'ValidatorPrefsWithCommission'
};
const versioned$7 = [
    {
        // 1020 is first CC3
        minmax: [1019, 1031],
        types: objectSpread({}, addrIndicesTypes, {
            BalanceLock: 'BalanceLockTo212',
            CompactAssignments: 'CompactAssignmentsTo257',
            DispatchError: 'DispatchErrorTo198',
            DispatchInfo: 'DispatchInfoTo244',
            Heartbeat: 'HeartbeatTo244',
            IdentityInfo: 'IdentityInfoTo198',
            Keys: 'SessionKeys5',
            Multiplier: 'Fixed64',
            OpenTip: 'OpenTipTo225',
            RefCount: 'RefCountTo259',
            ReferendumInfo: 'ReferendumInfoTo239',
            SlashingSpans: 'SlashingSpansTo204',
            StakingLedger: 'StakingLedgerTo223',
            Votes: 'VotesTo230',
            Weight: 'u32'
        })
    },
    {
        minmax: [1032, 1042],
        types: objectSpread({}, addrIndicesTypes, {
            BalanceLock: 'BalanceLockTo212',
            CompactAssignments: 'CompactAssignmentsTo257',
            DispatchInfo: 'DispatchInfoTo244',
            Heartbeat: 'HeartbeatTo244',
            Keys: 'SessionKeys5',
            Multiplier: 'Fixed64',
            OpenTip: 'OpenTipTo225',
            RefCount: 'RefCountTo259',
            ReferendumInfo: 'ReferendumInfoTo239',
            SlashingSpans: 'SlashingSpansTo204',
            StakingLedger: 'StakingLedgerTo223',
            Votes: 'VotesTo230',
            Weight: 'u32'
        })
    },
    {
        // actual at 1045 (1043-1044 is dev)
        minmax: [1043, 1045],
        types: objectSpread({}, addrIndicesTypes, {
            BalanceLock: 'BalanceLockTo212',
            CompactAssignments: 'CompactAssignmentsTo257',
            DispatchInfo: 'DispatchInfoTo244',
            Heartbeat: 'HeartbeatTo244',
            Keys: 'SessionKeys5',
            Multiplier: 'Fixed64',
            OpenTip: 'OpenTipTo225',
            RefCount: 'RefCountTo259',
            ReferendumInfo: 'ReferendumInfoTo239',
            StakingLedger: 'StakingLedgerTo223',
            Votes: 'VotesTo230',
            Weight: 'u32'
        })
    },
    {
        minmax: [1046, 1049],
        types: objectSpread({}, sharedTypes$4, addrAccountIdTypes$2, {
            CompactAssignments: 'CompactAssignmentsTo257',
            DispatchInfo: 'DispatchInfoTo244',
            Heartbeat: 'HeartbeatTo244',
            Multiplier: 'Fixed64',
            OpenTip: 'OpenTipTo225',
            RefCount: 'RefCountTo259',
            ReferendumInfo: 'ReferendumInfoTo239',
            StakingLedger: 'StakingLedgerTo223',
            Weight: 'u32'
        })
    },
    {
        minmax: [1050, 1054],
        types: objectSpread({}, sharedTypes$4, addrAccountIdTypes$2, {
            CompactAssignments: 'CompactAssignmentsTo257',
            DispatchInfo: 'DispatchInfoTo244',
            Heartbeat: 'HeartbeatTo244',
            Multiplier: 'Fixed64',
            OpenTip: 'OpenTipTo225',
            RefCount: 'RefCountTo259',
            ReferendumInfo: 'ReferendumInfoTo239',
            StakingLedger: 'StakingLedgerTo240',
            Weight: 'u32'
        })
    },
    {
        minmax: [1055, 1056],
        types: objectSpread({}, sharedTypes$4, addrAccountIdTypes$2, {
            CompactAssignments: 'CompactAssignmentsTo257',
            DispatchInfo: 'DispatchInfoTo244',
            Heartbeat: 'HeartbeatTo244',
            Multiplier: 'Fixed64',
            OpenTip: 'OpenTipTo225',
            RefCount: 'RefCountTo259',
            StakingLedger: 'StakingLedgerTo240',
            Weight: 'u32'
        })
    },
    {
        minmax: [1057, 1061],
        types: objectSpread({}, sharedTypes$4, addrAccountIdTypes$2, {
            CompactAssignments: 'CompactAssignmentsTo257',
            DispatchInfo: 'DispatchInfoTo244',
            Heartbeat: 'HeartbeatTo244',
            OpenTip: 'OpenTipTo225',
            RefCount: 'RefCountTo259'
        })
    },
    {
        minmax: [1062, 2012],
        types: objectSpread({}, sharedTypes$4, addrAccountIdTypes$2, {
            CompactAssignments: 'CompactAssignmentsTo257',
            OpenTip: 'OpenTipTo225',
            RefCount: 'RefCountTo259'
        })
    },
    {
        minmax: [2013, 2022],
        types: objectSpread({}, sharedTypes$4, addrAccountIdTypes$2, {
            CompactAssignments: 'CompactAssignmentsTo257',
            RefCount: 'RefCountTo259'
        })
    },
    {
        minmax: [2023, 2024],
        types: objectSpread({}, sharedTypes$4, addrAccountIdTypes$2, {
            RefCount: 'RefCountTo259'
        })
    },
    {
        minmax: [2025, 2027],
        types: objectSpread({}, sharedTypes$4, addrAccountIdTypes$2)
    },
    {
        minmax: [2028, 2029],
        types: objectSpread({}, sharedTypes$4, {
            AccountInfo: 'AccountInfoWithDualRefCount',
            CompactAssignments: 'CompactAssignmentsWith16',
            RawSolution: 'RawSolutionWith16'
        })
    },
    {
        minmax: [2030, 9000],
        types: objectSpread({}, sharedTypes$4, {
            CompactAssignments: 'CompactAssignmentsWith16',
            RawSolution: 'RawSolutionWith16'
        })
    },
    {
        minmax: [9010, 9099],
        types: objectSpread({}, sharedTypes$4, mapXcmTypes('V0'))
    },
    {
        // jump from 9100 to 9110, however align with Rococo
        minmax: [9100, 9105],
        types: objectSpread({}, sharedTypes$4, mapXcmTypes('V1'))
    },
    {
        // metadata v14
        minmax: [9106, undefined],
        types: {
            Weight: 'WeightV1'
        }
    }
    // ,
    // {
    //   // weight v2 introduction
    //   minmax: [9300, undefined],
    //   types: {
    //     Weight: 'WeightV2'
    //   }
    // }
];
var kusama = versioned$7;

const versioned$6 = [
    {
        minmax: [0, undefined],
        types: {
            // nothing, API tracks master
            // (v2 weights are not yet the default)
            Weight: 'WeightV2'
        }
    }
];
var node = versioned$6;

const versioned$5 = [
    {
        minmax: [0, undefined],
        types: {
            // nothing, API tracks master
            // (v2 weights are not yet the default)
            Weight: 'WeightV2'
        }
    }
];
var nodeTemplate = versioned$5;

const sharedTypes$3 = {
    CompactAssignments: 'CompactAssignmentsWith16',
    DispatchErrorModule: 'DispatchErrorModuleU8',
    RawSolution: 'RawSolutionWith16',
    Keys: 'SessionKeys6',
    ProxyType: {
        _enum: {
            Any: 0,
            NonTransfer: 1,
            Governance: 2,
            Staking: 3,
            UnusedSudoBalances: 4,
            IdentityJudgement: 5,
            CancelProxy: 6,
            Auction: 7
        }
    },
    Weight: 'WeightV1'
};
const addrAccountIdTypes$1 = {
    AccountInfo: 'AccountInfoWithRefCount',
    Address: 'AccountId',
    DispatchErrorModule: 'DispatchErrorModuleU8',
    Keys: 'SessionKeys5',
    LookupSource: 'AccountId',
    ValidatorPrefs: 'ValidatorPrefsWithCommission'
};
const versioned$4 = [
    {
        minmax: [0, 12],
        types: objectSpread({}, sharedTypes$3, addrAccountIdTypes$1, {
            CompactAssignments: 'CompactAssignmentsTo257',
            OpenTip: 'OpenTipTo225',
            RefCount: 'RefCountTo259'
        })
    },
    {
        minmax: [13, 22],
        types: objectSpread({}, sharedTypes$3, addrAccountIdTypes$1, {
            CompactAssignments: 'CompactAssignmentsTo257',
            RefCount: 'RefCountTo259'
        })
    },
    {
        minmax: [23, 24],
        types: objectSpread({}, sharedTypes$3, addrAccountIdTypes$1, {
            RefCount: 'RefCountTo259'
        })
    },
    {
        minmax: [25, 27],
        types: objectSpread({}, sharedTypes$3, addrAccountIdTypes$1)
    },
    {
        minmax: [28, 29],
        types: objectSpread({}, sharedTypes$3, {
            AccountInfo: 'AccountInfoWithDualRefCount'
        })
    },
    {
        minmax: [30, 9109],
        types: objectSpread({}, sharedTypes$3)
    },
    {
        // metadata v14
        minmax: [9110, undefined],
        types: {
            Weight: 'WeightV1'
        }
    }
    // ,
    // {
    //   // weight v2 introduction
    //   minmax: [9300, undefined],
    //   types: {
    //     Weight: 'WeightV2'
    //   }
    // }
];
var polkadot = versioned$4;

/* eslint-disable sort-keys */
const sharedTypes$2 = {
    DispatchErrorModule: 'DispatchErrorModuleU8',
    FullIdentification: '()',
    Keys: 'SessionKeys7B',
    Weight: 'WeightV1'
};
const versioned$3 = [
    {
        minmax: [0, 200],
        types: objectSpread({}, sharedTypes$2, {
            AccountInfo: 'AccountInfoWithDualRefCount',
            Address: 'AccountId',
            LookupSource: 'AccountId'
        })
    },
    {
        minmax: [201, 214],
        types: objectSpread({}, sharedTypes$2, {
            AccountInfo: 'AccountInfoWithDualRefCount'
        })
    },
    {
        minmax: [215, 228],
        types: objectSpread({}, sharedTypes$2, {
            Keys: 'SessionKeys6'
        })
    },
    {
        minmax: [229, 9099],
        types: objectSpread({}, sharedTypes$2, mapXcmTypes('V0'))
    },
    {
        minmax: [9100, 9105],
        types: objectSpread({}, sharedTypes$2, mapXcmTypes('V1'))
    },
    {
        // metadata v14
        minmax: [9106, undefined],
        types: {
            Weight: 'WeightV1'
        }
    }
    // ,
    // {
    //   // weight v2 introduction
    //   minmax: [9300, undefined],
    //   types: {
    //     Weight: 'WeightV2'
    //   }
    // }
];
var rococo = versioned$3;

const versioned$2 = [
    {
        minmax: [0, undefined],
        types: {
        // nothing, limited runtime
        }
    }
];
var shell = versioned$2;

const sharedTypes$1 = {
    DispatchErrorModule: 'DispatchErrorModuleU8',
    TAssetBalance: 'u128',
    ProxyType: {
        _enum: [
            'Any',
            'NonTransfer',
            'CancelProxy',
            'Assets',
            'AssetOwner',
            'AssetManager',
            'Staking'
        ]
    },
    Weight: 'WeightV1'
};
const versioned$1 = [
    {
        minmax: [0, 3],
        types: objectSpread({
            // Enum was modified mid-flight -
            // https://github.com/paritytech/substrate/pull/10382/files#diff-e4e016b33a82268b6208dc974eea841bad47597865a749fee2f937eb6fdf67b4R498
            DispatchError: 'DispatchErrorPre6First'
        }, sharedTypes$1, mapXcmTypes('V0'))
    },
    {
        minmax: [4, 5],
        types: objectSpread({
            // As above, see https://github.com/polkadot-js/api/issues/5301
            DispatchError: 'DispatchErrorPre6First'
        }, sharedTypes$1, mapXcmTypes('V1'))
    },
    {
        // metadata V14
        minmax: [500, undefined],
        types: {
            Weight: 'WeightV1'
        }
    }
    // ,
    // {
    //   // weight v2 introduction
    //   minmax: [9300, undefined],
    //   types: {
    //     Weight: 'WeightV2'
    //   }
    // }
];
var statemint = versioned$1;

const sharedTypes = {
    // 16 validators
    CompactAssignments: 'CompactAssignmentsWith16',
    DispatchErrorModule: 'DispatchErrorModuleU8',
    RawSolution: 'RawSolutionWith16',
    // general
    Keys: 'SessionKeys6',
    ProxyType: {
        _enum: ['Any', 'NonTransfer', 'Staking', 'SudoBalances', 'IdentityJudgement', 'CancelProxy']
    },
    Weight: 'WeightV1'
};
const addrAccountIdTypes = {
    AccountInfo: 'AccountInfoWithRefCount',
    Address: 'AccountId',
    CompactAssignments: 'CompactAssignmentsWith16',
    DispatchErrorModule: 'DispatchErrorModuleU8',
    LookupSource: 'AccountId',
    Keys: 'SessionKeys5',
    RawSolution: 'RawSolutionWith16',
    ValidatorPrefs: 'ValidatorPrefsWithCommission'
};
const versioned = [
    {
        minmax: [1, 2],
        types: objectSpread({}, sharedTypes, addrAccountIdTypes, {
            CompactAssignments: 'CompactAssignmentsTo257',
            DispatchInfo: 'DispatchInfoTo244',
            Heartbeat: 'HeartbeatTo244',
            Multiplier: 'Fixed64',
            OpenTip: 'OpenTipTo225',
            RefCount: 'RefCountTo259',
            Weight: 'u32'
        })
    },
    {
        minmax: [3, 22],
        types: objectSpread({}, sharedTypes, addrAccountIdTypes, {
            CompactAssignments: 'CompactAssignmentsTo257',
            DispatchInfo: 'DispatchInfoTo244',
            Heartbeat: 'HeartbeatTo244',
            OpenTip: 'OpenTipTo225',
            RefCount: 'RefCountTo259'
        })
    },
    {
        minmax: [23, 42],
        types: objectSpread({}, sharedTypes, addrAccountIdTypes, {
            CompactAssignments: 'CompactAssignmentsTo257',
            DispatchInfo: 'DispatchInfoTo244',
            Heartbeat: 'HeartbeatTo244',
            RefCount: 'RefCountTo259'
        })
    },
    {
        minmax: [43, 44],
        types: objectSpread({}, sharedTypes, addrAccountIdTypes, {
            DispatchInfo: 'DispatchInfoTo244',
            Heartbeat: 'HeartbeatTo244',
            RefCount: 'RefCountTo259'
        })
    },
    {
        minmax: [45, 47],
        types: objectSpread({}, sharedTypes, addrAccountIdTypes)
    },
    {
        minmax: [48, 49],
        types: objectSpread({}, sharedTypes, {
            AccountInfo: 'AccountInfoWithDualRefCount'
        })
    },
    {
        minmax: [50, 9099],
        types: objectSpread({}, sharedTypes, mapXcmTypes('V0'))
    },
    {
        minmax: [9100, 9105],
        types: objectSpread({}, sharedTypes, mapXcmTypes('V1'))
    },
    {
        // metadata v14
        minmax: [9106, undefined],
        types: {
            Weight: 'WeightV1'
        }
    }
    // ,
    // {
    //   // weight v2 introduction
    //   minmax: [9300, undefined],
    //   types: {
    //     Weight: 'WeightV2'
    //   }
    // }
];
var westend = versioned;

const typesSpec = {
    'centrifuge-chain': centrifugeChain,
    kusama,
    node,
    'node-template': nodeTemplate,
    polkadot,
    rococo,
    shell,
    statemine: statemint,
    statemint,
    westend,
    westmint: statemint
};
var typesSpec$1 = typesSpec;

// Copyright (C) 2021-2023 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

var knownSubstrate = [
	{
		"prefix": 0,
		"network": "polkadot",
		"displayName": "Polkadot Relay Chain",
		"symbols": [
			"DOT"
		],
		"decimals": [
			10
		],
		"standardAccount": "*25519",
		"website": "https://polkadot.network"
	},
	{
		"prefix": 1,
		"network": "BareSr25519",
		"displayName": "Bare 32-bit Schnorr/Ristretto (S/R 25519) public key.",
		"symbols": [],
		"decimals": [],
		"standardAccount": "Sr25519",
		"website": null
	},
	{
		"prefix": 2,
		"network": "kusama",
		"displayName": "Kusama Relay Chain",
		"symbols": [
			"KSM"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://kusama.network"
	},
	{
		"prefix": 3,
		"network": "BareEd25519",
		"displayName": "Bare 32-bit Ed25519 public key.",
		"symbols": [],
		"decimals": [],
		"standardAccount": "Ed25519",
		"website": null
	},
	{
		"prefix": 4,
		"network": "katalchain",
		"displayName": "Katal Chain",
		"symbols": [],
		"decimals": [],
		"standardAccount": "*25519",
		"website": null
	},
	{
		"prefix": 5,
		"network": "astar",
		"displayName": "Astar Network",
		"symbols": [
			"ASTR"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://astar.network"
	},
	{
		"prefix": 6,
		"network": "bifrost",
		"displayName": "Bifrost",
		"symbols": [
			"BNC"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://bifrost.finance/"
	},
	{
		"prefix": 7,
		"network": "edgeware",
		"displayName": "Edgeware",
		"symbols": [
			"EDG"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://edgewa.re"
	},
	{
		"prefix": 8,
		"network": "karura",
		"displayName": "Karura",
		"symbols": [
			"KAR"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://karura.network/"
	},
	{
		"prefix": 9,
		"network": "reynolds",
		"displayName": "Laminar Reynolds Canary",
		"symbols": [
			"REY"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "http://laminar.network/"
	},
	{
		"prefix": 10,
		"network": "acala",
		"displayName": "Acala",
		"symbols": [
			"ACA"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://acala.network/"
	},
	{
		"prefix": 11,
		"network": "laminar",
		"displayName": "Laminar",
		"symbols": [
			"LAMI"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "http://laminar.network/"
	},
	{
		"prefix": 12,
		"network": "polymesh",
		"displayName": "Polymesh",
		"symbols": [
			"POLYX"
		],
		"decimals": [
			6
		],
		"standardAccount": "*25519",
		"website": "https://polymath.network/"
	},
	{
		"prefix": 13,
		"network": "integritee",
		"displayName": "Integritee",
		"symbols": [
			"TEER"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://integritee.network"
	},
	{
		"prefix": 14,
		"network": "totem",
		"displayName": "Totem",
		"symbols": [
			"TOTEM"
		],
		"decimals": [
			0
		],
		"standardAccount": "*25519",
		"website": "https://totemaccounting.com"
	},
	{
		"prefix": 15,
		"network": "synesthesia",
		"displayName": "Synesthesia",
		"symbols": [
			"SYN"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://synesthesia.network/"
	},
	{
		"prefix": 16,
		"network": "kulupu",
		"displayName": "Kulupu",
		"symbols": [
			"KLP"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://kulupu.network/"
	},
	{
		"prefix": 17,
		"network": "dark",
		"displayName": "Dark Mainnet",
		"symbols": [],
		"decimals": [],
		"standardAccount": "*25519",
		"website": null
	},
	{
		"prefix": 18,
		"network": "darwinia",
		"displayName": "Darwinia Network",
		"symbols": [
			"RING"
		],
		"decimals": [
			18
		],
		"standardAccount": "secp256k1",
		"website": "https://darwinia.network"
	},
	{
		"prefix": 19,
		"network": "watr",
		"displayName": "Watr Protocol",
		"symbols": [
			"WATR"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://www.watr.org"
	},
	{
		"prefix": 20,
		"network": "stafi",
		"displayName": "Stafi",
		"symbols": [
			"FIS"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://stafi.io"
	},
	{
		"prefix": 21,
		"network": "karmachain",
		"displayName": "Karmacoin",
		"symbols": [
			"KCOIN"
		],
		"decimals": [
			6
		],
		"standardAccount": "*25519",
		"website": "https://karmaco.in"
	},
	{
		"prefix": 22,
		"network": "dock-pos-mainnet",
		"displayName": "Dock Mainnet",
		"symbols": [
			"DCK"
		],
		"decimals": [
			6
		],
		"standardAccount": "*25519",
		"website": "https://dock.io"
	},
	{
		"prefix": 23,
		"network": "shift",
		"displayName": "ShiftNrg",
		"symbols": [],
		"decimals": [],
		"standardAccount": "*25519",
		"website": null
	},
	{
		"prefix": 24,
		"network": "zero",
		"displayName": "ZERO",
		"symbols": [
			"ZERO"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://zero.io"
	},
	{
		"prefix": 25,
		"network": "zero-alphaville",
		"displayName": "ZERO Alphaville",
		"symbols": [
			"ZERO"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://zero.io"
	},
	{
		"prefix": 26,
		"network": "jupiter",
		"displayName": "Jupiter",
		"symbols": [
			"jDOT"
		],
		"decimals": [
			10
		],
		"standardAccount": "*25519",
		"website": "https://jupiter.patract.io"
	},
	{
		"prefix": 27,
		"network": "kabocha",
		"displayName": "Kabocha",
		"symbols": [
			"KAB"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://kabocha.network"
	},
	{
		"prefix": 28,
		"network": "subsocial",
		"displayName": "Subsocial",
		"symbols": [],
		"decimals": [],
		"standardAccount": "*25519",
		"website": null
	},
	{
		"prefix": 29,
		"network": "cord",
		"displayName": "CORD Network",
		"symbols": [
			"DHI",
			"WAY"
		],
		"decimals": [
			12,
			12
		],
		"standardAccount": "*25519",
		"website": "https://cord.network/"
	},
	{
		"prefix": 30,
		"network": "phala",
		"displayName": "Phala Network",
		"symbols": [
			"PHA"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://phala.network"
	},
	{
		"prefix": 31,
		"network": "litentry",
		"displayName": "Litentry Network",
		"symbols": [
			"LIT"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://litentry.com/"
	},
	{
		"prefix": 32,
		"network": "robonomics",
		"displayName": "Robonomics",
		"symbols": [
			"XRT"
		],
		"decimals": [
			9
		],
		"standardAccount": "*25519",
		"website": "https://robonomics.network"
	},
	{
		"prefix": 33,
		"network": "datahighway",
		"displayName": "DataHighway",
		"symbols": [],
		"decimals": [],
		"standardAccount": "*25519",
		"website": null
	},
	{
		"prefix": 34,
		"network": "ares",
		"displayName": "Ares Protocol",
		"symbols": [
			"ARES"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://www.aresprotocol.com/"
	},
	{
		"prefix": 35,
		"network": "vln",
		"displayName": "Valiu Liquidity Network",
		"symbols": [
			"USDv"
		],
		"decimals": [
			15
		],
		"standardAccount": "*25519",
		"website": "https://valiu.com/"
	},
	{
		"prefix": 36,
		"network": "centrifuge",
		"displayName": "Centrifuge Chain",
		"symbols": [
			"CFG"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://centrifuge.io/"
	},
	{
		"prefix": 37,
		"network": "nodle",
		"displayName": "Nodle Chain",
		"symbols": [
			"NODL"
		],
		"decimals": [
			11
		],
		"standardAccount": "*25519",
		"website": "https://nodle.io/"
	},
	{
		"prefix": 38,
		"network": "kilt",
		"displayName": "KILT Spiritnet",
		"symbols": [
			"KILT"
		],
		"decimals": [
			15
		],
		"standardAccount": "*25519",
		"website": "https://kilt.io/"
	},
	{
		"prefix": 39,
		"network": "mathchain",
		"displayName": "MathChain mainnet",
		"symbols": [
			"MATH"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://mathwallet.org"
	},
	{
		"prefix": 40,
		"network": "mathchain-testnet",
		"displayName": "MathChain testnet",
		"symbols": [
			"MATH"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://mathwallet.org"
	},
	{
		"prefix": 41,
		"network": "poli",
		"displayName": "Polimec Chain",
		"symbols": [],
		"decimals": [],
		"standardAccount": "*25519",
		"website": "https://polimec.io/"
	},
	{
		"prefix": 42,
		"network": "substrate",
		"displayName": "Substrate",
		"symbols": [],
		"decimals": [],
		"standardAccount": "*25519",
		"website": "https://substrate.io/"
	},
	{
		"prefix": 43,
		"network": "BareSecp256k1",
		"displayName": "Bare 32-bit ECDSA SECP-256k1 public key.",
		"symbols": [],
		"decimals": [],
		"standardAccount": "secp256k1",
		"website": null
	},
	{
		"prefix": 44,
		"network": "chainx",
		"displayName": "ChainX",
		"symbols": [
			"PCX"
		],
		"decimals": [
			8
		],
		"standardAccount": "*25519",
		"website": "https://chainx.org/"
	},
	{
		"prefix": 45,
		"network": "uniarts",
		"displayName": "UniArts Network",
		"symbols": [
			"UART",
			"UINK"
		],
		"decimals": [
			12,
			12
		],
		"standardAccount": "*25519",
		"website": "https://uniarts.me"
	},
	{
		"prefix": 46,
		"network": "reserved46",
		"displayName": "This prefix is reserved.",
		"symbols": [],
		"decimals": [],
		"standardAccount": null,
		"website": null
	},
	{
		"prefix": 47,
		"network": "reserved47",
		"displayName": "This prefix is reserved.",
		"symbols": [],
		"decimals": [],
		"standardAccount": null,
		"website": null
	},
	{
		"prefix": 48,
		"network": "neatcoin",
		"displayName": "Neatcoin Mainnet",
		"symbols": [
			"NEAT"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://neatcoin.org"
	},
	{
		"prefix": 49,
		"network": "picasso",
		"displayName": "Picasso",
		"symbols": [
			"PICA"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://picasso.composable.finance"
	},
	{
		"prefix": 50,
		"network": "composable",
		"displayName": "Composable Finance",
		"symbols": [
			"LAYR"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://composable.finance"
	},
	{
		"prefix": 51,
		"network": "oak",
		"displayName": "OAK Network",
		"symbols": [
			"OAK",
			"TUR"
		],
		"decimals": [
			10,
			10
		],
		"standardAccount": "*25519",
		"website": "https://oak.tech"
	},
	{
		"prefix": 52,
		"network": "KICO",
		"displayName": "KICO",
		"symbols": [
			"KICO"
		],
		"decimals": [
			14
		],
		"standardAccount": "*25519",
		"website": "https://dico.io"
	},
	{
		"prefix": 53,
		"network": "DICO",
		"displayName": "DICO",
		"symbols": [
			"DICO"
		],
		"decimals": [
			14
		],
		"standardAccount": "*25519",
		"website": "https://dico.io"
	},
	{
		"prefix": 54,
		"network": "cere",
		"displayName": "Cere Network",
		"symbols": [
			"CERE"
		],
		"decimals": [
			10
		],
		"standardAccount": "*25519",
		"website": "https://cere.network"
	},
	{
		"prefix": 55,
		"network": "xxnetwork",
		"displayName": "xx network",
		"symbols": [
			"XX"
		],
		"decimals": [
			9
		],
		"standardAccount": "*25519",
		"website": "https://xx.network"
	},
	{
		"prefix": 56,
		"network": "pendulum",
		"displayName": "Pendulum chain",
		"symbols": [
			"PEN"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://pendulumchain.org/"
	},
	{
		"prefix": 57,
		"network": "amplitude",
		"displayName": "Amplitude chain",
		"symbols": [
			"AMPE"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://pendulumchain.org/"
	},
	{
		"prefix": 63,
		"network": "hydradx",
		"displayName": "HydraDX",
		"symbols": [
			"HDX"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://hydradx.io"
	},
	{
		"prefix": 64,
		"network": "ewx",
		"displayName": "Energy Web X",
		"symbols": [
			"EWT"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://www.energyweb.org"
	},
	{
		"prefix": 65,
		"network": "aventus",
		"displayName": "Aventus Mainnet",
		"symbols": [
			"AVT"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://aventus.io"
	},
	{
		"prefix": 66,
		"network": "crust",
		"displayName": "Crust Network",
		"symbols": [
			"CRU"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://crust.network"
	},
	{
		"prefix": 67,
		"network": "genshiro",
		"displayName": "Genshiro Network",
		"symbols": [
			"GENS",
			"EQD",
			"LPT0"
		],
		"decimals": [
			9,
			9,
			9
		],
		"standardAccount": "*25519",
		"website": "https://genshiro.equilibrium.io"
	},
	{
		"prefix": 68,
		"network": "equilibrium",
		"displayName": "Equilibrium Network",
		"symbols": [
			"EQ"
		],
		"decimals": [
			9
		],
		"standardAccount": "*25519",
		"website": "https://equilibrium.io"
	},
	{
		"prefix": 69,
		"network": "sora",
		"displayName": "SORA Network",
		"symbols": [
			"XOR"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://sora.org"
	},
	{
		"prefix": 71,
		"network": "p3d",
		"displayName": "3DP network",
		"symbols": [
			"P3D"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://3dpass.org"
	},
	{
		"prefix": 72,
		"network": "p3dt",
		"displayName": "3DP test network",
		"symbols": [
			"P3Dt"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://3dpass.org"
	},
	{
		"prefix": 73,
		"network": "zeitgeist",
		"displayName": "Zeitgeist",
		"symbols": [
			"ZTG"
		],
		"decimals": [
			10
		],
		"standardAccount": "*25519",
		"website": "https://zeitgeist.pm"
	},
	{
		"prefix": 77,
		"network": "manta",
		"displayName": "Manta network",
		"symbols": [
			"MANTA"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://manta.network"
	},
	{
		"prefix": 78,
		"network": "calamari",
		"displayName": "Calamari: Manta Canary Network",
		"symbols": [
			"KMA"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://manta.network"
	},
	{
		"prefix": 81,
		"network": "sora_dot_para",
		"displayName": "SORA Polkadot Parachain",
		"symbols": [
			"XOR"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://sora.org"
	},
	{
		"prefix": 88,
		"network": "polkadex",
		"displayName": "Polkadex Mainnet",
		"symbols": [
			"PDEX"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://polkadex.trade"
	},
	{
		"prefix": 89,
		"network": "polkadexparachain",
		"displayName": "Polkadex Parachain",
		"symbols": [
			"PDEX"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://polkadex.trade"
	},
	{
		"prefix": 90,
		"network": "frequency",
		"displayName": "Frequency",
		"symbols": [
			"FRQCY"
		],
		"decimals": [
			8
		],
		"standardAccount": "*25519",
		"website": "https://www.frequency.xyz"
	},
	{
		"prefix": 92,
		"network": "anmol",
		"displayName": "Anmol Network",
		"symbols": [
			"ANML"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://anmol.network/"
	},
	{
		"prefix": 93,
		"network": "fragnova",
		"displayName": "Fragnova Network",
		"symbols": [
			"NOVA"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://fragnova.com"
	},
	{
		"prefix": 98,
		"network": "polkasmith",
		"displayName": "PolkaSmith Canary Network",
		"symbols": [
			"PKS"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://polkafoundry.com"
	},
	{
		"prefix": 99,
		"network": "polkafoundry",
		"displayName": "PolkaFoundry Network",
		"symbols": [
			"PKF"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://polkafoundry.com"
	},
	{
		"prefix": 100,
		"network": "ibtida",
		"displayName": "Anmol Network Ibtida Canary network",
		"symbols": [
			"IANML"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://anmol.network/"
	},
	{
		"prefix": 101,
		"network": "origintrail-parachain",
		"displayName": "OriginTrail Parachain",
		"symbols": [
			"OTP"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://parachain.origintrail.io/"
	},
	{
		"prefix": 105,
		"network": "pontem-network",
		"displayName": "Pontem Network",
		"symbols": [
			"PONT"
		],
		"decimals": [
			10
		],
		"standardAccount": "*25519",
		"website": "https://pontem.network"
	},
	{
		"prefix": 110,
		"network": "heiko",
		"displayName": "Heiko",
		"symbols": [
			"HKO"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://parallel.fi/"
	},
	{
		"prefix": 113,
		"network": "integritee-incognito",
		"displayName": "Integritee Incognito",
		"symbols": [],
		"decimals": [],
		"standardAccount": "*25519",
		"website": "https://integritee.network"
	},
	{
		"prefix": 117,
		"network": "tinker",
		"displayName": "Tinker",
		"symbols": [
			"TNKR"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://invarch.network"
	},
	{
		"prefix": 126,
		"network": "joystream",
		"displayName": "Joystream",
		"symbols": [
			"JOY"
		],
		"decimals": [
			10
		],
		"standardAccount": "*25519",
		"website": "https://www.joystream.org"
	},
	{
		"prefix": 128,
		"network": "clover",
		"displayName": "Clover Finance",
		"symbols": [
			"CLV"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://clover.finance"
	},
	{
		"prefix": 129,
		"network": "dorafactory-polkadot",
		"displayName": "Dorafactory Polkadot Network",
		"symbols": [
			"DORA"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://dorafactory.org"
	},
	{
		"prefix": 131,
		"network": "litmus",
		"displayName": "Litmus Network",
		"symbols": [
			"LIT"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://litentry.com/"
	},
	{
		"prefix": 136,
		"network": "altair",
		"displayName": "Altair",
		"symbols": [
			"AIR"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://centrifuge.io/"
	},
	{
		"prefix": 137,
		"network": "vara",
		"displayName": "Vara Network",
		"symbols": [
			"VARA"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://vara-network.io/"
	},
	{
		"prefix": 172,
		"network": "parallel",
		"displayName": "Parallel",
		"symbols": [
			"PARA"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://parallel.fi/"
	},
	{
		"prefix": 252,
		"network": "social-network",
		"displayName": "Social Network",
		"symbols": [
			"NET"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://social.network"
	},
	{
		"prefix": 255,
		"network": "quartz_mainnet",
		"displayName": "QUARTZ by UNIQUE",
		"symbols": [
			"QTZ"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://unique.network"
	},
	{
		"prefix": 268,
		"network": "pioneer_network",
		"displayName": "Pioneer Network by Bit.Country",
		"symbols": [
			"NEER"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://bit.country"
	},
	{
		"prefix": 420,
		"network": "sora_kusama_para",
		"displayName": "SORA Kusama Parachain",
		"symbols": [
			"XOR"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://sora.org"
	},
	{
		"prefix": 440,
		"network": "allfeat_network",
		"displayName": "Allfeat Network",
		"symbols": [
			"AFT"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://allfeat.network"
	},
	{
		"prefix": 666,
		"network": "metaquity_network",
		"displayName": "Metaquity Network",
		"symbols": [
			"MQTY"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://metaquity.xyz/"
	},
	{
		"prefix": 789,
		"network": "geek",
		"displayName": "GEEK Network",
		"symbols": [
			"GEEK"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://geek.gl"
	},
	{
		"prefix": 995,
		"network": "ternoa",
		"displayName": "Ternoa",
		"symbols": [
			"CAPS"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://www.ternoa.network"
	},
	{
		"prefix": 1110,
		"network": "efinity",
		"displayName": "Efinity",
		"symbols": [
			"EFI"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://efinity.io/"
	},
	{
		"prefix": 1221,
		"network": "peaq",
		"displayName": "Peaq Network",
		"symbols": [
			"PEAQ"
		],
		"decimals": [
			18
		],
		"standardAccount": "Sr25519",
		"website": "https://www.peaq.network/"
	},
	{
		"prefix": 1222,
		"network": "krest",
		"displayName": "Krest Network",
		"symbols": [
			"KREST"
		],
		"decimals": [
			18
		],
		"standardAccount": "Sr25519",
		"website": "https://www.peaq.network/"
	},
	{
		"prefix": 1284,
		"network": "moonbeam",
		"displayName": "Moonbeam",
		"symbols": [
			"GLMR"
		],
		"decimals": [
			18
		],
		"standardAccount": "secp256k1",
		"website": "https://moonbeam.network"
	},
	{
		"prefix": 1285,
		"network": "moonriver",
		"displayName": "Moonriver",
		"symbols": [
			"MOVR"
		],
		"decimals": [
			18
		],
		"standardAccount": "secp256k1",
		"website": "https://moonbeam.network"
	},
	{
		"prefix": 1328,
		"network": "ajuna",
		"displayName": "Ajuna Network",
		"symbols": [
			"AJUN"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://ajuna.io"
	},
	{
		"prefix": 1337,
		"network": "bajun",
		"displayName": "Bajun Network",
		"symbols": [
			"BAJU"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://ajuna.io"
	},
	{
		"prefix": 1516,
		"network": "societal",
		"displayName": "Societal",
		"symbols": [
			"SCTL"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://www.sctl.xyz"
	},
	{
		"prefix": 1985,
		"network": "seals",
		"displayName": "Seals Network",
		"symbols": [
			"SEAL"
		],
		"decimals": [
			9
		],
		"standardAccount": "*25519",
		"website": "https://seals.app"
	},
	{
		"prefix": 2007,
		"network": "kapex",
		"displayName": "Kapex",
		"symbols": [
			"KAPEX"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://totemaccounting.com"
	},
	{
		"prefix": 2009,
		"network": "cloudwalk_mainnet",
		"displayName": "CloudWalk Network Mainnet",
		"symbols": [
			"CWN"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://explorer.mainnet.cloudwalk.io"
	},
	{
		"prefix": 2021,
		"network": "logion",
		"displayName": "logion network",
		"symbols": [
			"LGNT"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://logion.network"
	},
	{
		"prefix": 2032,
		"network": "interlay",
		"displayName": "Interlay",
		"symbols": [
			"INTR"
		],
		"decimals": [
			10
		],
		"standardAccount": "*25519",
		"website": "https://interlay.io/"
	},
	{
		"prefix": 2092,
		"network": "kintsugi",
		"displayName": "Kintsugi",
		"symbols": [
			"KINT"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://interlay.io/"
	},
	{
		"prefix": 2106,
		"network": "bitgreen",
		"displayName": "Bitgreen",
		"symbols": [
			"BBB"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://bitgreen.org/"
	},
	{
		"prefix": 2112,
		"network": "chainflip",
		"displayName": "Chainflip",
		"symbols": [
			"FLIP"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://chainflip.io/"
	},
	{
		"prefix": 2199,
		"network": "moonsama",
		"displayName": "Moonsama",
		"symbols": [
			"SAMA"
		],
		"decimals": [
			18
		],
		"standardAccount": "secp256k1",
		"website": "https://moonsama.com"
	},
	{
		"prefix": 2206,
		"network": "ICE",
		"displayName": "ICE Network",
		"symbols": [
			"ICY"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://icenetwork.io"
	},
	{
		"prefix": 2207,
		"network": "SNOW",
		"displayName": "SNOW: ICE Canary Network",
		"symbols": [
			"ICZ"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://icenetwork.io"
	},
	{
		"prefix": 2254,
		"network": "subspace_testnet",
		"displayName": "Subspace testnet",
		"symbols": [
			"tSSC"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://subspace.network"
	},
	{
		"prefix": 3333,
		"network": "peerplays",
		"displayName": "Peerplays",
		"symbols": [
			"PPY"
		],
		"decimals": [
			18
		],
		"standardAccount": "secp256k1",
		"website": "https://www.peerplays.com/"
	},
	{
		"prefix": 4006,
		"network": "tangle",
		"displayName": "Tangle Network",
		"symbols": [
			"TNT"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://www.webb.tools/"
	},
	{
		"prefix": 4450,
		"network": "g1",
		"displayName": "Ğ1",
		"symbols": [
			"G1"
		],
		"decimals": [
			2
		],
		"standardAccount": "*25519",
		"website": "https://duniter.org"
	},
	{
		"prefix": 5234,
		"network": "humanode",
		"displayName": "Humanode Network",
		"symbols": [
			"HMND"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://humanode.io"
	},
	{
		"prefix": 6094,
		"network": "subspace",
		"displayName": "Subspace",
		"symbols": [
			"SSC"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://subspace.network"
	},
	{
		"prefix": 7007,
		"network": "tidefi",
		"displayName": "Tidefi",
		"symbols": [
			"TDFY"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://tidefi.com"
	},
	{
		"prefix": 7013,
		"network": "gm",
		"displayName": "GM",
		"symbols": [
			"FREN",
			"GM",
			"GN"
		],
		"decimals": [
			12,
			0,
			0
		],
		"standardAccount": "*25519",
		"website": "https://gmordie.com"
	},
	{
		"prefix": 7306,
		"network": "krigan",
		"displayName": "Krigan Network",
		"symbols": [
			"KRGN"
		],
		"decimals": [
			9
		],
		"standardAccount": "*25519",
		"website": "https://krigan.network"
	},
	{
		"prefix": 7391,
		"network": "unique_mainnet",
		"displayName": "Unique Network",
		"symbols": [
			"UNQ"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://unique.network"
	},
	{
		"prefix": 8866,
		"network": "golden_gate",
		"displayName": "Golden Gate",
		"symbols": [
			"GGX"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://ggxchain.io/"
	},
	{
		"prefix": 8883,
		"network": "sapphire_mainnet",
		"displayName": "Sapphire by Unique",
		"symbols": [
			"QTZ"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://unique.network"
	},
	{
		"prefix": 8886,
		"network": "golden_gate_sydney",
		"displayName": "Golden Gate Sydney",
		"symbols": [
			"GGXT"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://ggxchain.io/"
	},
	{
		"prefix": 9072,
		"network": "hashed",
		"displayName": "Hashed Network",
		"symbols": [
			"HASH"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://hashed.network"
	},
	{
		"prefix": 9807,
		"network": "dentnet",
		"displayName": "DENTNet",
		"symbols": [
			"DENTX"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://www.dentnet.io"
	},
	{
		"prefix": 9935,
		"network": "t3rn",
		"displayName": "t3rn",
		"symbols": [
			"TRN"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://t3rn.io/"
	},
	{
		"prefix": 10041,
		"network": "basilisk",
		"displayName": "Basilisk",
		"symbols": [
			"BSX"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://bsx.fi"
	},
	{
		"prefix": 11330,
		"network": "cess-testnet",
		"displayName": "CESS Testnet",
		"symbols": [
			"TCESS"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://cess.cloud"
	},
	{
		"prefix": 11331,
		"network": "cess",
		"displayName": "CESS",
		"symbols": [
			"CESS"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://cess.cloud"
	},
	{
		"prefix": 11486,
		"network": "luhn",
		"displayName": "Luhn Network",
		"symbols": [
			"LUHN"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://luhn.network"
	},
	{
		"prefix": 11820,
		"network": "contextfree",
		"displayName": "Automata ContextFree",
		"symbols": [
			"CTX"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://ata.network"
	},
	{
		"prefix": 12155,
		"network": "impact",
		"displayName": "Impact Protocol Network",
		"symbols": [
			"BSTY"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://impactprotocol.network/"
	},
	{
		"prefix": 12191,
		"network": "nftmart",
		"displayName": "NFTMart",
		"symbols": [
			"NMT"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://nftmart.io"
	},
	{
		"prefix": 13116,
		"network": "bittensor",
		"displayName": "Bittensor",
		"symbols": [
			"TAO"
		],
		"decimals": [
			9
		],
		"standardAccount": "*25519",
		"website": "https://bittensor.com"
	},
	{
		"prefix": 14697,
		"network": "goro",
		"displayName": "GORO Network",
		"symbols": [
			"GORO"
		],
		"decimals": [
			9
		],
		"standardAccount": "*25519",
		"website": "https://goro.network"
	}
];

const knownGenesis = {
    acala: [
        '0xfc41b9bd8ef8fe53d58c7ea67c794c7ec9a73daf05e6d54b14ff6342c99ba64c'
    ],
    ajuna: [
        '0xe358eb1d11b31255a286c12e44fe6780b7edb171d657905a97e39f71d9c6c3ee'
    ],
    'aleph-node': [
        '0x70255b4d28de0fc4e1a193d7e175ad1ccef431598211c55538f1018651a0344e'
    ],
    astar: [
        '0x9eb76c5184c4ab8679d2d5d819fdf90b9c001403e9e17da2e14b6d8aec4029c6'
    ],
    basilisk: [
        '0xa85cfb9b9fd4d622a5b28289a02347af987d8f73fa3108450e2b4a11c1ce5755'
    ],
    bifrost: [
        '0x262e1b2ad728475fd6fe88e62d34c200abe6fd693931ddad144059b1eb884e5b'
    ],
    'bifrost-kusama': [
        '0x9f28c6a68e0fc9646eff64935684f6eeeece527e37bbe1f213d22caa1d9d6bed'
    ],
    bittensor: [
        '0x2f0555cc76fc2840a25a6ea3b9637146806f1f44b090c175ffde2a7e5ab36c03'
    ],
    centrifuge: [
        '0xb3db41421702df9a7fcac62b53ffeac85f7853cc4e689e0b93aeb3db18c09d82',
        '0x67dddf2673b69e5f875f6f25277495834398eafd67f492e09f3f3345e003d1b5'
    ],
    composable: [
        '0xdaab8df776eb52ec604a5df5d388bb62a050a0aaec4556a64265b9d42755552d'
    ],
    darwinia: [
        '0xe71578b37a7c799b0ab4ee87ffa6f059a6b98f71f06fb8c84a8d88013a548ad6'
    ],
    'dock-mainnet': [
        '0x6bfe24dca2a3be10f22212678ac13a6446ec764103c0f3471c71609eac384aae',
        '0xf73467c6544aa68df2ee546b135f955c46b90fa627e9b5d7935f41061bb8a5a9'
    ],
    edgeware: [
        '0x742a2ca70c2fda6cee4f8df98d64c4c670a052d9568058982dad9d5a7a135c5b'
    ],
    equilibrium: [
        '0x6f1a800de3daff7f5e037ddf66ab22ce03ab91874debeddb1086f5f7dbd48925'
    ],
    genshiro: [
        '0x9b8cefc0eb5c568b527998bdd76c184e2b76ae561be76e4667072230217ea243'
    ],
    hydradx: [
        '0xafdc188f45c71dacbaa0b62e16a91f726c7b8699a9748cdf715459de6b7f366d',
        '0xd2a620c27ec5cbc5621ff9a522689895074f7cca0d08e7134a7804e1a3ba86fc',
        '0x10af6e84234477d84dc572bac0789813b254aa490767ed06fb9591191d1073f9',
        '0x3d75507dd46301767e601265791da1d9cb47b6ebc94e87347b635e5bf58bd047',
        '0x0ed32bfcab4a83517fac88f2aa7cbc2f88d3ab93be9a12b6188a036bf8a943c2' // Snakenet Gen1
    ],
    'interlay-parachain': [
        '0xbf88efe70e9e0e916416e8bed61f2b45717f517d7f3523e33c7b001e5ffcbc72'
    ],
    karura: [
        '0xbaf5aabe40646d11f0ee8abbdc64f4a4b7674925cba08e4a05ff9ebed6e2126b'
    ],
    khala: [
        '0xd43540ba6d3eb4897c28a77d48cb5b729fea37603cbbfc7a86a73b72adb3be8d'
    ],
    kulupu: [
        '0xf7a99d3cb92853d00d5275c971c132c074636256583fee53b3bbe60d7b8769ba'
    ],
    kusama: [
        '0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe',
        '0xe3777fa922cafbff200cadeaea1a76bd7898ad5b89f7848999058b50e715f636',
        '0x3fd7b9eb6a00376e5be61f01abb429ffb0b104be05eaff4d458da48fcd425baf' // Kusama CC1
    ],
    nodle: [
        '0x97da7ede98d7bad4e36b4d734b6055425a3be036da2a332ea5a7037656427a21'
    ],
    origintrail: [
        '0xe7e0962324a3b86c83404dbea483f25fb5dab4c224791c81b756cfc948006174'
    ],
    p3d: [
        '0x6c5894837ad89b6d92b114a2fb3eafa8fe3d26a54848e3447015442cd6ef4e66'
    ],
    parallel: [
        '0xe61a41c53f5dcd0beb09df93b34402aada44cb05117b71059cce40a2723a4e97'
    ],
    pendulum: [
        '0x5d3c298622d5634ed019bf61ea4b71655030015bde9beb0d6a24743714462c86'
    ],
    phala: [
        '0x1bb969d85965e4bb5a651abbedf21a54b6b31a21f66b5401cc3f1e286268d736'
    ],
    picasso: [
        '0x6811a339673c9daa897944dcdac99c6e2939cc88245ed21951a0a3c9a2be75bc',
        '0xe8e7f0f4c4f5a00720b4821dbfddefea7490bcf0b19009961cc46957984e2c1c'
    ],
    polkadex: [
        '0x3920bcb4960a1eef5580cd5367ff3f430eef052774f78468852f7b9cb39f8a3c'
    ],
    polkadot: [
        '0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3'
    ],
    polymesh: [
        '0x6fbd74e5e1d0a61d52ccfe9d4adaed16dd3a7caa37c6bc4d0c2fa12e8b2f4063'
    ],
    rococo: [
        '0x6408de7737c59c238890533af25896a2c20608d8b380bb01029acb392781063e',
        '0xaaf2cd1b74b5f726895921259421b534124726263982522174147046b8827897',
        '0x037f5f3c8e67b314062025fc886fcd6238ea25a4a9b45dce8d246815c9ebe770',
        '0xc196f81260cf1686172b47a79cf002120735d7cb0eb1474e8adce56618456fff',
        '0xf6e9983c37baf68846fedafe21e56718790e39fb1c582abc408b81bc7b208f9a',
        '0x5fce687da39305dfe682b117f0820b319348e8bb37eb16cf34acbf6a202de9d9',
        '0xe7c3d5edde7db964317cd9b51a3a059d7cd99f81bdbce14990047354334c9779',
        '0x1611e1dbf0405379b861e2e27daa90f480b2e6d3682414a80835a52e8cb8a215',
        '0x343442f12fa715489a8714e79a7b264ea88c0d5b8c66b684a7788a516032f6b9',
        '0x78bcd530c6b3a068bc17473cf5d2aff9c287102bed9af3ae3c41c33b9d6c6147',
        '0x47381ee0697153d64404fc578392c8fd5cba9073391908f46c888498415647bd',
        '0x19c0e4fa8ab75f5ac7865e0b8f74ff91eb9a100d336f423cd013a8befba40299'
    ],
    sora: [
        '0x7e4e32d0feafd4f9c9414b0be86373f9a1efa904809b683453a9af6856d38ad5'
    ],
    stafi: [
        '0x290a4149f09ea0e402c74c1c7e96ae4239588577fe78932f94f5404c68243d80'
    ],
    statemine: [
        '0x48239ef607d7928874027a43a67689209727dfb3d3dc5e5b03a39bdc2eda771a'
    ],
    statemint: [
        '0x68d56f15f85d3136970ec16946040bc1752654e906147f7e43e9d539d7c3de2f'
    ],
    subsocial: [
        '0x0bd72c1c305172e1275278aaeb3f161e02eccb7a819e63f62d47bd53a28189f8'
    ],
    ternoa: [
        '0x6859c81ca95ef624c9dfe4dc6e3381c33e5d6509e35e147092bfbc780f777c4e'
    ],
    unique: [
        '0x84322d9cddbf35088f1e54e9a85c967a41a56a4f43445768125e61af166c7d31'
    ],
    vtb: [
        '0x286bc8414c7000ce1d6ee6a834e29a54c1784814b76243eb77ed0b2c5573c60f',
        '0x7483b89572fb2bd687c7b9a93b242d0b237f9aba463aba07ec24503931038aaa'
    ],
    westend: [
        '0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e'
    ],
    xxnetwork: [
        '0x50dd5d206917bf10502c68fb4d18a59fc8aa31586f4e8856b493e43544aa82aa'
    ]
};

const knownIcon = {
    centrifuge: 'polkadot',
    kusama: 'polkadot',
    polkadot: 'polkadot',
    sora: 'polkadot',
    statemine: 'polkadot',
    statemint: 'polkadot',
    westmint: 'polkadot'
};

const knownLedger = {
    acala: 0x00000313,
    ajuna: 0x00000162,
    'aleph-node': 0x00000283,
    astar: 0x0000032a,
    bifrost: 0x00000314,
    'bifrost-kusama': 0x00000314,
    centrifuge: 0x000002eb,
    composable: 0x00000162,
    darwinia: 0x00000162,
    'dock-mainnet': 0x00000252,
    edgeware: 0x0000020b,
    equilibrium: 0x05f5e0fd,
    genshiro: 0x05f5e0fc,
    hydradx: 0x00000162,
    'interlay-parachain': 0x00000162,
    karura: 0x000002ae,
    khala: 0x000001b2,
    kusama: 0x000001b2,
    nodle: 0x000003eb,
    origintrail: 0x00000162,
    parallel: 0x00000162,
    pendulum: 0x00000162,
    phala: 0x00000162,
    picasso: 0x000001b2,
    polkadex: 0x0000031f,
    polkadot: 0x00000162,
    polymesh: 0x00000253,
    sora: 0x00000269,
    stafi: 0x0000038b,
    statemine: 0x000001b2,
    statemint: 0x00000162,
    ternoa: 0x00003e3,
    unique: 0x00000162,
    vtb: 0x000002b6,
    xxnetwork: 0x000007a3
};

const knownTestnet = {
    '': true,
    'cess-testnet': true,
    'dock-testnet': true,
    jupiter: true,
    'mathchain-testnet': true,
    p3dt: true,
    subspace_testnet: true,
    'zero-alphaville': true
};

const UNSORTED = [0, 2, 42];
const TESTNETS = ['testnet'];
function toExpanded(o) {
    const network = o.network || '';
    const nameParts = network.replace(/_/g, '-').split('-');
    const n = o;
    // ledger additions
    n.slip44 = knownLedger[network];
    n.hasLedgerSupport = !!n.slip44;
    // general items
    n.genesisHash = knownGenesis[network] || [];
    n.icon = knownIcon[network] || 'substrate';
    // filtering
    n.isTestnet = !!knownTestnet[network] || TESTNETS.includes(nameParts[nameParts.length - 1]);
    n.isIgnored = n.isTestnet || (!(o.standardAccount &&
        o.decimals && o.decimals.length &&
        o.symbols && o.symbols.length) &&
        o.prefix !== 42);
    return n;
}
function filterSelectable({ genesisHash, prefix }) {
    return !!genesisHash.length || prefix === 42;
}
function filterAvailable(n) {
    return !n.isIgnored && !!n.network;
}
function sortNetworks(a, b) {
    const isUnSortedA = UNSORTED.includes(a.prefix);
    const isUnSortedB = UNSORTED.includes(b.prefix);
    return isUnSortedA === isUnSortedB
        ? isUnSortedA
            ? 0
            : a.displayName.localeCompare(b.displayName)
        : isUnSortedA
            ? -1
            : 1;
}
const allNetworks = knownSubstrate.map(toExpanded);
const availableNetworks = allNetworks.filter(filterAvailable).sort(sortNetworks);
const selectableNetworks = availableNetworks.filter(filterSelectable);

const upgrades$6 = [
    [
        0,
        1020,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        26669,
        1021,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        38245,
        1022,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        54248,
        1023,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        59659,
        1024,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        67651,
        1025,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        82191,
        1027,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        83238,
        1028,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        101503,
        1029,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        203466,
        1030,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        295787,
        1031,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        461692,
        1032,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        504329,
        1033,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        569327,
        1038,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        587687,
        1039,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        653183,
        1040,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        693488,
        1042,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        901442,
        1045,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1375086,
        1050,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1445458,
        1051,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1472960,
        1052,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1475648,
        1053,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1491596,
        1054,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1574408,
        1055,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2064961,
        1058,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2201991,
        1062,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2671528,
        2005,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2704202,
        2007,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2728002,
        2008,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2832534,
        2011,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2962294,
        2012,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3240000,
        2013,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3274408,
        2015,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3323565,
        2019,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3534175,
        2022,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3860281,
        2023,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        4143129,
        2024,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        4401242,
        2025,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        4841367,
        2026,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5961600,
        2027,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6137912,
        2028,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6561855,
        2029,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7100891,
        2030,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7468792,
        9010,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7668600,
        9030,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7812476,
        9040,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        8010981,
        9050,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        8073833,
        9070,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        8555825,
        9080,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        8945245,
        9090,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9611377,
        9100,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9625129,
        9111,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9866422,
        9122,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10403784,
        9130,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10960765,
        9150,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11006614,
        9151,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11404482,
        9160,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11601803,
        9170,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        12008022,
        9180,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        12405451,
        9190,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        12665416,
        9200,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        12909508,
        9220,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        13109752,
        9230,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        13555777,
        9250,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        13727747,
        9260,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        14248044,
        9271,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        14433840,
        9280,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        14645900,
        9291,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        15048375,
        9300,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        15426015,
        9320,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                2
            ],
            [
                "0xf3ff14d5ab527059",
                2
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        15680713,
        9340,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                2
            ],
            [
                "0xf3ff14d5ab527059",
                2
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        15756296,
        9350,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                2
            ],
            [
                "0xf3ff14d5ab527059",
                2
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ]
];
var upgrades$7 = upgrades$6;

const upgrades$4 = [
    [
        0,
        0,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        29231,
        1,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        188836,
        5,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        199405,
        6,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        214264,
        7,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        244358,
        8,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        303079,
        9,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        314201,
        10,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        342400,
        11,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        443963,
        12,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        528470,
        13,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        687751,
        14,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        746085,
        15,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        787923,
        16,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        799302,
        17,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1205128,
        18,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1603423,
        23,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1733218,
        24,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2005673,
        25,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2436698,
        26,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3613564,
        27,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3899547,
        28,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        4345767,
        29,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        4876134,
        30,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5661442,
        9050,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6321619,
        9080,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6713249,
        9090,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7217907,
        9100,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7229126,
        9110,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7560558,
        9122,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        8115869,
        9140,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        8638103,
        9151,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9280179,
        9170,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9738717,
        9180,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10156856,
        9190,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10458576,
        9200,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10655116,
        9220,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10879371,
        9230,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11328884,
        9250,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11532856,
        9260,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11933818,
        9270,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        12217535,
        9280,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ]
        ]
    ],
    [
        12245277,
        9281,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ]
        ]
    ],
    [
        12532644,
        9291,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ]
        ]
    ],
    [
        12876189,
        9300,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ]
        ]
    ]
];
var upgrades$5 = upgrades$4;

const upgrades$2 = [
    [
        214356,
        4,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        392764,
        7,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        409740,
        8,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        809976,
        20,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        877581,
        24,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        879238,
        25,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        889472,
        26,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        902937,
        27,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        932751,
        28,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        991142,
        29,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1030162,
        31,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1119657,
        32,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1199282,
        33,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1342534,
        34,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1392263,
        35,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1431703,
        36,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1433369,
        37,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1490972,
        41,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2087397,
        43,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2316688,
        44,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2549864,
        45,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3925782,
        46,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3925843,
        47,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        4207800,
        48,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        4627944,
        49,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5124076,
        50,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5478664,
        900,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5482450,
        9000,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5584305,
        9010,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5784566,
        9030,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5879822,
        9031,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5896856,
        9032,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5897316,
        9033,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6117927,
        9050,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6210274,
        9070,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6379314,
        9080,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6979141,
        9090,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7568453,
        9100,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7766394,
        9111,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7911691,
        9120,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7968866,
        9121,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7982889,
        9122,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        8514322,
        9130,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9091726,
        9140,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9091774,
        9150,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9406726,
        9160,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9921066,
        9170,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10007115,
        9180,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10480973,
        9190,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10578091,
        9200,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10678509,
        9210,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10811001,
        9220,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11096116,
        9230,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11409279,
        9250,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11584820,
        9251,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11716837,
        9260,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11876919,
        9261,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11987927,
        9270,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        12077324,
        9271,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        12301871,
        9280,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        12604343,
        9290,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        12841034,
        9300,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        13128237,
        9310,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        13272363,
        9320,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                2
            ],
            [
                "0xf3ff14d5ab527059",
                2
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        13483497,
        9330,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                2
            ],
            [
                "0xf3ff14d5ab527059",
                2
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        13649433,
        9340,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                2
            ],
            [
                "0xf3ff14d5ab527059",
                2
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        13761100,
        9350,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                2
            ],
            [
                "0xf3ff14d5ab527059",
                2
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ]
];
var upgrades$3 = upgrades$2;

var allKnown = /*#__PURE__*/Object.freeze({
    __proto__: null,
    kusama: upgrades$7,
    polkadot: upgrades$5,
    westend: upgrades$3
});

const NET_EXTRA = {
    westend: {
        genesisHash: ['0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e']
    }
};
/** @internal */
function mapRaw([network, versions]) {
    const chain = selectableNetworks.find((n) => n.network === network) || NET_EXTRA[network];
    if (!chain) {
        throw new Error(`Unable to find info for chain ${network}`);
    }
    return {
        genesisHash: hexToU8a(chain.genesisHash[0]),
        network,
        versions: versions.map(([blockNumber, specVersion, apis]) => ({
            apis,
            blockNumber: new BN(blockNumber),
            specVersion: new BN(specVersion)
        }))
    };
}
const upgrades = Object.entries(allKnown).map(mapRaw);
var upgrades$1 = upgrades;

/**
 * @description Perform the callback function using the stringified spec/chain
 * @internal
 * */
function withNames(chainName, specName, fn) {
    return fn(chainName.toString(), specName.toString());
}
/**
 * @descriptionFflatten a VersionedType[] into a Record<string, string>
 * @internal
 * */
function filterVersions(versions = [], specVersion) {
    return versions
        .filter(({ minmax: [min, max] }) => (min === undefined || min === null || specVersion >= min) &&
        (max === undefined || max === null || specVersion <= max))
        .reduce((result, { types }) => objectSpread(result, types), {});
}
/**
 * @description Based on the chain and runtimeVersion, get the applicable signed extensions (ready for registration)
 */
function getSpecExtensions({ knownTypes }, chainName, specName) {
    return withNames(chainName, specName, (c, s) => objectSpread({}, knownTypes.typesBundle?.spec?.[s]?.signedExtensions, knownTypes.typesBundle?.chain?.[c]?.signedExtensions));
}
/**
 * @description Based on the chain and runtimeVersion, get the applicable types (ready for registration)
 */
function getSpecTypes({ knownTypes }, chainName, specName, specVersion) {
    const _specVersion = bnToBn(specVersion).toNumber();
    return withNames(chainName, specName, (c, s) => 
    // The order here is always, based on -
    //   - spec then chain
    //   - typesBundle takes higher precedence
    //   - types is the final catch-all override
    objectSpread({}, filterVersions(typesSpec$1[s], _specVersion), filterVersions(typesChain$1[c], _specVersion), filterVersions(knownTypes.typesBundle?.spec?.[s]?.types, _specVersion), filterVersions(knownTypes.typesBundle?.chain?.[c]?.types, _specVersion), knownTypes.typesSpec?.[s], knownTypes.typesChain?.[c], knownTypes.types));
}
/**
 * @description Based on the chain or spec, return the hasher used
 */
function getSpecHasher({ knownTypes }, chainName, specName) {
    return withNames(chainName, specName, (c, s) => knownTypes.hasher ||
        knownTypes.typesBundle?.chain?.[c]?.hasher ||
        knownTypes.typesBundle?.spec?.[s]?.hasher ||
        null);
}
/**
 * @description Based on the chain and runtimeVersion, get the applicable rpc definitions (ready for registration)
 */
function getSpecRpc({ knownTypes }, chainName, specName) {
    return withNames(chainName, specName, (c, s) => objectSpread({}, knownTypes.typesBundle?.spec?.[s]?.rpc, knownTypes.typesBundle?.chain?.[c]?.rpc));
}
/**
 * @description Based on the chain and runtimeVersion, get the applicable runtime definitions (ready for registration)
 */
function getSpecRuntime({ knownTypes }, chainName, specName) {
    return withNames(chainName, specName, (c, s) => objectSpread({}, knownTypes.typesBundle?.spec?.[s]?.runtime, knownTypes.typesBundle?.chain?.[c]?.runtime));
}
/**
 * @description Based on the chain and runtimeVersion, get the applicable alias definitions (ready for registration)
 */
function getSpecAlias({ knownTypes }, chainName, specName) {
    return withNames(chainName, specName, (c, s) => 
    // as per versions, first spec, then chain then finally non-versioned
    objectSpread({}, knownTypes.typesBundle?.spec?.[s]?.alias, knownTypes.typesBundle?.chain?.[c]?.alias, knownTypes.typesAlias));
}
/**
 * @description Returns a version record for known chains where upgrades are being tracked
 */
function getUpgradeVersion(genesisHash, blockNumber) {
    const known = upgrades$1.find((u) => genesisHash.eq(u.genesisHash));
    return known
        ? [
            known.versions.reduce((last, version) => {
                return blockNumber.gt(version.blockNumber)
                    ? version
                    : last;
            }, undefined),
            known.versions.find((version) => blockNumber.lte(version.blockNumber))
        ]
        : [undefined, undefined];
}

const l$2 = logger('api/augment');
function logLength(type, values, and = []) {
    return values.length
        ? ` ${values.length} ${type}${and.length ? ' and' : ''}`
        : '';
}
function logValues(type, values) {
    return values.length
        ? `\n\t${type.padStart(7)}: ${values.sort().join(', ')}`
        : '';
}
function warn(prefix, type, [added, removed]) {
    if (added.length || removed.length) {
        l$2.warn(`api.${prefix}: Found${logLength('added', added, removed)}${logLength('removed', removed)} ${type}:${logValues('added', added)}${logValues('removed', removed)}`);
    }
}
function findSectionExcludes(a, b) {
    return a.filter((s) => !b.includes(s));
}
function findSectionIncludes(a, b) {
    return a.filter((s) => b.includes(s));
}
function extractSections(src, dst) {
    const srcSections = Object.keys(src);
    const dstSections = Object.keys(dst);
    return [
        findSectionExcludes(srcSections, dstSections),
        findSectionExcludes(dstSections, srcSections)
    ];
}
function findMethodExcludes(src, dst) {
    const srcSections = Object.keys(src);
    const dstSections = findSectionIncludes(Object.keys(dst), srcSections);
    const excludes = [];
    for (let s = 0; s < dstSections.length; s++) {
        const section = dstSections[s];
        const srcMethods = Object.keys(src[section]);
        const dstMethods = Object.keys(dst[section]);
        for (let d = 0; d < dstMethods.length; d++) {
            const method = dstMethods[d];
            if (!srcMethods.includes(method)) {
                excludes.push(`${section}.${method}`);
            }
        }
    }
    return excludes;
}
function extractMethods(src, dst) {
    return [
        findMethodExcludes(dst, src),
        findMethodExcludes(src, dst)
    ];
}
/**
 * @description Takes a decorated api section (e.g. api.tx) and augment it with the details. It does not override what is
 * already available, but rather just adds new missing items into the result object.
 * @internal
 */
function augmentObject(prefix, src, dst, fromEmpty = false) {
    fromEmpty && objectClear(dst);
    // NOTE: This part is slightly problematic since it will get the
    // values for at least all the sections and the names of the methods
    // (Since methods won't be decorated before lazy, this _may_ be ok)
    if (prefix && Object.keys(dst).length) {
        warn(prefix, 'modules', extractSections(src, dst));
        warn(prefix, 'calls', extractMethods(src, dst));
    }
    const sections = Object.keys(src);
    for (let i = 0; i < sections.length; i++) {
        const section = sections[i];
        const methods = src[section];
        // We don't set here with a lazy interface, we decorate based
        // on the top-level structure (this bypasses adding lazy onto lazy)
        if (!dst[section]) {
            dst[section] = {};
        }
        lazyMethods(dst[section], Object.keys(methods), (m) => methods[m]);
    }
    return dst;
}

function sig({ lookup }, { method, section }, args) {
    return `${section}.${method}(${args.map((a) => lookup.getTypeDef(a).type).join(', ')})`;
}
function extractStorageArgs(registry, creator, _args) {
    const args = _args.filter((a) => !isUndefined(a));
    if (creator.meta.type.isPlain) {
        if (args.length !== 0) {
            throw new Error(`${sig(registry, creator, [])} does not take any arguments, ${args.length} found`);
        }
    }
    else {
        const { hashers, key } = creator.meta.type.asMap;
        const keys = hashers.length === 1
            ? [key]
            : registry.lookup.getSiType(key).def.asTuple.map((t) => t);
        if (args.length !== keys.length) {
            throw new Error(`${sig(registry, creator, keys)} is a map, requiring ${keys.length} arguments, ${args.length} found`);
        }
    }
    // pass as tuple
    return [creator, args];
}

var _Events_eventemitter;
class Events {
    constructor() {
        _Events_eventemitter.set(this, new EventEmitter());
    }
    emit(type, ...args) {
        return __classPrivateFieldGet(this, _Events_eventemitter, "f").emit(type, ...args);
    }
    /**
     * @description Attach an eventemitter handler to listen to a specific event
     *
     * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
     * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.on('connected', (): void => {
     *   console.log('API has been connected to the endpoint');
     * });
     *
     * api.on('disconnected', (): void => {
     *   console.log('API has been disconnected from the endpoint');
     * });
     * ```
     */
    on(type, handler) {
        __classPrivateFieldGet(this, _Events_eventemitter, "f").on(type, handler);
        return this;
    }
    /**
     * @description Remove the given eventemitter handler
     *
     * @param type The type of event the callback was attached to. Available events are `connected`, `disconnected`, `ready` and `error`
     * @param handler The callback to unregister.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * const handler = (): void => {
     *  console.log('Connected !);
     * };
     *
     * // Start listening
     * api.on('connected', handler);
     *
     * // Stop listening
     * api.off('connected', handler);
     * ```
     */
    off(type, handler) {
        __classPrivateFieldGet(this, _Events_eventemitter, "f").removeListener(type, handler);
        return this;
    }
    /**
     * @description Attach an one-time eventemitter handler to listen to a specific event
     *
     * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
     * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.once('connected', (): void => {
     *   console.log('API has been connected to the endpoint');
     * });
     *
     * api.once('disconnected', (): void => {
     *   console.log('API has been disconnected from the endpoint');
     * });
     * ```
     */
    once(type, handler) {
        __classPrivateFieldGet(this, _Events_eventemitter, "f").once(type, handler);
        return this;
    }
}
_Events_eventemitter = new WeakMap();

var _Decorate_instanceId, _Decorate_runtimeLog, _Decorate_registry, _Decorate_storageGetQ, _Decorate_storageSubQ;
const PAGE_SIZE_K = 1000; // limit aligned with the 1k on the node (trie lookups are heavy)
const PAGE_SIZE_V = 250; // limited since the data may be > 16MB (e.g. misfiring elections)
const PAGE_SIZE_Q = 50; // queue of pending storage queries (mapped together, next tick)
const l$1 = logger('api/init');
let instanceCounter = 0;
function getAtQueryFn(api, { method, section }) {
    return assertReturn(api.rx.query[section] && api.rx.query[section][method], () => `query.${section}.${method} is not available in this version of the metadata`);
}
class Decorate extends Events {
    /**
     * @description Create an instance of the class
     *
     * @param options Options object to create API instance or a Provider instance
     *
     * @example
     * <BR>
     *
     * ```javascript
     * import Api from '@polkadot/api/promise';
     *
     * const api = new Api().isReady();
     *
     * api.rpc.subscribeNewHeads((header) => {
     *   console.log(`new block #${header.number.toNumber()}`);
     * });
     * ```
     */
    constructor(options, type, decorateMethod) {
        super();
        _Decorate_instanceId.set(this, void 0);
        _Decorate_runtimeLog.set(this, {});
        _Decorate_registry.set(this, void 0);
        _Decorate_storageGetQ.set(this, []);
        _Decorate_storageSubQ.set(this, []);
        // HACK Use BN import so decorateDerive works... yes, wtf.
        this.__phantom = new BN(0);
        this._call = {};
        this._consts = {};
        this._errors = {};
        this._events = {};
        this._extrinsicType = GenericExtrinsic.LATEST_EXTRINSIC_VERSION;
        this._isReady = false;
        this._query = {};
        this._runtimeMap = {};
        this._rx = { call: {}, consts: {}, query: {}, tx: {} };
        /**
         * Put the `this.onCall` function of ApiRx here, because it is needed by
         * `api._rx`.
         */
        this._rxDecorateMethod = (method) => {
            return method;
        };
        __classPrivateFieldSet(this, _Decorate_instanceId, `${++instanceCounter}`, "f");
        __classPrivateFieldSet(this, _Decorate_registry, options.source?.registry || options.registry || new TypeRegistry(), "f");
        this._rx.callAt = (blockHash, knownVersion) => from(this.at(blockHash, knownVersion)).pipe(map((a) => a.rx.call));
        this._rx.queryAt = (blockHash, knownVersion) => from(this.at(blockHash, knownVersion)).pipe(map((a) => a.rx.query));
        this._rx.registry = __classPrivateFieldGet(this, _Decorate_registry, "f");
        const thisProvider = options.source
            ? options.source._rpcCore.provider.isClonable
                ? options.source._rpcCore.provider.clone()
                : options.source._rpcCore.provider
            : (options.provider || new WsProvider());
        this._decorateMethod = decorateMethod;
        this._options = options;
        this._type = type;
        // The RPC interface decorates the known interfaces on init
        this._rpcCore = new RpcCore(__classPrivateFieldGet(this, _Decorate_instanceId, "f"), __classPrivateFieldGet(this, _Decorate_registry, "f"), thisProvider, this._options.rpc);
        this._isConnected = new BehaviorSubject(this._rpcCore.provider.isConnected);
        this._rx.hasSubscriptions = this._rpcCore.provider.hasSubscriptions;
    }
    /**
     * @description Return the current used registry
     */
    get registry() {
        return __classPrivateFieldGet(this, _Decorate_registry, "f");
    }
    /**
     * @description Creates an instance of a type as registered
     */
    createType(type, ...params) {
        return __classPrivateFieldGet(this, _Decorate_registry, "f").createType(type, ...params);
    }
    /**
     * @description Register additional user-defined of chain-specific types in the type registry
     */
    registerTypes(types) {
        types && __classPrivateFieldGet(this, _Decorate_registry, "f").register(types);
    }
    /**
     * @returns `true` if the API operates with subscriptions
     */
    get hasSubscriptions() {
        return this._rpcCore.provider.hasSubscriptions;
    }
    /**
     * @returns `true` if the API decorate multi-key queries
     */
    get supportMulti() {
        return this._rpcCore.provider.hasSubscriptions || !!this._rpcCore.state.queryStorageAt;
    }
    _emptyDecorated(registry, blockHash) {
        return {
            call: {},
            consts: {},
            errors: {},
            events: {},
            query: {},
            registry,
            rx: {
                call: {},
                query: {}
            },
            tx: createSubmittable(this._type, this._rx, this._decorateMethod, registry, blockHash)
        };
    }
    _createDecorated(registry, fromEmpty, decoratedApi, blockHash) {
        if (!decoratedApi) {
            decoratedApi = this._emptyDecorated(registry.registry, blockHash);
        }
        if (fromEmpty || !registry.decoratedMeta) {
            registry.decoratedMeta = expandMetadata(registry.registry, registry.metadata);
        }
        const runtime = this._decorateCalls(registry, this._decorateMethod, blockHash);
        const runtimeRx = this._decorateCalls(registry, this._rxDecorateMethod, blockHash);
        const storage = this._decorateStorage(registry.decoratedMeta, this._decorateMethod, blockHash);
        const storageRx = this._decorateStorage(registry.decoratedMeta, this._rxDecorateMethod, blockHash);
        augmentObject('consts', registry.decoratedMeta.consts, decoratedApi.consts, fromEmpty);
        augmentObject('errors', registry.decoratedMeta.errors, decoratedApi.errors, fromEmpty);
        augmentObject('events', registry.decoratedMeta.events, decoratedApi.events, fromEmpty);
        augmentObject('query', storage, decoratedApi.query, fromEmpty);
        augmentObject('query', storageRx, decoratedApi.rx.query, fromEmpty);
        augmentObject('call', runtime, decoratedApi.call, fromEmpty);
        augmentObject('call', runtimeRx, decoratedApi.rx.call, fromEmpty);
        decoratedApi.findCall = (callIndex) => findCall(registry.registry, callIndex);
        decoratedApi.findError = (errorIndex) => findError(registry.registry, errorIndex);
        decoratedApi.queryMulti = blockHash
            ? this._decorateMultiAt(decoratedApi, this._decorateMethod, blockHash)
            : this._decorateMulti(this._decorateMethod);
        decoratedApi.runtimeVersion = registry.runtimeVersion;
        return {
            createdAt: blockHash,
            decoratedApi,
            decoratedMeta: registry.decoratedMeta
        };
    }
    _injectMetadata(registry, fromEmpty = false) {
        // clear the decoration, we are redoing it here
        if (fromEmpty || !registry.decoratedApi) {
            registry.decoratedApi = this._emptyDecorated(registry.registry);
        }
        const { decoratedApi, decoratedMeta } = this._createDecorated(registry, fromEmpty, registry.decoratedApi);
        this._call = decoratedApi.call;
        this._consts = decoratedApi.consts;
        this._errors = decoratedApi.errors;
        this._events = decoratedApi.events;
        this._query = decoratedApi.query;
        this._rx.call = decoratedApi.rx.call;
        this._rx.query = decoratedApi.rx.query;
        const tx = this._decorateExtrinsics(decoratedMeta, this._decorateMethod);
        const rxtx = this._decorateExtrinsics(decoratedMeta, this._rxDecorateMethod);
        if (fromEmpty || !this._extrinsics) {
            this._extrinsics = tx;
            this._rx.tx = rxtx;
        }
        else {
            augmentObject('tx', tx, this._extrinsics, false);
            augmentObject(null, rxtx, this._rx.tx, false);
        }
        augmentObject(null, decoratedMeta.consts, this._rx.consts, fromEmpty);
        this.emit('decorated');
    }
    /**
     * @deprecated
     * backwards compatible endpoint for metadata injection, may be removed in the future (However, it is still useful for testing injection)
     */
    injectMetadata(metadata, fromEmpty, registry) {
        this._injectMetadata({ counter: 0, metadata, registry: registry || __classPrivateFieldGet(this, _Decorate_registry, "f"), runtimeVersion: __classPrivateFieldGet(this, _Decorate_registry, "f").createType('RuntimeVersionPartial') }, fromEmpty);
    }
    _decorateFunctionMeta(input, output) {
        output.meta = input.meta;
        output.method = input.method;
        output.section = input.section;
        output.toJSON = input.toJSON;
        if (input.callIndex) {
            output.callIndex = input.callIndex;
        }
        return output;
    }
    // Filter all RPC methods based on the results of the rpc_methods call. We do this in the following
    // manner to cater for both old and new:
    //   - when the number of entries are 0, only remove the ones with isOptional (account & contracts)
    //   - when non-zero, remove anything that is not in the array (we don't do this)
    _filterRpc(methods, additional) {
        // add any specific user-base RPCs
        if (Object.keys(additional).length !== 0) {
            this._rpcCore.addUserInterfaces(additional);
            // re-decorate, only adding any new additional interfaces
            this._decorateRpc(this._rpcCore, this._decorateMethod, this._rpc);
            this._decorateRpc(this._rpcCore, this._rxDecorateMethod, this._rx.rpc);
        }
        // extract the actual sections from the methods (this is useful when
        // we try and create mappings to runtime names via a hash mapping)
        const sectionMap = {};
        for (let i = 0; i < methods.length; i++) {
            const [section] = methods[i].split('_');
            sectionMap[section] = true;
        }
        // convert the actual section names into an easy name lookup
        const sections = Object.keys(sectionMap);
        for (let i = 0; i < sections.length; i++) {
            const nameA = stringUpperFirst(sections[i]);
            const nameB = `${nameA}Api`;
            this._runtimeMap[blake2AsHex(nameA, 64)] = nameA;
            this._runtimeMap[blake2AsHex(nameB, 64)] = nameB;
        }
        // finally we filter the actual methods to expose
        this._filterRpcMethods(methods);
    }
    _filterRpcMethods(exposed) {
        const hasResults = exposed.length !== 0;
        const allKnown = [...this._rpcCore.mapping.entries()];
        const allKeys = [];
        for (let i = 0; i < allKnown.length; i++) {
            const [, { alias, endpoint, method, pubsub, section }] = allKnown[i];
            allKeys.push(`${section}_${method}`);
            if (pubsub) {
                allKeys.push(`${section}_${pubsub[1]}`);
                allKeys.push(`${section}_${pubsub[2]}`);
            }
            if (alias) {
                allKeys.push(...alias);
            }
            if (endpoint) {
                allKeys.push(endpoint);
            }
        }
        const unknown = exposed.filter((k) => !allKeys.includes(k) &&
            !k.includes('_unstable_'));
        if (unknown.length && !this._options.noInitWarn) {
            l$1.warn(`RPC methods not decorated: ${unknown.join(', ')}`);
        }
        // loop through all entries we have (populated in decorate) and filter as required
        // only remove when we have results and method missing, or with no results if optional
        for (let i = 0; i < allKnown.length; i++) {
            const [k, { method, section }] = allKnown[i];
            if (hasResults && !exposed.includes(k) && k !== 'rpc_methods') {
                if (this._rpc[section]) {
                    delete this._rpc[section][method];
                    delete this._rx.rpc[section][method];
                }
            }
        }
    }
    _rpcSubmitter(decorateMethod) {
        const method = (method, ...params) => {
            return from(this._rpcCore.provider.send(method, params));
        };
        return decorateMethod(method);
    }
    _decorateRpc(rpc, decorateMethod, input = this._rpcSubmitter(decorateMethod)) {
        const out = input;
        const decorateFn = (section, method) => {
            const source = rpc[section][method];
            const fn = decorateMethod(source, { methodName: method });
            fn.meta = source.meta;
            fn.raw = decorateMethod(source.raw, { methodName: method });
            return fn;
        };
        for (let s = 0; s < rpc.sections.length; s++) {
            const section = rpc.sections[s];
            if (!Object.prototype.hasOwnProperty.call(out, section)) {
                const methods = Object.keys(rpc[section]);
                const decorateInternal = (method) => decorateFn(section, method);
                for (let m = 0; m < methods.length; m++) {
                    const method = methods[m];
                    //  skip subscriptions where we have a non-subscribe interface
                    if (this.hasSubscriptions || !(method.startsWith('subscribe') || method.startsWith('unsubscribe'))) {
                        if (!Object.prototype.hasOwnProperty.call(out, section)) {
                            out[section] = {};
                        }
                        lazyMethod(out[section], method, decorateInternal);
                    }
                }
            }
        }
        return out;
    }
    // add all definition entries
    _addRuntimeDef(result, additional) {
        if (!additional) {
            return;
        }
        const entries = Object.entries(additional);
        for (let j = 0; j < entries.length; j++) {
            const [key, defs] = entries[j];
            if (result[key]) {
                // we have this one already, step through for new versions or
                // new methods and add those as applicable
                for (let k = 0; k < defs.length; k++) {
                    const def = defs[k];
                    const prev = result[key].find(({ version }) => def.version === version);
                    if (prev) {
                        // interleave the new methods with the old - last definition wins
                        objectSpread(prev.methods, def.methods);
                    }
                    else {
                        // we don't have this specific version, add it
                        result[key].push(def);
                    }
                }
            }
            else {
                // we don't have this runtime definition, add it as-is
                result[key] = defs;
            }
        }
    }
    // extract all runtime definitions
    _getRuntimeDefs(registry, specName, chain = '') {
        const result = {};
        const defValues = Object.values(typeDefinitions);
        // options > chain/spec > built-in, apply in reverse order with
        // methods overriding previous definitions (or interleave missing)
        for (let i = 0; i < defValues.length; i++) {
            this._addRuntimeDef(result, defValues[i].runtime);
        }
        this._addRuntimeDef(result, getSpecRuntime(registry, chain, specName));
        this._addRuntimeDef(result, this._options.runtime);
        return Object.entries(result);
    }
    // pre-metadata decoration
    _decorateCalls({ registry, runtimeVersion: { apis, specName, specVersion } }, decorateMethod, blockHash) {
        const result = {};
        const named = {};
        const hashes = {};
        const sections = this._getRuntimeDefs(registry, specName, this._runtimeChain);
        const older = [];
        const implName = `${specName.toString()}/${specVersion.toString()}`;
        const hasLogged = __classPrivateFieldGet(this, _Decorate_runtimeLog, "f")[implName] || false;
        __classPrivateFieldGet(this, _Decorate_runtimeLog, "f")[implName] = true;
        for (let i = 0; i < sections.length; i++) {
            const [_section, secs] = sections[i];
            const sectionHash = blake2AsHex(_section, 64);
            const rtApi = apis.find(([a]) => a.eq(sectionHash));
            hashes[sectionHash] = true;
            if (rtApi) {
                const all = secs.map(({ version }) => version).sort();
                const sec = secs.find(({ version }) => rtApi[1].eq(version));
                if (sec) {
                    const section = stringCamelCase(_section);
                    const methods = Object.entries(sec.methods);
                    if (methods.length) {
                        if (!named[section]) {
                            named[section] = {};
                        }
                        for (let m = 0; m < methods.length; m++) {
                            const [_method, def] = methods[m];
                            const method = stringCamelCase(_method);
                            named[section][method] = objectSpread({ method, name: `${_section}_${_method}`, section, sectionHash }, def);
                        }
                    }
                }
                else {
                    older.push(`${_section}/${rtApi[1].toString()} (${all.join('/')} known)`);
                }
            }
        }
        // find the runtimes that we don't have hashes for
        const notFound = apis
            .map(([a, v]) => [a.toHex(), v.toString()])
            .filter(([a]) => !hashes[a])
            .map(([a, v]) => `${this._runtimeMap[a] || a}/${v}`);
        if (!this._options.noInitWarn && !hasLogged) {
            if (older.length) {
                l$1.warn(`${implName}: Not decorating runtime apis without matching versions: ${older.join(', ')}`);
            }
            if (notFound.length) {
                l$1.warn(`${implName}: Not decorating unknown runtime apis: ${notFound.join(', ')}`);
            }
        }
        const stateCall = blockHash
            ? (name, bytes) => this._rpcCore.state.call(name, bytes, blockHash)
            : (name, bytes) => this._rpcCore.state.call(name, bytes);
        const lazySection = (section) => lazyMethods({}, Object.keys(named[section]), (method) => this._decorateCall(registry, named[section][method], stateCall, decorateMethod));
        const modules = Object.keys(named);
        for (let i = 0; i < modules.length; i++) {
            lazyMethod(result, modules[i], lazySection);
        }
        return result;
    }
    _decorateCall(registry, def, stateCall, decorateMethod) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        const decorated = decorateMethod((...args) => {
            if (args.length !== def.params.length) {
                throw new Error(`${def.name}:: Expected ${def.params.length} arguments, found ${args.length}`);
            }
            const bytes = registry.createType('Raw', u8aConcatStrict(args.map((a, i) => registry.createTypeUnsafe(def.params[i].type, [a]).toU8a())));
            return stateCall(def.name, bytes).pipe(map((r) => registry.createTypeUnsafe(def.type, [r])));
        });
        decorated.meta = def;
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return decorated;
    }
    // only be called if supportMulti is true
    _decorateMulti(decorateMethod) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return decorateMethod((keys) => keys.length
            ? (this.hasSubscriptions
                ? this._rpcCore.state.subscribeStorage
                : this._rpcCore.state.queryStorageAt)(keys.map((args) => Array.isArray(args)
                ? args[0].creator.meta.type.isPlain
                    ? [args[0].creator]
                    : args[0].creator.meta.type.asMap.hashers.length === 1
                        ? [args[0].creator, args.slice(1)]
                        : [args[0].creator, ...args.slice(1)]
                : [args.creator]))
            : of([]));
    }
    _decorateMultiAt(atApi, decorateMethod, blockHash) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return decorateMethod((calls) => calls.length
            ? this._rpcCore.state.queryStorageAt(calls.map((args) => {
                if (Array.isArray(args)) {
                    const { creator } = getAtQueryFn(atApi, args[0].creator);
                    return creator.meta.type.isPlain
                        ? [creator]
                        : creator.meta.type.asMap.hashers.length === 1
                            ? [creator, args.slice(1)]
                            : [creator, ...args.slice(1)];
                }
                return [getAtQueryFn(atApi, args.creator).creator];
            }), blockHash)
            : of([]));
    }
    _decorateExtrinsics({ tx }, decorateMethod) {
        const result = createSubmittable(this._type, this._rx, decorateMethod);
        const lazySection = (section) => lazyMethods({}, Object.keys(tx[section]), (method) => method.startsWith('$')
            ? tx[section][method]
            : this._decorateExtrinsicEntry(tx[section][method], result));
        const sections = Object.keys(tx);
        for (let i = 0; i < sections.length; i++) {
            lazyMethod(result, sections[i], lazySection);
        }
        return result;
    }
    _decorateExtrinsicEntry(method, creator) {
        const decorated = (...params) => creator(method(...params));
        // pass through the `.is`
        decorated.is = (other) => method.is(other);
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return this._decorateFunctionMeta(method, decorated);
    }
    _decorateStorage({ query, registry }, decorateMethod, blockHash) {
        const result = {};
        const lazySection = (section) => lazyMethods({}, Object.keys(query[section]), (method) => blockHash
            ? this._decorateStorageEntryAt(registry, query[section][method], decorateMethod, blockHash)
            : this._decorateStorageEntry(query[section][method], decorateMethod));
        const sections = Object.keys(query);
        for (let i = 0; i < sections.length; i++) {
            lazyMethod(result, sections[i], lazySection);
        }
        return result;
    }
    _decorateStorageEntry(creator, decorateMethod) {
        const getArgs = (args, registry) => extractStorageArgs(registry || __classPrivateFieldGet(this, _Decorate_registry, "f"), creator, args);
        const getQueryAt = (blockHash) => from(this.at(blockHash)).pipe(map((api) => getAtQueryFn(api, creator)));
        // Disable this where it occurs for each field we are decorating
        /* eslint-disable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */
        const decorated = this._decorateStorageCall(creator, decorateMethod);
        decorated.creator = creator;
        // eslint-disable-next-line deprecation/deprecation
        decorated.at = decorateMethod((blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q) => q(...args))));
        decorated.hash = decorateMethod((...args) => this._rpcCore.state.getStorageHash(getArgs(args)));
        decorated.is = (key) => key.section === creator.section &&
            key.method === creator.method;
        decorated.key = (...args) => u8aToHex(compactStripLength(creator(...args))[1]);
        decorated.keyPrefix = (...args) => u8aToHex(creator.keyPrefix(...args));
        decorated.size = decorateMethod((...args) => this._rpcCore.state.getStorageSize(getArgs(args)));
        // eslint-disable-next-line deprecation/deprecation
        decorated.sizeAt = decorateMethod((blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q) => this._rpcCore.state.getStorageSize(getArgs(args, q.creator.meta.registry), blockHash))));
        // .keys() & .entries() only available on map types
        if (creator.iterKey && creator.meta.type.isMap) {
            decorated.entries = decorateMethod(memo(__classPrivateFieldGet(this, _Decorate_instanceId, "f"), (...args) => this._retrieveMapEntries(creator, null, args)));
            // eslint-disable-next-line deprecation/deprecation
            decorated.entriesAt = decorateMethod(memo(__classPrivateFieldGet(this, _Decorate_instanceId, "f"), (blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q) => this._retrieveMapEntries(q.creator, blockHash, args)))));
            decorated.entriesPaged = decorateMethod(memo(__classPrivateFieldGet(this, _Decorate_instanceId, "f"), (opts) => this._retrieveMapEntriesPaged(creator, undefined, opts)));
            decorated.keys = decorateMethod(memo(__classPrivateFieldGet(this, _Decorate_instanceId, "f"), (...args) => this._retrieveMapKeys(creator, null, args)));
            // eslint-disable-next-line deprecation/deprecation
            decorated.keysAt = decorateMethod(memo(__classPrivateFieldGet(this, _Decorate_instanceId, "f"), (blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q) => this._retrieveMapKeys(q.creator, blockHash, args)))));
            decorated.keysPaged = decorateMethod(memo(__classPrivateFieldGet(this, _Decorate_instanceId, "f"), (opts) => this._retrieveMapKeysPaged(creator, undefined, opts)));
        }
        if (this.supportMulti && creator.meta.type.isMap) {
            // When using double map storage function, user need to pass double map key as an array
            decorated.multi = decorateMethod((args) => creator.meta.type.asMap.hashers.length === 1
                ? this._retrieveMulti(args.map((a) => [creator, [a]]))
                : this._retrieveMulti(args.map((a) => [creator, a])));
        }
        /* eslint-enable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */
        return this._decorateFunctionMeta(creator, decorated);
    }
    _decorateStorageEntryAt(registry, creator, decorateMethod, blockHash) {
        const getArgs = (args) => extractStorageArgs(registry, creator, args);
        // Disable this where it occurs for each field we are decorating
        /* eslint-disable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */
        const decorated = decorateMethod((...args) => this._rpcCore.state.getStorage(getArgs(args), blockHash));
        decorated.creator = creator;
        decorated.hash = decorateMethod((...args) => this._rpcCore.state.getStorageHash(getArgs(args), blockHash));
        decorated.is = (key) => key.section === creator.section &&
            key.method === creator.method;
        decorated.key = (...args) => u8aToHex(compactStripLength(creator(...args))[1]);
        decorated.keyPrefix = (...keys) => u8aToHex(creator.keyPrefix(...keys));
        decorated.size = decorateMethod((...args) => this._rpcCore.state.getStorageSize(getArgs(args), blockHash));
        // .keys() & .entries() only available on map types
        if (creator.iterKey && creator.meta.type.isMap) {
            decorated.entries = decorateMethod(memo(__classPrivateFieldGet(this, _Decorate_instanceId, "f"), (...args) => this._retrieveMapEntries(creator, blockHash, args)));
            decorated.entriesPaged = decorateMethod(memo(__classPrivateFieldGet(this, _Decorate_instanceId, "f"), (opts) => this._retrieveMapEntriesPaged(creator, blockHash, opts)));
            decorated.keys = decorateMethod(memo(__classPrivateFieldGet(this, _Decorate_instanceId, "f"), (...args) => this._retrieveMapKeys(creator, blockHash, args)));
            decorated.keysPaged = decorateMethod(memo(__classPrivateFieldGet(this, _Decorate_instanceId, "f"), (opts) => this._retrieveMapKeysPaged(creator, blockHash, opts)));
        }
        if (this.supportMulti && creator.meta.type.isMap) {
            // When using double map storage function, user need to pass double map key as an array
            decorated.multi = decorateMethod((args) => creator.meta.type.asMap.hashers.length === 1
                ? this._retrieveMulti(args.map((a) => [creator, [a]]), blockHash)
                : this._retrieveMulti(args.map((a) => [creator, a]), blockHash));
        }
        /* eslint-enable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */
        return this._decorateFunctionMeta(creator, decorated);
    }
    _queueStorage(call, queue) {
        const query = queue === __classPrivateFieldGet(this, _Decorate_storageSubQ, "f")
            ? this._rpcCore.state.subscribeStorage
            : this._rpcCore.state.queryStorageAt;
        let queueIdx = queue.length - 1;
        let valueIdx = 0;
        let valueObs;
        // if we don't have queue entries yet,
        // or the current queue has fired (see from below),
        // or the current queue has the max entries,
        // then we create a new queue
        if (queueIdx === -1 || !queue[queueIdx] || queue[queueIdx][1].length === PAGE_SIZE_Q) {
            queueIdx++;
            valueObs = from(
            // we delay the execution until the next tick, this allows
            // any queries made in this timeframe to be added to the same
            // queue for a single query
            new Promise((resolve) => {
                nextTick(() => {
                    // get all the calls in this instance, resolve with it
                    // and then clear the queue so we don't add more
                    // (anything after this will be added to a new queue)
                    const calls = queue[queueIdx][1];
                    delete queue[queueIdx];
                    resolve(calls);
                });
            })).pipe(switchMap((calls) => query(calls)));
            queue.push([valueObs, [call]]);
        }
        else {
            valueObs = queue[queueIdx][0];
            valueIdx = queue[queueIdx][1].length;
            queue[queueIdx][1].push(call);
        }
        return valueObs.pipe(
        // return the single value at this index
        map((values) => values[valueIdx]));
    }
    // Decorate the base storage call. In the case or rxjs or promise-without-callback (await)
    // we make a subscription, alternatively we push this through a single-shot query
    _decorateStorageCall(creator, decorateMethod) {
        const memoed = memo(__classPrivateFieldGet(this, _Decorate_instanceId, "f"), (...args) => {
            const call = extractStorageArgs(__classPrivateFieldGet(this, _Decorate_registry, "f"), creator, args);
            if (!this.hasSubscriptions) {
                return this._rpcCore.state.getStorage(call);
            }
            return this._queueStorage(call, __classPrivateFieldGet(this, _Decorate_storageSubQ, "f"));
        });
        return decorateMethod(memoed, {
            methodName: creator.method,
            overrideNoSub: (...args) => this._queueStorage(extractStorageArgs(__classPrivateFieldGet(this, _Decorate_registry, "f"), creator, args), __classPrivateFieldGet(this, _Decorate_storageGetQ, "f"))
        });
    }
    // retrieve a set of values for a specific set of keys - here we chunk the keys into PAGE_SIZE sizes
    _retrieveMulti(keys, blockHash) {
        if (!keys.length) {
            return of([]);
        }
        const query = this.hasSubscriptions && !blockHash
            ? this._rpcCore.state.subscribeStorage
            : this._rpcCore.state.queryStorageAt;
        if (keys.length <= PAGE_SIZE_V) {
            return blockHash
                ? query(keys, blockHash)
                : query(keys);
        }
        return combineLatest(arrayChunk(keys, PAGE_SIZE_V).map((k) => blockHash
            ? query(k, blockHash)
            : query(k))).pipe(map(arrayFlatten));
    }
    _retrieveMapKeys({ iterKey, meta, method, section }, at, args) {
        if (!iterKey || !meta.type.isMap) {
            throw new Error('keys can only be retrieved on maps');
        }
        const headKey = iterKey(...args).toHex();
        const startSubject = new BehaviorSubject(headKey);
        const query = at
            ? (startKey) => this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE_K, startKey, at)
            : (startKey) => this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE_K, startKey);
        const setMeta = (key) => key.setMeta(meta, section, method);
        return startSubject.pipe(switchMap(query), map((keys) => keys.map(setMeta)), tap((keys) => nextTick(() => {
            keys.length === PAGE_SIZE_K
                ? startSubject.next(keys[PAGE_SIZE_K - 1].toHex())
                : startSubject.complete();
        })), toArray(), // toArray since we want to startSubject to be completed
        map(arrayFlatten));
    }
    _retrieveMapKeysPaged({ iterKey, meta, method, section }, at, opts) {
        if (!iterKey || !meta.type.isMap) {
            throw new Error('keys can only be retrieved on maps');
        }
        const setMeta = (key) => key.setMeta(meta, section, method);
        const query = at
            ? (headKey) => this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey, at)
            : (headKey) => this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey);
        return query(iterKey(...opts.args).toHex()).pipe(map((keys) => keys.map(setMeta)));
    }
    _retrieveMapEntries(entry, at, args) {
        const query = at
            ? (keys) => this._rpcCore.state.queryStorageAt(keys, at)
            : (keys) => this._rpcCore.state.queryStorageAt(keys);
        return this._retrieveMapKeys(entry, at, args).pipe(switchMap((keys) => keys.length
            ? combineLatest(arrayChunk(keys, PAGE_SIZE_V).map(query)).pipe(map((valsArr) => arrayFlatten(valsArr).map((value, index) => [keys[index], value])))
            : of([])));
    }
    _retrieveMapEntriesPaged(entry, at, opts) {
        const query = at
            ? (keys) => this._rpcCore.state.queryStorageAt(keys, at)
            : (keys) => this._rpcCore.state.queryStorageAt(keys);
        return this._retrieveMapKeysPaged(entry, at, opts).pipe(switchMap((keys) => keys.length
            ? query(keys).pipe(map((valsArr) => valsArr.map((value, index) => [keys[index], value])))
            : of([])));
    }
    _decorateDeriveRx(decorateMethod) {
        const specName = this._runtimeVersion?.specName.toString();
        // Pull in derive from api-derive
        const available = getAvailableDerives(__classPrivateFieldGet(this, _Decorate_instanceId, "f"), this._rx, objectSpread({}, this._options.derives, this._options.typesBundle?.spec?.[specName || '']?.derives));
        return decorateDeriveSections(decorateMethod, available);
    }
    _decorateDerive(decorateMethod) {
        return decorateDeriveSections(decorateMethod, this._rx.derive);
    }
}
_Decorate_instanceId = new WeakMap(), _Decorate_runtimeLog = new WeakMap(), _Decorate_registry = new WeakMap(), _Decorate_storageGetQ = new WeakMap(), _Decorate_storageSubQ = new WeakMap();

var _Init_instances, _Init_atLast, _Init_healthTimer, _Init_registries, _Init_updateSub, _Init_waitingRegistries, _Init_onProviderConnect, _Init_onProviderDisconnect, _Init_onProviderError;
const KEEPALIVE_INTERVAL = 10000;
const l = logger('api/init');
function textToString(t) {
    return t.toString();
}
class Init extends Decorate {
    constructor(options, type, decorateMethod) {
        super(options, type, decorateMethod);
        _Init_instances.add(this);
        _Init_atLast.set(this, null);
        _Init_healthTimer.set(this, null);
        _Init_registries.set(this, []);
        _Init_updateSub.set(this, null);
        _Init_waitingRegistries.set(this, {});
        // all injected types added to the registry for overrides
        this.registry.setKnownTypes(options);
        // We only register the types (global) if this is not a cloned instance.
        // Do right up-front, so we get in the user types before we are actually
        // doing anything on-chain, this ensures we have the overrides in-place
        if (!options.source) {
            this.registerTypes(options.types);
        }
        else {
            __classPrivateFieldSet(this, _Init_registries, __classPrivateFieldGet(options.source, _Init_registries, "f"), "f");
        }
        this._rpc = this._decorateRpc(this._rpcCore, this._decorateMethod);
        this._rx.rpc = this._decorateRpc(this._rpcCore, this._rxDecorateMethod);
        if (this.supportMulti) {
            this._queryMulti = this._decorateMulti(this._decorateMethod);
            this._rx.queryMulti = this._decorateMulti(this._rxDecorateMethod);
        }
        this._rx.signer = options.signer;
        this._rpcCore.setRegistrySwap((blockHash) => this.getBlockRegistry(blockHash));
        this._rpcCore.setResolveBlockHash((blockNumber) => firstValueFrom(this._rpcCore.chain.getBlockHash(blockNumber)));
        if (this.hasSubscriptions) {
            this._rpcCore.provider.on('disconnected', () => __classPrivateFieldGet(this, _Init_instances, "m", _Init_onProviderDisconnect).call(this));
            this._rpcCore.provider.on('error', (e) => __classPrivateFieldGet(this, _Init_instances, "m", _Init_onProviderError).call(this, e));
            this._rpcCore.provider.on('connected', () => __classPrivateFieldGet(this, _Init_instances, "m", _Init_onProviderConnect).call(this));
        }
        else if (!this._options.noInitWarn) {
            l.warn('Api will be available in a limited mode since the provider does not support subscriptions');
        }
        // If the provider was instantiated earlier, and has already emitted a
        // 'connected' event, then the `on('connected')` won't fire anymore. To
        // cater for this case, we call manually `this._onProviderConnect`.
        if (this._rpcCore.provider.isConnected) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            __classPrivateFieldGet(this, _Init_instances, "m", _Init_onProviderConnect).call(this);
        }
    }
    /**
     * @description Decorates a registry based on the runtime version
     */
    _initRegistry(registry, chain, version, metadata, chainProps) {
        registry.clearCache();
        registry.setChainProperties(chainProps || this.registry.getChainProperties());
        registry.setKnownTypes(this._options);
        registry.register(getSpecTypes(registry, chain, version.specName, version.specVersion));
        registry.setHasher(getSpecHasher(registry, chain, version.specName));
        // for bundled types, pull through the aliases defined
        if (registry.knownTypes.typesBundle) {
            registry.knownTypes.typesAlias = getSpecAlias(registry, chain, version.specName);
        }
        registry.setMetadata(metadata, undefined, objectSpread({}, getSpecExtensions(registry, chain, version.specName), this._options.signedExtensions));
    }
    /**
     * @description Returns the default versioned registry
     */
    _getDefaultRegistry() {
        return assertReturn(__classPrivateFieldGet(this, _Init_registries, "f").find(({ isDefault }) => isDefault), 'Initialization error, cannot find the default registry');
    }
    /**
     * @description Returns a decorated API instance at a specific point in time
     */
    async at(blockHash, knownVersion) {
        const u8aHash = u8aToU8a(blockHash);
        const u8aHex = u8aToHex(u8aHash);
        const registry = await this.getBlockRegistry(u8aHash, knownVersion);
        if (!__classPrivateFieldGet(this, _Init_atLast, "f") || __classPrivateFieldGet(this, _Init_atLast, "f")[0] !== u8aHex) {
            // always create a new decoration - since we are pointing to a specific hash, this
            // means that all queries needs to use that hash (not a previous one already existing)
            __classPrivateFieldSet(this, _Init_atLast, [u8aHex, this._createDecorated(registry, true, null, u8aHash).decoratedApi], "f");
        }
        return __classPrivateFieldGet(this, _Init_atLast, "f")[1];
    }
    async _createBlockRegistry(blockHash, header, version) {
        const registry = new TypeRegistry(blockHash);
        const metadata = new Metadata(registry, await firstValueFrom(this._rpcCore.state.getMetadata.raw(header.parentHash)));
        this._initRegistry(registry, this._runtimeChain, version, metadata);
        // add our new registry
        const result = { counter: 0, lastBlockHash: blockHash, metadata, registry, runtimeVersion: version };
        __classPrivateFieldGet(this, _Init_registries, "f").push(result);
        return result;
    }
    _cacheBlockRegistryProgress(key, creator) {
        // look for waiting resolves
        let waiting = __classPrivateFieldGet(this, _Init_waitingRegistries, "f")[key];
        if (isUndefined(waiting)) {
            // nothing waiting, construct new
            waiting = __classPrivateFieldGet(this, _Init_waitingRegistries, "f")[key] = new Promise((resolve, reject) => {
                creator()
                    .then((registry) => {
                    delete __classPrivateFieldGet(this, _Init_waitingRegistries, "f")[key];
                    resolve(registry);
                })
                    .catch((error) => {
                    delete __classPrivateFieldGet(this, _Init_waitingRegistries, "f")[key];
                    reject(error);
                });
            });
        }
        return waiting;
    }
    _getBlockRegistryViaVersion(blockHash, version) {
        if (version) {
            // check for pre-existing registries. We also check specName, e.g. it
            // could be changed like in Westmint with upgrade from shell -> westmint
            const existingViaVersion = __classPrivateFieldGet(this, _Init_registries, "f").find(({ runtimeVersion: { specName, specVersion } }) => specName.eq(version.specName) &&
                specVersion.eq(version.specVersion));
            if (existingViaVersion) {
                existingViaVersion.counter++;
                existingViaVersion.lastBlockHash = blockHash;
                return existingViaVersion;
            }
        }
        return null;
    }
    async _getBlockRegistryViaHash(blockHash) {
        // ensure we have everything required
        if (!this._genesisHash || !this._runtimeVersion) {
            throw new Error('Cannot retrieve data on an uninitialized chain');
        }
        // We have to assume that on the RPC layer the calls used here does not call back into
        // the registry swap, so getHeader & getRuntimeVersion should not be historic
        const header = this.registry.createType('HeaderPartial', this._genesisHash.eq(blockHash)
            ? { number: BN_ZERO, parentHash: this._genesisHash }
            : await firstValueFrom(this._rpcCore.chain.getHeader.raw(blockHash)));
        if (header.parentHash.isEmpty) {
            throw new Error('Unable to retrieve header and parent from supplied hash');
        }
        // get the runtime version, either on-chain or via an known upgrade history
        getUpgradeVersion(this._genesisHash, header.number);
        const version = this.registry.createType('RuntimeVersionPartial', await firstValueFrom(this._rpcCore.state.getRuntimeVersion.raw(header.parentHash)));
        return (
        // try to find via version
        this._getBlockRegistryViaVersion(blockHash, version) ||
            // return new or in-flight result
            await this._cacheBlockRegistryProgress(version.toHex(), () => this._createBlockRegistry(blockHash, header, version)));
    }
    /**
     * @description Sets up a registry based on the block hash defined
     */
    async getBlockRegistry(blockHash, knownVersion) {
        return (
        // try to find via blockHash
        __classPrivateFieldGet(this, _Init_registries, "f").find(({ lastBlockHash }) => lastBlockHash && u8aEq(lastBlockHash, blockHash)) ||
            // try to find via version
            this._getBlockRegistryViaVersion(blockHash, knownVersion) ||
            // return new or in-flight result
            await this._cacheBlockRegistryProgress(u8aToHex(blockHash), () => this._getBlockRegistryViaHash(blockHash)));
    }
    async _loadMeta() {
        // on re-connection to the same chain, we don't want to re-do everything from chain again
        if (this._isReady) {
            return true;
        }
        this._unsubscribeUpdates();
        // only load from on-chain if we are not a clone (default path), alternatively
        // just use the values from the source instance provided
        [this._genesisHash, this._runtimeMetadata] = this._options.source?._isReady
            ? await this._metaFromSource(this._options.source)
            : await this._metaFromChain(this._options.metadata);
        return this._initFromMeta(this._runtimeMetadata);
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    async _metaFromSource(source) {
        this._extrinsicType = source.extrinsicVersion;
        this._runtimeChain = source.runtimeChain;
        this._runtimeVersion = source.runtimeVersion;
        // manually build a list of all available methods in this RPC, we are
        // going to filter on it to align the cloned RPC without making a call
        const sections = Object.keys(source.rpc);
        const rpcs = [];
        for (let s = 0; s < sections.length; s++) {
            const section = sections[s];
            const methods = Object.keys(source.rpc[section]);
            for (let m = 0; m < methods.length; m++) {
                rpcs.push(`${section}_${methods[m]}`);
            }
        }
        this._filterRpc(rpcs, getSpecRpc(this.registry, source.runtimeChain, source.runtimeVersion.specName));
        return [source.genesisHash, source.runtimeMetadata];
    }
    // subscribe to metadata updates, inject the types on changes
    _subscribeUpdates() {
        if (__classPrivateFieldGet(this, _Init_updateSub, "f") || !this.hasSubscriptions) {
            return;
        }
        __classPrivateFieldSet(this, _Init_updateSub, this._rpcCore.state.subscribeRuntimeVersion().pipe(switchMap((version) => 
        // only retrieve the metadata when the on-chain version has been changed
        this._runtimeVersion?.specVersion.eq(version.specVersion)
            ? of(false)
            : this._rpcCore.state.getMetadata().pipe(map((metadata) => {
                l.log(`Runtime version updated to spec=${version.specVersion.toString()}, tx=${version.transactionVersion.toString()}`);
                this._runtimeMetadata = metadata;
                this._runtimeVersion = version;
                this._rx.runtimeVersion = version;
                // update the default registry version
                const thisRegistry = this._getDefaultRegistry();
                // setup the data as per the current versions
                thisRegistry.metadata = metadata;
                thisRegistry.runtimeVersion = version;
                this._initRegistry(this.registry, this._runtimeChain, version, metadata);
                this._injectMetadata(thisRegistry, true);
                return true;
            })))).subscribe(), "f");
    }
    async _metaFromChain(optMetadata) {
        const [genesisHash, runtimeVersion, chain, chainProps, rpcMethods, chainMetadata] = await Promise.all([
            firstValueFrom(this._rpcCore.chain.getBlockHash(0)),
            firstValueFrom(this._rpcCore.state.getRuntimeVersion()),
            firstValueFrom(this._rpcCore.system.chain()),
            firstValueFrom(this._rpcCore.system.properties()),
            firstValueFrom(this._rpcCore.rpc.methods()),
            optMetadata
                ? Promise.resolve(null)
                : firstValueFrom(this._rpcCore.state.getMetadata())
        ]);
        // set our chain version & genesisHash as returned
        this._runtimeChain = chain;
        this._runtimeVersion = runtimeVersion;
        this._rx.runtimeVersion = runtimeVersion;
        // retrieve metadata, either from chain  or as pass-in via options
        const metadataKey = `${genesisHash.toHex() || '0x'}-${runtimeVersion.specVersion.toString()}`;
        const metadata = chainMetadata || (optMetadata && optMetadata[metadataKey]
            ? new Metadata(this.registry, optMetadata[metadataKey])
            : await firstValueFrom(this._rpcCore.state.getMetadata()));
        // initializes the registry & RPC
        this._initRegistry(this.registry, chain, runtimeVersion, metadata, chainProps);
        this._filterRpc(rpcMethods.methods.map(textToString), getSpecRpc(this.registry, chain, runtimeVersion.specName));
        this._subscribeUpdates();
        // setup the initial registry, when we have none
        if (!__classPrivateFieldGet(this, _Init_registries, "f").length) {
            __classPrivateFieldGet(this, _Init_registries, "f").push({ counter: 0, isDefault: true, metadata, registry: this.registry, runtimeVersion });
        }
        // get unique types & validate
        metadata.getUniqTypes(this._options.throwOnUnknown || false);
        return [genesisHash, metadata];
    }
    _initFromMeta(metadata) {
        this._extrinsicType = metadata.asLatest.extrinsic.version.toNumber();
        this._rx.extrinsicType = this._extrinsicType;
        this._rx.genesisHash = this._genesisHash;
        this._rx.runtimeVersion = this._runtimeVersion; // must be set here
        // inject metadata and adjust the types as detected
        this._injectMetadata(this._getDefaultRegistry(), true);
        // derive is last, since it uses the decorated rx
        this._rx.derive = this._decorateDeriveRx(this._rxDecorateMethod);
        this._derive = this._decorateDerive(this._decorateMethod);
        return true;
    }
    _subscribeHealth() {
        this._unsubscribeHealth();
        // Only enable the health keepalive on WS, not needed on HTTP
        __classPrivateFieldSet(this, _Init_healthTimer, this.hasSubscriptions
            ? setInterval(() => {
                firstValueFrom(this._rpcCore.system.health.raw()).catch(() => undefined);
            }, KEEPALIVE_INTERVAL)
            : null, "f");
    }
    _unsubscribeHealth() {
        if (__classPrivateFieldGet(this, _Init_healthTimer, "f")) {
            clearInterval(__classPrivateFieldGet(this, _Init_healthTimer, "f"));
            __classPrivateFieldSet(this, _Init_healthTimer, null, "f");
        }
    }
    _unsubscribeUpdates() {
        if (__classPrivateFieldGet(this, _Init_updateSub, "f")) {
            __classPrivateFieldGet(this, _Init_updateSub, "f").unsubscribe();
            __classPrivateFieldSet(this, _Init_updateSub, null, "f");
        }
    }
    _unsubscribe() {
        this._unsubscribeHealth();
        this._unsubscribeUpdates();
    }
}
_Init_atLast = new WeakMap(), _Init_healthTimer = new WeakMap(), _Init_registries = new WeakMap(), _Init_updateSub = new WeakMap(), _Init_waitingRegistries = new WeakMap(), _Init_instances = new WeakSet(), _Init_onProviderConnect = async function _Init_onProviderConnect() {
    this._isConnected.next(true);
    this.emit('connected');
    try {
        const cryptoReady = this._options.initWasm === false
            ? true
            : await cryptoWaitReady();
        const hasMeta = await this._loadMeta();
        this._subscribeHealth();
        if (hasMeta && !this._isReady && cryptoReady) {
            this._isReady = true;
            this.emit('ready', this);
        }
    }
    catch (_error) {
        const error = new Error(`FATAL: Unable to initialize the API: ${_error.message}`);
        l.error(error);
        this.emit('error', error);
    }
}, _Init_onProviderDisconnect = function _Init_onProviderDisconnect() {
    this._isConnected.next(false);
    this._unsubscribe();
    this.emit('disconnected');
}, _Init_onProviderError = function _Init_onProviderError(error) {
    this.emit('error', error);
};

function assertResult(value) {
    if (value === undefined) {
        throw new Error("Api interfaces needs to be initialized before using, wait for 'isReady'");
    }
    return value;
}
class Getters extends Init {
    /**
     * @description Runtime call interfaces (currently untyped, only decorated via API options)
     */
    get call() {
        return assertResult(this._call);
    }
    /**
     * @description Contains the parameter types (constants) of all modules.
     *
     * The values are instances of the appropriate type and are accessible using `section`.`constantName`,
     *
     * @example
     * <BR>
     *
     * ```javascript
     * console.log(api.consts.democracy.enactmentPeriod.toString())
     * ```
     */
    get consts() {
        return assertResult(this._consts);
    }
    /**
     * @description Derived results that are injected into the API, allowing for combinations of various query results.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.derive.chain.bestNumber((number) => {
     *   console.log('best number', number);
     * });
     * ```
     */
    get derive() {
        return assertResult(this._derive);
    }
    /**
     * @description Errors from metadata
     */
    get errors() {
        return assertResult(this._errors);
    }
    /**
     * @description Events from metadata
     */
    get events() {
        return assertResult(this._events);
    }
    /**
     * @description  Returns the version of extrinsics in-use on this chain
     */
    get extrinsicVersion() {
        return this._extrinsicType;
    }
    /**
     * @description Contains the genesis Hash of the attached chain. Apart from being useful to determine the actual chain, it can also be used to sign immortal transactions.
     */
    get genesisHash() {
        return assertResult(this._genesisHash);
    }
    /**
     * @description true is the underlying provider is connected
     */
    get isConnected() {
        return this._isConnected.getValue();
    }
    /**
     * @description The library information name & version (from package.json)
     */
    get libraryInfo() {
        return `${packageInfo.name} v${packageInfo.version}`;
    }
    /**
     * @description Contains all the chain state modules and their subsequent methods in the API. These are attached dynamically from the runtime metadata.
     *
     * All calls inside the namespace, is denoted by `section`.`method` and may take an optional query parameter. As an example, `api.query.timestamp.now()` (current block timestamp) does not take parameters, while `api.query.system.account(<accountId>)` (retrieving the associated nonce & balances for an account), takes the `AccountId` as a parameter.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.query.system.account(<accountId>, ([nonce, balance]) => {
     *   console.log('new free balance', balance.free, 'new nonce', nonce);
     * });
     * ```
     */
    get query() {
        return assertResult(this._query);
    }
    /**
     * @description Allows for the querying of multiple storage entries and the combination thereof into a single result. This is a very optimal way to make multiple queries since it only makes a single connection to the node and retrieves the data over one subscription.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * const unsub = await api.queryMulti(
     *   [
     *     // you can include the storage without any parameters
     *     api.query.balances.totalIssuance,
     *     // or you can pass parameters to the storage query
     *     [api.query.system.account, '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY']
     *   ],
     *   ([existential, [, { free }]]) => {
     *     console.log(`You have ${free.sub(existential)} more than the existential deposit`);
     *
     *     unsub();
     *   }
     * );
     * ```
     */
    get queryMulti() {
        return assertResult(this._queryMulti);
    }
    /**
     * @description Contains all the raw rpc sections and their subsequent methods in the API as defined by the jsonrpc interface definitions. Unlike the dynamic `api.query` and `api.tx` sections, these methods are fixed (although extensible with node upgrades) and not determined by the runtime.
     *
     * RPC endpoints available here allow for the query of chain, node and system information, in addition to providing interfaces for the raw queries of state (using known keys) and the submission of transactions.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.rpc.chain.subscribeNewHeads((header) => {
     *   console.log('new header', header);
     * });
     * ```
     */
    get rpc() {
        return assertResult(this._rpc);
    }
    /**
     * @description Contains the chain information for the current node.
     */
    get runtimeChain() {
        return assertResult(this._runtimeChain);
    }
    /**
     * @description Yields the current attached runtime metadata. Generally this is only used to construct extrinsics & storage, but is useful for current runtime inspection.
     */
    get runtimeMetadata() {
        return assertResult(this._runtimeMetadata);
    }
    /**
     * @description Contains the version information for the current runtime.
     */
    get runtimeVersion() {
        return assertResult(this._runtimeVersion);
    }
    /**
     * @description The underlying Rx API interface
     */
    get rx() {
        return assertResult(this._rx);
    }
    /**
     * @description Returns the underlying provider stats
     */
    get stats() {
        return this._rpcCore.provider.stats;
    }
    /**
     * @description The type of this API instance, either 'rxjs' or 'promise'
     */
    get type() {
        return this._type;
    }
    /**
     * @description Contains all the extrinsic modules and their subsequent methods in the API. It allows for the construction of transactions and the submission thereof. These are attached dynamically from the runtime metadata.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.tx.balances
     *   .transfer(<recipientId>, <balance>)
     *   .signAndSend(<keyPair>, ({status}) => {
     *     console.log('tx status', status.asFinalized.toHex());
     *   });
     * ```
     */
    get tx() {
        return assertResult(this._extrinsics);
    }
    /**
     * @description Finds the definition for a specific [[CallFunction]] based on the index supplied
     */
    findCall(callIndex) {
        return findCall(this.registry, callIndex);
    }
    /**
     * @description Finds the definition for a specific [[RegistryError]] based on the index supplied
     */
    findError(errorIndex) {
        return findError(this.registry, errorIndex);
    }
}

class ApiBase extends Getters {
    /**
     * @description Create an instance of the class
     *
     * @param options Options object to create API instance or a Provider instance
     *
     * @example
     * <BR>
     *
     * ```javascript
     * import Api from '@polkadot/api/promise';
     *
     * const api = new Api().isReady();
     *
     * api.rpc.subscribeNewHeads((header) => {
     *   console.log(`new block #${header.number.toNumber()}`);
     * });
     * ```
     */
    constructor(options = {}, type, decorateMethod) {
        super(options, type, decorateMethod);
    }
    /**
     * @description Connect from the underlying provider, halting all network traffic
     */
    connect() {
        return this._rpcCore.connect();
    }
    /**
     * @description Disconnect from the underlying provider, halting all network traffic
     */
    disconnect() {
        this._unsubscribe();
        return this._rpcCore.disconnect();
    }
    /**
     * @description Set an external signer which will be used to sign extrinsic when account passed in is not KeyringPair
     */
    setSigner(signer) {
        this._rx.signer = signer;
    }
    /**
     * @description Signs a raw signer payload, string or Uint8Array
     */
    async sign(address, data, { signer } = {}) {
        if (isString(address)) {
            const _signer = signer || this._rx.signer;
            if (!_signer || !_signer.signRaw) {
                throw new Error('No signer exists with a signRaw interface. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.');
            }
            return (await _signer.signRaw(objectSpread({ type: 'bytes' }, data, { address }))).signature;
        }
        return u8aToHex(address.sign(u8aToU8a(data.data)));
    }
}

var _Combinator_allHasFired, _Combinator_callback, _Combinator_fired, _Combinator_fns, _Combinator_isActive, _Combinator_results, _Combinator_subscriptions;
class Combinator {
    constructor(fns, callback) {
        _Combinator_allHasFired.set(this, false);
        _Combinator_callback.set(this, void 0);
        _Combinator_fired.set(this, []);
        _Combinator_fns.set(this, []);
        _Combinator_isActive.set(this, true);
        _Combinator_results.set(this, []);
        _Combinator_subscriptions.set(this, []);
        __classPrivateFieldSet(this, _Combinator_callback, callback, "f");
        // eslint-disable-next-line @typescript-eslint/require-await
        __classPrivateFieldSet(this, _Combinator_subscriptions, fns.map(async (input, index) => {
            const [fn, ...args] = Array.isArray(input)
                ? input
                : [input];
            __classPrivateFieldGet(this, _Combinator_fired, "f").push(false);
            __classPrivateFieldGet(this, _Combinator_fns, "f").push(fn);
            // Not quite 100% how to have a variable number at the front here
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/ban-types
            return fn(...args, this._createCallback(index));
        }), "f");
    }
    _allHasFired() {
        __classPrivateFieldSet(this, _Combinator_allHasFired, __classPrivateFieldGet(this, _Combinator_allHasFired, "f") || __classPrivateFieldGet(this, _Combinator_fired, "f").filter((hasFired) => !hasFired).length === 0, "f");
        return __classPrivateFieldGet(this, _Combinator_allHasFired, "f");
    }
    _createCallback(index) {
        return (value) => {
            __classPrivateFieldGet(this, _Combinator_fired, "f")[index] = true;
            __classPrivateFieldGet(this, _Combinator_results, "f")[index] = value;
            this._triggerUpdate();
        };
    }
    _triggerUpdate() {
        if (!__classPrivateFieldGet(this, _Combinator_isActive, "f") || !isFunction$1(__classPrivateFieldGet(this, _Combinator_callback, "f")) || !this._allHasFired()) {
            return;
        }
        try {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            __classPrivateFieldGet(this, _Combinator_callback, "f").call(this, __classPrivateFieldGet(this, _Combinator_results, "f"));
        }
        catch (error) {
            // swallow, we don't want the handler to trip us up
        }
    }
    unsubscribe() {
        if (!__classPrivateFieldGet(this, _Combinator_isActive, "f")) {
            return;
        }
        __classPrivateFieldSet(this, _Combinator_isActive, false, "f");
        // eslint-disable-next-line @typescript-eslint/no-misused-promises
        __classPrivateFieldGet(this, _Combinator_subscriptions, "f").forEach(async (subscription) => {
            try {
                const unsubscribe = await subscription;
                if (isFunction$1(unsubscribe)) {
                    unsubscribe();
                }
            }
            catch (error) {
                // ignore
            }
        });
    }
}
_Combinator_allHasFired = new WeakMap(), _Combinator_callback = new WeakMap(), _Combinator_fired = new WeakMap(), _Combinator_fns = new WeakMap(), _Combinator_isActive = new WeakMap(), _Combinator_results = new WeakMap(), _Combinator_subscriptions = new WeakMap();

function promiseTracker(resolve, reject) {
    let isCompleted = false;
    return {
        reject: (error) => {
            if (!isCompleted) {
                isCompleted = true;
                reject(error);
            }
            return EMPTY;
        },
        resolve: (value) => {
            if (!isCompleted) {
                isCompleted = true;
                resolve(value);
            }
        }
    };
}
function extractArgs(args, needsCallback) {
    const actualArgs = args.slice();
    // If the last arg is a function, we pop it, put it into callback.
    // actualArgs will then hold the actual arguments to be passed to `method`
    const callback = (args.length && isFunction$1(args[args.length - 1]))
        ? actualArgs.pop()
        : undefined;
    // When we need a subscription, ensure that a valid callback is actually passed
    if (needsCallback && !isFunction$1(callback)) {
        throw new Error('Expected a callback to be passed with subscriptions');
    }
    return [actualArgs, callback];
}
function decorateCall(method, args) {
    return new Promise((resolve, reject) => {
        // single result tracker - either reject with Error or resolve with Codec result
        const tracker = promiseTracker(resolve, reject);
        // encoding errors reject immediately, any result unsubscribes and resolves
        const subscription = method(...args)
            .pipe(catchError((error) => tracker.reject(error)))
            .subscribe((result) => {
            tracker.resolve(result);
            nextTick(() => subscription.unsubscribe());
        });
    });
}
function decorateSubscribe(method, args, resultCb) {
    return new Promise((resolve, reject) => {
        // either reject with error or resolve with unsubscribe callback
        const tracker = promiseTracker(resolve, reject);
        // errors reject immediately, the first result resolves with an unsubscribe promise, all results via callback
        const subscription = method(...args)
            .pipe(catchError((error) => tracker.reject(error)), tap(() => tracker.resolve(() => subscription.unsubscribe())))
            .subscribe((result) => {
            // queue result (back of queue to clear current)
            nextTick(() => resultCb(result));
        });
    });
}
/**
 * @description Decorate method for ApiPromise, where the results are converted to the Promise equivalent
 */
function toPromiseMethod(method, options) {
    const needsCallback = !!(options && options.methodName && options.methodName.includes('subscribe'));
    return function (...args) {
        const [actualArgs, resultCb] = extractArgs(args, needsCallback);
        return resultCb
            ? decorateSubscribe(method, actualArgs, resultCb)
            : decorateCall(options?.overrideNoSub || method, actualArgs);
    };
}

var _ApiPromise_isReadyPromise, _ApiPromise_isReadyOrErrorPromise;
/**
 * # @polkadot/api/promise
 *
 * ## Overview
 *
 * @name ApiPromise
 * @description
 * ApiPromise is a standard JavaScript wrapper around the RPC and interfaces on the Polkadot network. As a full Promise-based, all interface calls return Promises, including the static `.create(...)`. Subscription calls utilise `(value) => {}` callbacks to pass through the latest values.
 *
 * The API is well suited to real-time applications where either the single-shot state is needed or use is to be made of the subscription-based features of Polkadot (and Substrate) clients.
 *
 * @see [[ApiRx]]
 *
 * ## Usage
 *
 * Making rpc calls -
 * <BR>
 *
 * ```javascript
 * import ApiPromise from '@polkadot/api/promise';
 *
 * // initialise via static create
 * const api = await ApiPromise.create();
 *
 * // make a subscription to the network head
 * api.rpc.chain.subscribeNewHeads((header) => {
 *   console.log(`Chain is at #${header.number}`);
 * });
 * ```
 * <BR>
 *
 * Subscribing to chain state -
 * <BR>
 *
 * ```javascript
 * import { ApiPromise, WsProvider } from '@polkadot/api';
 *
 * // initialise a provider with a specific endpoint
 * const provider = new WsProvider('wss://example.com:9944')
 *
 * // initialise via isReady & new with specific provider
 * const api = await new ApiPromise({ provider }).isReady;
 *
 * // retrieve the block target time
 * const blockPeriod = await api.query.timestamp.blockPeriod().toNumber();
 * let last = 0;
 *
 * // subscribe to the current block timestamp, updates automatically (callback provided)
 * api.query.timestamp.now((timestamp) => {
 *   const elapsed = last
 *     ? `, ${timestamp.toNumber() - last}s since last`
 *     : '';
 *
 *   last = timestamp.toNumber();
 *   console.log(`timestamp ${timestamp}${elapsed} (${blockPeriod}s target)`);
 * });
 * ```
 * <BR>
 *
 * Submitting a transaction -
 * <BR>
 *
 * ```javascript
 * import ApiPromise from '@polkadot/api/promise';
 *
 * ApiPromise.create().then((api) => {
 *   const [nonce] = await api.query.system.account(keyring.alice.address);
 *
 *   api.tx.balances
 *     // create transfer
 *     transfer(keyring.bob.address, 12345)
 *     // sign the transcation
 *     .sign(keyring.alice, { nonce })
 *     // send the transaction (optional status callback)
 *     .send((status) => {
 *       console.log(`current status ${status.type}`);
 *     })
 *     // retrieve the submitted extrinsic hash
 *     .then((hash) => {
 *       console.log(`submitted with hash ${hash}`);
 *     });
 * });
 * ```
 */
class ApiPromise extends ApiBase {
    /**
     * @description Creates an instance of the ApiPromise class
     * @param options Options to create an instance. This can be either [[ApiOptions]] or
     * an [[WsProvider]].
     * @example
     * <BR>
     *
     * ```javascript
     * import Api from '@polkadot/api/promise';
     *
     * new Api().isReady.then((api) => {
     *   api.rpc.subscribeNewHeads((header) => {
     *     console.log(`new block #${header.number.toNumber()}`);
     *   });
     * });
     * ```
     */
    constructor(options) {
        super(options, 'promise', toPromiseMethod);
        _ApiPromise_isReadyPromise.set(this, void 0);
        _ApiPromise_isReadyOrErrorPromise.set(this, void 0);
        __classPrivateFieldSet(this, _ApiPromise_isReadyPromise, new Promise((resolve) => {
            super.once('ready', () => resolve(this));
        }), "f");
        __classPrivateFieldSet(this, _ApiPromise_isReadyOrErrorPromise, new Promise((resolve, reject) => {
            const tracker = promiseTracker(resolve, reject);
            super.once('ready', () => tracker.resolve(this));
            super.once('error', (error) => tracker.reject(error));
        }), "f");
    }
    /**
     * @description Creates an ApiPromise instance using the supplied provider. Returns an Promise containing the actual Api instance.
     * @param options options that is passed to the class contructor. Can be either [[ApiOptions]] or a
     * provider (see the constructor arguments)
     * @example
     * <BR>
     *
     * ```javascript
     * import Api from '@polkadot/api/promise';
     *
     * Api.create().then(async (api) => {
     *   const timestamp = await api.query.timestamp.now();
     *
     *   console.log(`lastest block timestamp ${timestamp}`);
     * });
     * ```
     */
    static create(options) {
        const instance = new ApiPromise(options);
        if (options && options.throwOnConnect) {
            return instance.isReadyOrError;
        }
        // Swallow any rejections on isReadyOrError
        // (in Node 15.x this creates issues, when not being looked at)
        instance.isReadyOrError.catch(() => {
            // ignore
        });
        return instance.isReady;
    }
    /**
     * @description Promise that resolves the first time we are connected and loaded
     */
    get isReady() {
        return __classPrivateFieldGet(this, _ApiPromise_isReadyPromise, "f");
    }
    /**
     * @description Promise that resolves if we can connect, or reject if there is an error
     */
    get isReadyOrError() {
        return __classPrivateFieldGet(this, _ApiPromise_isReadyOrErrorPromise, "f");
    }
    /**
     * @description Returns a clone of this ApiPromise instance (new underlying provider connection)
     */
    clone() {
        return new ApiPromise(objectSpread({}, this._options, { source: this }));
    }
    /**
     * @description Creates a combinator that can be used to combine the latest results from multiple subscriptions
     * @param fns An array of function to combine, each in the form of `(cb: (value: void)) => void`
     * @param callback A callback that will return an Array of all the values this combinator has been applied to
     * @example
     * <BR>
     *
     * ```javascript
     * const address = '5DTestUPts3kjeXSTMyerHihn1uwMfLj8vU8sqF7qYrFacT7';
     *
     * // combines values from balance & nonce as it updates
     * api.combineLatest([
     *   api.rpc.chain.subscribeNewHeads,
     *   (cb) => api.query.system.account(address, cb)
     * ], ([head, [balance, nonce]]) => {
     *   console.log(`#${head.number}: You have ${balance.free} units, with ${nonce} transactions sent`);
     * });
     * ```
     */
    // eslint-disable-next-line @typescript-eslint/require-await
    async combineLatest(fns, callback) {
        const combinator = new Combinator(fns, callback);
        return () => {
            combinator.unsubscribe();
        };
    }
}
_ApiPromise_isReadyPromise = new WeakMap(), _ApiPromise_isReadyOrErrorPromise = new WeakMap();

function toRxMethod(method) {
    return method;
}

var _ApiRx_isReadyRx;
/**
 * # @polkadot/api/rx
 *
 *  ## Overview
 *
 * @name ApiRx
 *
 * @description
 * ApiRx is a powerful RxJS Observable wrapper around the RPC and interfaces on the Polkadot network. As a full Observable API, all interface calls return RxJS Observables, including the static `.create(...)`. In the same fashion and subscription-based methods return long-running Observables that update with the latest values.
 *
 * The API is well suited to real-time applications where the latest state is needed, unlocking the subscription-based features of Polkadot (and Substrate) clients. Some familiarity with RxJS is a requirement to use the API, however just understanding `.subscribe` and `.pipe` on Observables will unlock full-scale use thereof.
 *
 * @see [[ApiPromise]]
 *
 * ## Usage
 *
 * Making rpc calls -
 * <BR>
 *
 * ```javascript
 * import ApiRx from '@polkadot/api/rx';
 *
 * // initialize via Promise & static create
 * const api = await ApiRx.create().toPromise();
 *
 * // make a call to retrieve the current network head
 * api.rpc.chain.subscribeNewHeads().subscribe((header) => {
 *   console.log(`Chain is at #${header.number}`);
 * });
 * ```
 * <BR>
 *
 * Subscribing to chain state -
 * <BR>
 *
 * ```javascript
 * import { combineLatest, pairwise, switchMap } from 'rxjs';
 * import { ApiRx, WsProvider } from '@polkadot/api';
 *
 *
 * // initialize a provider with a specific endpoint
 * const provider = new WsProvider('wss://example.com:9944')
 *
 * // initialize via isReady & new with specific provider
 * new ApiRx({ provider })
 *   .isReady
 *   .pipe(
 *     switchMap((api) =>
 *       combineLatest([
 *         api.query.timestamp.blockPeriod(),
 *         api.query.timestamp.now().pipe(pairwise())
 *       ])
 *     )
 *   )
 *   .subscribe(([blockPeriod, timestamp]) => {
 *      const elapsed = timestamp[1].toNumber() - timestamp[0].toNumber();
 *      console.log(`timestamp ${timestamp[1]} \nelapsed ${elapsed} \n(${blockPeriod}s target)`);
 *   });
 * ```
 * <BR>
 *
 * Submitting a transaction -
 * <BR>
 *
 * ```javascript
 * import { first, switchMap } from 'rxjs';
 * import ApiRx from '@polkadot/api/rx';
 *
 * // import the test keyring (already has dev keys for Alice, Bob, Charlie, Eve & Ferdie)
 * import testingPairs from '@polkadot/keyring/testingPairs';
 * const keyring = testingPairs();
 *
 * // get api via Promise
 * const api = await ApiRx.create().toPromise();
 *
 * // retrieve nonce for the account
 * api.query.system
 *   .account(keyring.alice.address)
 *   .pipe(
 *      first(),
 *      // pipe nonce into transfer
 *      switchMap(([nonce]) =>
 *        api.tx.balances
 *          // create transfer
 *          .transfer(keyring.bob.address, 12345)
 *          // sign the transaction
 *          .sign(keyring.alice, { nonce })
 *          // send the transaction
 *          .send()
 *      )
 *   )
 *   // subscribe to overall result
 *   .subscribe(({ status }) => {
 *     if (status.isInBlock) {
 *       console.log('Completed at block hash', status.asFinalized.toHex());
 *     }
 *   });
 * ```
 */
class ApiRx extends ApiBase {
    /**
     * @description Create an instance of the ApiRx class
     * @param options Options to create an instance. Can be either [[ApiOptions]] or [[WsProvider]]
     * @example
     * <BR>
     *
     * ```javascript
     * import { switchMap } from 'rxjs';
     * import Api from '@polkadot/api/rx';
     *
     * new Api().isReady
     *   .pipe(
     *     switchMap((api) =>
     *       api.rpc.chain.subscribeNewHeads()
     *   ))
     *   .subscribe((header) => {
     *     console.log(`new block #${header.number.toNumber()}`);
     *   });
     * ```
     */
    constructor(options) {
        super(options, 'rxjs', toRxMethod);
        _ApiRx_isReadyRx.set(this, void 0);
        __classPrivateFieldSet(this, _ApiRx_isReadyRx, from(
        // You can create an observable from an event, however my mind groks this form better
        new Promise((resolve) => {
            super.on('ready', () => resolve(this));
        })), "f");
    }
    /**
     * @description Creates an ApiRx instance using the supplied provider. Returns an Observable containing the actual Api instance.
     * @param options options that is passed to the class constructor. Can be either [[ApiOptions]] or [[WsProvider]]
     * @example
     * <BR>
     *
     * ```javascript
     * import { switchMap } from 'rxjs';
     * import Api from '@polkadot/api/rx';
     *
     * Api.create()
     *   .pipe(
     *     switchMap((api) =>
     *       api.rpc.chain.subscribeNewHeads()
     *   ))
     *   .subscribe((header) => {
     *     console.log(`new block #${header.number.toNumber()}`);
     *   });
     * ```
     */
    static create(options) {
        return new ApiRx(options).isReady;
    }
    /**
     * @description Observable that returns the first time we are connected and loaded
     */
    get isReady() {
        return __classPrivateFieldGet(this, _ApiRx_isReadyRx, "f");
    }
    /**
     * @description Returns a clone of this ApiRx instance (new underlying provider connection)
     */
    clone() {
        return new ApiRx(objectSpread({}, this._options, { source: this }));
    }
}
_ApiRx_isReadyRx = new WeakMap();

export { ApiPromise, ApiRx, HttpProvider, Keyring, ScProvider, SubmittableResult, WsProvider, packageInfo, toPromiseMethod, toRxMethod };
